/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jce = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[8,10],$V1=[1,20],$V2=[1,19],$V3=[1,18],$V4=[1,14],$V5=[14,21,25,33,45],$V6=[1,30],$V7=[1,29],$V8=[1,31],$V9=[1,32],$Va=[11,29,42],$Vb=[1,47],$Vc=[1,50],$Vd=[1,54],$Ve=[14,30],$Vf=[11,14],$Vg=[11,14,29],$Vh=[1,71],$Vi=[1,70],$Vj=[1,72],$Vk=[1,73],$Vl=[11,14,15,29],$Vm=[11,39,40,43,50,53],$Vn=[11,29,39,40,43,50,53];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"jce":3,"deplist":4,"expressions":5,"EOF":6,"dep":7,"INCLUDE":8,"STRING_LITERAL":9,"MODULE":10,"IDENTIFIER":11,"LEFT":12,"structlist":13,"RIGHT":14,"SEMI":15,"interface":16,"def":17,"struct":18,"enum":19,"statement":20,"CONST":21,"t":22,"EQUAL":23,"value":24,"ENUM":25,"enumitems":26,"enumitem":27,"enumitemDef":28,"COMMA":29,"NUMBER":30,"HEX":31,"UMINUS":32,"STRUCT":33,"itemlist":34,"items":35,"item":36,"REQUIRED":37,"propertyName":38,"TYPE":39,"VECTOR":40,"OPEN":41,"CLOSE":42,"MAP":43,"DOUBLE_COLON":44,"INTERFACE":45,"methodlist":46,"method":47,"LEFT_QUOTE":48,"args":49,"RIGHT_QUOTE":50,"argc":51,"arg":52,"OUT":53,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:"INCLUDE",9:"STRING_LITERAL",10:"MODULE",11:"IDENTIFIER",12:"LEFT",14:"RIGHT",15:"SEMI",21:"CONST",23:"EQUAL",25:"ENUM",29:"COMMA",30:"NUMBER",31:"HEX",32:"UMINUS",33:"STRUCT",37:"REQUIRED",39:"TYPE",40:"VECTOR",41:"OPEN",42:"CLOSE",43:"MAP",44:"DOUBLE_COLON",45:"INTERFACE",48:"LEFT_QUOTE",50:"RIGHT_QUOTE",53:"OUT"},
productions_: [0,[3,3],[4,0],[4,2],[7,2],[5,6],[5,7],[5,6],[13,1],[13,2],[17,1],[17,1],[17,1],[20,6],[19,6],[26,1],[26,2],[27,1],[27,2],[28,1],[28,3],[24,1],[24,1],[24,1],[24,2],[18,3],[34,4],[35,1],[35,2],[36,5],[38,1],[38,4],[38,3],[38,3],[38,3],[22,1],[22,1],[22,4],[22,6],[22,3],[16,6],[46,1],[46,2],[47,6],[49,0],[49,2],[51,2],[51,1],[52,2],[52,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    return {
        deps: $$[$0-2],
        module: $$[$0-1]
    }

break;
case 2: case 44:

    this.$ = [];

break;
case 3: case 9:

    this.$ = $$[$0-1].concat($$[$0])

break;
case 4:

    {
    const fileName = $$[$0].replace(/^"/, "").replace(/"$/, "");

    this.$ = [fileName];
    }

break;
case 5:

        // console.log('MODULE:', $$[$0-4])
        // module.IDENTIFIER = $$[$0-4];

        // this.$ = {
        //     name: $$[$0-4],
        //     structList: $$[$0-2]
        // }
        
        this.$ = t.tsModuleDeclaration(
            t.identifier($$[$0-4]),
            t.tsModuleBlock($$[$0-2])
        );
    
break;
case 6:

    $$[$0-3].push($$[$0-2]);
    this.$ = t.tsModuleDeclaration(
        t.identifier($$[$0-5]),
        t.tsModuleBlock($$[$0-3])
    );

break;
case 7:

    this.$ = t.tsModuleDeclaration(
        t.identifier($$[$0-4]),
        t.tsModuleBlock([$$[$0-2]])
    );

break;
case 8: case 15: case 27: case 41:

    this.$ = [$$[$0]];

break;
case 10: case 11: case 12: case 17: case 47:

    this.$ = $$[$0];

break;
case 13:

    {
        const id = t.identifier($$[$0-3]);
        // id.typeAnnotation = t.tsTypeAnnotation($$[$0-4]);
        const init = $$[$0-1];
        this.$ = t.variableDeclaration("const", [t.variableDeclarator(id, init)]);
    }

break;
case 14:

{
    this.$ = t.tsEnumDeclaration(
        t.identifier($$[$0-4]),
        $$[$0-2]
    );
}

break;
case 16:

    this.$ = $$[$0-1].concat($$[$0]);

break;
case 18: case 46:

    this.$ = $$[$0-1];

break;
case 19:

    this.$ = t.tsEnumMember(t.identifier($$[$0]));

break;
case 20:

    {
    const value = Number($$[$0]);
    this.$ = t.tsEnumMember(t.identifier($$[$0-2]), $$[$0]);
    }

break;
case 21:

    {
        this.$ = t.numericLiteral(Number($$[$0]));
    }

break;
case 22:

    {
        const s = String($$[$0]).replace(/^"/, "").replace(/"$/, "")
        this.$ = t.stringLiteral(s);
    }

break;
case 23:

    this.$ = t.stringLiteral($$[$0]);

break;
case 24:

    {
        const value = -Number($$[$0]);
        this.$ = t.numericLiteral(value);
    }

break;
case 25:

    this.$ = t.tsInterfaceDeclaration(
        t.identifier($$[$0-1]),
        undefined,
        undefined,
        t.tsInterfaceBody($$[$0])
    );

break;
case 26: case 32: case 33: case 34:

    this.$ = $$[$0-2]

break;
case 28:

    // console.log('ERROR', $$[$0-1], $$[$0]);

    this.$ = $$[$0-1].concat($$[$0])

break;
case 29:

    {
        const node = t.tsPropertySignature(
            t.identifier($$[$0-1]),
            t.tsTypeAnnotation($$[$0-2])
        );

        if ($$[$0-3] === 'optional') {
            node.optional = true;
        }

        this.$ = node;
    }

break;
case 30:

    this.$ = $$[$0]

break;
case 31:

    this.$ = $$[$0-3]

break;
case 35:

    // console.log('TYPE:', $$[$0] + '_x');
    if ($$[$0] === 'bool') {
        this.$ = t.tsBooleanKeyword();
    } 
    else if ($$[$0] === 'int') {
        this.$ = t.tsNumberKeyword();
    }
    else {
        this.$ = t.tsStringKeyword();
    }

break;
case 36:

    this.$ = t.tsTypeReference(t.identifier($$[$0]));

break;
case 37:

    this.$ = t.tsTypeReference(
        t.identifier('Array'),
        t.tsTypeParameterInstantiation([
          $$[$0-1]
        ])
      );

break;
case 38:

    // console.log("map:", $$[$0-3]);
    if ($$[$0-3].type === 'TSTypeReference') {
        this.$ = t.tsTypeReference(
                t.identifier('Map'),
                t.tsTypeParameterInstantiation([
                    $$[$0-3],
                    $$[$0-1]
                ])
            );
    } else {
        this.$ = t.tsTypeReference(
            t.identifier('Record'),
            t.tsTypeParameterInstantiation([
                $$[$0-3],
                $$[$0-1]
            ])
        );
    }

break;
case 39:

    // module::struct => namespace.interface
    const left = t.identifier($$[$0-2]);
    const right = t.identifier($$[$0]);
    this.$ = t.tsTypeReference(t.tsQualifiedName(left, right));

break;
case 40:

    // console.log($$[$0-5]);
    // console.log($$[$0-4]);

    this.$ = t.tsInterfaceDeclaration(
        t.identifier($$[$0-4]),
        undefined,
        undefined,
        t.tsInterfaceBody($$[$0-2])
    );

break;
case 42:

    this.$ = $$[$0].concat($$[$0-1]);

break;
case 43:

    {
    const typeParameters = null;
    const inputArgs = $$[$0-2].filter(o => o.out === false);

    const parameters = inputArgs.map(o => {
        p = t.identifier(o.name);
        p.typeAnnotation = t.tsTypeAnnotation(o.type);

        return p;
    });

    // console.log('parameters', parameters);

    const out = $$[$0-2].find(o => o.out === true);
    let typeAnnotation;

    if (out) {
        // console.log(out);
        typeAnnotation = t.tsTypeAnnotation(out.type);
    } else {
        typeAnnotation = t.tsTypeAnnotation(t.tsTypeReference(t.identifier("void")));   
    }

    this.$ = t.tsPropertySignature(
            t.identifier($$[$0-4]),
            t.tsTypeAnnotation(
                t.tsFunctionType(
                    typeParameters,
                    parameters,
                    typeAnnotation
                )
            )
        );
    }

break;
case 45:

    // console.log('arg', $$[$0], $$[$0-1]);
    // if (!Array.isArray($$[$0-1])) {
    //     this.$ = 
    // }

    // this.$ = $$[$0].concat($$[$0-1]);
    this.$ = $$[$0-1].concat($$[$0]);

break;
case 48:

    this.$ = {
        name: $$[$0],
        type: $$[$0-1],
        out: false
    }

break;
case 49:

    this.$ = {
        name: $$[$0],
        type: $$[$0-1],
        out: true
    }

break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},{5:3,7:4,8:[1,6],10:[1,5]},{6:[1,7]},o($V0,[2,3]),{11:[1,8]},{9:[1,9]},{1:[2,1]},{12:[1,10]},o($V0,[2,4]),{13:11,16:12,17:13,18:15,19:16,20:17,21:$V1,25:$V2,33:$V3,45:$V4},{14:[1,21],16:22,17:23,18:15,19:16,20:17,21:$V1,25:$V2,33:$V3,45:$V4},{14:[1,24]},o($V5,[2,8]),{11:[1,25]},o($V5,[2,10]),o($V5,[2,11]),o($V5,[2,12]),{11:[1,26]},{11:[1,27]},{11:$V6,22:28,39:$V7,40:$V8,43:$V9},{15:[1,33]},{14:[1,34]},o($V5,[2,9]),{15:[1,35]},{12:[1,36]},{12:[1,38],34:37},{12:[1,39]},{11:[1,40]},o($Va,[2,35]),o($Va,[2,36],{44:[1,41]}),{41:[1,42]},{41:[1,43]},{6:[2,5]},{15:[1,44]},{6:[2,7]},{39:$Vb,46:45,47:46},o($V5,[2,25]),{30:$Vc,35:48,36:49},{11:$Vd,26:51,27:52,28:53},{23:[1,55]},{11:[1,56]},{11:$V6,22:57,39:$V7,40:$V8,43:$V9},{11:$V6,22:58,39:$V7,40:$V8,43:$V9},{6:[2,6]},{14:[1,59]},{14:[2,41],39:$Vb,46:60,47:46},{11:[1,61]},{14:[1,62],30:$Vc,36:63},o($Ve,[2,27]),{37:[1,64]},{11:$Vd,14:[1,65],27:66,28:53},o($Vf,[2,15]),o($Vf,[2,17],{29:[1,67]}),o($Vg,[2,19],{23:[1,68]}),{9:$Vh,24:69,30:$Vi,31:$Vj,32:$Vk},o($Va,[2,39]),{42:[1,74]},{29:[1,75]},{15:[1,76]},{14:[2,42]},{48:[1,77]},{15:[1,78]},o($Ve,[2,28]),{11:$V6,22:79,39:$V7,40:$V8,43:$V9},{15:[1,80]},o($Vf,[2,16]),o($Vf,[2,18]),{9:$Vh,24:81,30:$Vi,31:$Vj,32:$Vk},{15:[1,82]},o($Vl,[2,21]),o($Vl,[2,22]),o($Vl,[2,23]),{30:[1,83]},o($Va,[2,37]),{11:$V6,22:84,39:$V7,40:$V8,43:$V9},{14:[2,40]},o($Vm,[2,44],{49:85}),o($V5,[2,26]),{11:[1,87],38:86},o($V5,[2,14]),o($Vg,[2,20]),o($V5,[2,13]),o($Vl,[2,24]),{42:[1,88]},{11:$V6,22:92,39:$V7,40:$V8,43:$V9,50:[1,89],51:90,52:91,53:[1,93]},{15:[1,94]},{15:[2,30],23:[1,95]},o($Va,[2,38]),{15:[1,96]},o($Vm,[2,45]),o($Vm,[2,47],{29:[1,97]}),{11:[1,98]},{11:$V6,22:99,39:$V7,40:$V8,43:$V9},o($Ve,[2,29]),{9:[1,103],11:[1,102],30:[1,101],32:[1,100]},o([14,39],[2,43]),o($Vm,[2,46]),o($Vn,[2,48]),{11:[1,104]},{30:[1,105]},{15:[2,32]},{15:[2,33]},{15:[2,34]},o($Vn,[2,49]),{15:[2,31]}],
defaultActions: {7:[2,1],33:[2,5],35:[2,7],44:[2,6],60:[2,42],76:[2,40],101:[2,32],102:[2,33],103:[2,34],105:[2,31]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const t = require('@babel/types');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1: /* DO NOTHING */ 
break;
case 2: /* DO NOTHING */ 
break;
case 3: /* DO NOTHING */ 
break;
case 4:return "INCLUDE";
break;
case 5:return "JCE"
break;
case 6:return 6
break;
case 7:return "STRING_LITERAL"
break;
case 8:return "QUOTE";
break;
case 9: return "MODULE";
break;
case 10: return "STRUCT";
break;
case 11: return "ENUM";
break;
case 12: return "INTERFACE" 
break;
case 13: return "OPEN"; 
break;
case 14: return "CLOSE"; 
break;
case 15: return "LEFT"; 
break;
case 16: return "RIGHT"; 
break;
case 17: return "KEY_OPEN"; 
break;
case 18: return "KEY_CLOSE"; 
break;
case 19: return "LEFT_QUOTE"; 
break;
case 20: return "RIGHT_QUOTE"; 
break;
case 21:return "REQUIRED"
break;
case 22:return "OUT";
break;
case 23:return 39
break;
case 24:return "TYPE"
break;
case 25:return "TYPE"
break;
case 26:return "TYPE"
break;
case 27:return "TYPE"
break;
case 28:return "TYPE"
break;
case 29:return "TYPE"
break;
case 30:return "TYPE"
break;
case 31:return "TYPE"
break;
case 32:return "TYPE"
break;
case 33:return "TYPE"
break;
case 34:return "TYPE"
break;
case 35: return "VECTOR"; 
break;
case 36: return "MAP"; 
break;
case 37:return "CONST";
break;
case 38: return "IDENTIFIER";
break;
case 39:return "SEMI"
break;
case 40:return "COMMA"
break;
case 41:return "DOUBLE_COLON"
break;
case 42: return "EQUAL"; 
break;
case 43: return "UMINUS"; 
break;
case 44: return "NUMBER"; 
break;
case 45: return "HEX"; 
break;
case 46: return "EOF"; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/(.*))/,/^(?:[/][*][^*]*[*]+([^*/][^*]*[*]+)*[/])/,/^(?:key\[[^\]]*\];)/,/^(?:#include\b)/,/^(?:\.jce\b)/,/^(?:$)/,/^(?:"(\\.|[^"\\])*")/,/^(?:")/,/^(?:module\b)/,/^(?:struct\b)/,/^(?:enum\b)/,/^(?:interface\b)/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:(require|optional))/,/^(?:out\b)/,/^(?:string\b)/,/^(?:byte\b)/,/^(?:short\b)/,/^(?:bool\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:long\b)/,/^(?:double\b)/,/^(?:signed\s+int\b)/,/^(?:unsigned\s+int\b)/,/^(?:unsigned\s+short\b)/,/^(?:unsigned\\s\+byte\b)/,/^(?:vector\b)/,/^(?:map\b)/,/^(?:const\b)/,/^(?:[a-zA-Z_$][a-zA-Z_$0-9]*)/,/^(?:;)/,/^(?:,)/,/^(?:::)/,/^(?:=)/,/^(?:-)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:0[xX][0-9a-fA-F]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jce;
exports.Parser = jce.Parser;
exports.parse = function () { return jce.parse.apply(jce, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
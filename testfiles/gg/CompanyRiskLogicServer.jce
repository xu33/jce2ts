module DataCenter
{
    enum OrderType
    {
        DESC = 0, // 降序
        ASC = 1, // 正序
    };

    // 分页请求信息
    struct PageInfo
    {
        0 optional int iStartPage; // 起始
        1 optional int iPageSize = 10; // 一页多少条
        2 optional string field; // 排序字段
        3 optional OrderType orderType; // 排序类型， 默认正序排列
    };

    // 质押类型
    enum PledgeType
    {
        ALL = 1, // 全部
        CJYJX = 2, // 触及预警线
        CJPCX = 3, // 触及平仓线
        WDYJX = 4, // 未到预警线
    };

    //质押风险
    struct PledgeRiskItem
    {
        0 optional int iSecUniCode; // 证券统一编码,10位整数
        1 optional int iMktTypePar; // 证券市场
        2 optional string sSecCode; // 股票代码
        3 optional string sSecShortName; // 股票简称
        4 optional float fSPJ; // 收盘价
        5 optional float fYJX; // 预警线
        6 optional float fPCX; // 平仓线
        7 optional string sGDMC; // 股东名称
        8 optional float fZYGS; // 质押股数
        9 optional float fZYBL; // 质押比例
        10 optional string sZYKSRQ; // 质押开始日期
        11 optional string sZYJSRQ; // 质押结束日期
        12 optional string sZQR; // 质权人
        13 optional string sZYZT; // 质押状态
        14 optional string sSJRQ; // 数据日期
        15 optional float fNowPrice; // 当前价
        16 optional string sSSBK; // 上市板块
        17 optional string sHS300; // 沪深300
    };

    // 质押风险按日期展示
    struct PledgeRiskItemByDate
    {
        0 optional int iSecUniCode; // 证券统一编码,10位整数
        1 optional int iMktTypePar; // 证券市场
        2 optional string sSecCode; // 股票代码
        3 optional string sSecShortName; // 股票简称
        4 optional float fSPJ; // 收盘价
        5 optional float fYJX; // 预警线
        6 optional float fPCX; // 平仓线
        7 optional string sZYKSRQ; // 质押开始日期
        8 optional float fNowPrice; // 当前价
        9 optional float fZYBL; // 质押比例,当日累计
        10 optional float fZYGS; // 质押股数,当日累计
        11 optional string sGDMC; // 股东名称,不同的股东合并，逗号分隔
        12 optional string sZYZT; // 质押状态
        // 13 optional string sZYJSRQ; // 质押结束日期
    };

    // 累计质押数据项
    struct LJZYItem
    {
        0 optional int iSecUniCode; // 证券统一编码,10位整数
        1 optional int iMktTypePar; // 证券市场
        2 optional string sSecCode; // 股票代码
        3 optional string sSecShortName; // 股票简称
        4 optional int iPledgeCount; // 历史质押次数
        5 optional float fLJZYGS; // 累计质押股数
        6 optional float fPledgeRatio; // 质押率, 累计质押比例
        7 optional float fNowPrice; // 当前价
        8 optional float fMinYJX; // 最小预警线
        9 optional float fMaxYJX; // 最大预警线
        10 optional float fMinPCX; // 最小平仓线
        11 optional float fMaxPCX; // 最大平仓线
        12 optional float fYJXRatio; // 触及预警线比例
        13 optional float fPCXRatio; // 触及平仓线比例
    };

    struct PledgeRiskListReq
    {
        0 optional string sBusId;       //接入业务名
        1 optional PageInfo pageInfo;
        2 optional PledgeType pledgeType = 1; // 质押类型
    };

    struct PledgeRiskListByDateReq
    {
        0 optional string sBusId;       //接入业务名
        1 optional PageInfo pageInfo;
        2 optional PledgeType pledgeType = 1; // 质押类型
    };

    struct PledgeRiskListRsp
    {
        0 optional int iRet;            //返回状态
        1 optional string sMsg;         //提示信息
        2 optional int iTotal; // 总数
        3 optional vector<PledgeRiskItem> vPledgeRiskList;
    };

    struct PledgeRiskListByDateRsp
    {
        0 optional int iRet;            //返回状态
        1 optional string sMsg;         //提示信息
        2 optional int iTotal; // 总数
        3 optional vector<PledgeRiskItemByDate> vPledgeRiskList;
    };

    struct StkPledgeRiskReq
    {
        0 optional string sBusId;
        1 optional int iSecUniCode; // 股票唯一编码，优先股票唯一编码，如果没有就取股票代码+市场代码
        2 optional string sSecCode; // 股票代码
        3 optional int iMktTypePar; // 市场代码
    };

    struct StkPledgeRiskInfo
    {
        0 optional int iPcxCount; // 当前触及平仓线质押次数
        1 optional int iYjxCount; // 当前触及预警线质押次数
        2 optional int iWjcCount; // 未解除质押次数
        3 optional int iAllCount; // 历史股权质押次数
        4 optional float fPledgeRatio; // 累计质押比例
        5 optional float fYJXRatio; // 触及预警线比例
        6 optional float fPCXRatio; // 触及平仓线比例
    };

    struct StkPledgeRiskRsp
    {
        0 optional int iRet;
        1 optional string sMsg;
        2 optional StkPledgeRiskInfo stkPledgeRiskInfo; // 个股相关质押统计数据
        3 optional vector<PledgeRiskItem> vPledgeRiskList;
    };

    struct BondRiskItem
    {
        0 optional int iSecUniCode;
        1 optional int iMktTypePar;
        2 optional string sSecCode;
        3 optional string sSecShortName;
        4 optional string sIssDate; // 发行日期
        5 optional string sBondShortName;
        6 optional string sBondLevel; // 债券评级
        7 optional double fIssSize; // 发行规模
        8 optional double fBondMatu; // 债券期限
        9 optional string sEndDate; // 兑付日期
        10 optional int iIsDefault; // 是否违约
        11 optional string sDeclDate; // 违约公告日期
        12 optional string sBondType; // 发债类型
    };


    enum BondType
    {
        All = 0, // 获取全部数据
        DEFAULT = 1, // 获取违约数据
        NO_DEFAULT = 2, // 获取未违约数据
    };

    struct BondRiskListReq
    {
        0 optional string sBusId;
        1 optional PageInfo pageInfo;
        2 optional BondType bondType = 0; // 债券类型
    };

    struct BondRiskListRsp
    {
        0 optional int iRet = 0;
        1 optional string sMsg;
        2 optional int iTotal; // 总数
        3 optional vector<BondRiskItem> vBondRiskList;
    };

    struct StkBondRiskReq
    {
        0 optional string sBusId;
        1 optional int iSecUniCode; // 股票唯一编码，优先股票唯一编码，如果没有就取股票代码+市场代码
        2 optional string sSecCode; // 股票代码
        3 optional int iMktTypePar; // 市场代码
    };

    struct StkBondRiskInfo
    {
        0 optional int iIssueCount; // 发行次数
        1 optional float fBreachRate; // 违约率，最大100， 违约次数/发行次数, eq: 20
        2 optional int iCashCount; // 如期兑付
        3 optional int iBreachCount; // 违约次数
        4 optional string sLastDeclDate; // 最近一次违约日期
        5 optional float fZDF; //  已违约5日累计涨跌幅
    };

    struct StkBondRiskRsp
    {
        0 optional int iRet = 0;
        1 optional string sMsg;
        2 optional StkBondRiskInfo stkBondRiskInfo; // 个股相关质押统计数据
        3 optional vector<BondRiskItem> vBondRiskList;
    };

    struct LJZYListReq
    {
        0 optional string sBusId;
        1 optional PageInfo pageInfo;
    };

    struct LJZYListRsp
    {
        0 optional int iRet = 0;
        1 optional string sMsg;
        2 optional int iTotal; // 总数
        3 optional vector<LJZYItem> vLJZYList;
    };

    interface CompanyRiskLogicServer
    {
        // TODO 定义相关接口
        // 质押风险列表
        int getPledgeRiskList(PledgeRiskListReq req, out PledgeRiskListRsp rsp);

        // 质押风险列表按日
        int getPledgeRiskByDateList(PledgeRiskListByDateReq req, out PledgeRiskListByDateRsp rsp);

        // 质押详情ByCode
        int getStkPledgeRisk(StkPledgeRiskReq req, out StkPledgeRiskRsp rsp);

        // 发债风险列表
        int getBondRiskList(BondRiskListReq req, out BondRiskListRsp rsp);

        // 获取个股发债风险详情
        int getStkBondRisk(StkBondRiskReq req, out StkBondRiskRsp rsp);

        // 获取累计质押列表
        int getLJZYList(LJZYListReq req, out LJZYListRsp rsp);
    };
};

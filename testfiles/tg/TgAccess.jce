#include "TgComm.jce"

module NTG
{
///////////////////////////////////// 信息流相关的结构 /////////////////////////////////
    struct FeedsInfo
    {
        0  optional  string             index;               // 索引
        1  optional  string             author;              // 投顾老师的用户名
        2  optional  int                type;                // 产品类型，1：笔记；2：直播；3：问答；4：组合；5：牛圈；6：投顾；7：锦囊；8：活动产品包；9：长锦囊；11：微博 12:视频
        3  optional  string             id;                  // 产品id
        4  optional  int                subType;             // 子类型，不同的产品子类型不同
        5  optional  string             subId;               // 子类型的id，例如：锦囊文章
        6  optional  string             title;               // 标题
        7  optional  string             summary;             // 简介
        8  optional  vector<string>     img;                 // 图片
        9  optional  string             extra;               // 扩展字段，一般为json格式stringify
        10  optional  int               status;               // 动态状态,0：正常，-1：删除/下架
        11  optional  long              updateTime;          // 时间
        12  optional  long              recommendTime;          // 置顶时间
        13 optional   double            cost=0;             // 价格，默认免费
        14 optional   string            marketing;           // 营销语
        15 optional   string            tagType;             // tag类型,1:短线操作, 2:价值投资, 3:内容精研, 4:稳健波段,
        16 optional   string            criterionProductId;  //标准产品id
        17 optional   string            exKey;               //标准产品exKey
        18 optional   int               buyStatus=0;      // 是否有权限，1：是；0：否
        19 optional   int               costType=1;              // 价格类型，默认免费，1：免费，2：付费：3：小额付费
        20 optional   vector<Stock>     relateStock;             // 关联股票
        21 optional   string            content;               // 内容
        22 optional   string            serviceType;           // 服务类型,1:只做短线,2:游资天机,3:稳赢为王,4:涨兄点股
        23 optional   string            detailUrl;             // 详情的url
        24 optional   string            rightType;           // 权限类型，1会员可看
    };

    struct InjectInfoReq
    {
        0 optional    BasicInfo          basicInfo;         // 基本信息
        1  optional   FeedsInfo          info;                // 注入的信息
    };

    struct InjectInfoRsp
    {
        0 optional  RET_CODE          ret;                // 返回值
        1 optional  string              message;            // 返回消息
    };

    struct QueryInfoCond
    {
        0 optional   int                type=1;             // 请求类型，1：所有投顾；2：指定的投顾；3:指定标签 4指定的服务
        1 optional   vector<string>     tgUserNames;        // 只有当type=2时才有意义
        2 optional   vector<int>        contentTypes;       //当type=1时为产品类型 当type=3是为tagType类型 当type=4是为服务类型
        3 optional   string             tagName;            // 标签名字,无意义
        4 optional   string             rightType;            // 权限类型，1会员可看
    };

    struct QueryInfoReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          direction;       // 方向，0：从新到旧，1：从旧到新
        2 optional    string                       referId;         // 参考id
        3 optional    int                          offset;          // 偏移
        4 optional    int                          size;            // 大小
        5 optional    string                       userName;        // 用户名
        6 optional    QueryInfoCond                condition;       // 请求条件
    };

    struct QueryInfoResult
    {
        0 optional  int                            total;              // 总数
        1 optional  int                            status;             // 是否有更多数据标识，0：还有更多数据；1：没有更多数据
        2 optional  vector<FeedsInfo>              list;               // 列表
    };

    struct QueryInfoRsp
    {
        0 optional  RET_CODE                     ret;                // 返回值
        1 optional  string                         message;            // 返回消息
        2 optional  QueryInfoResult                data;               // 信息流数据
    };

    struct QueryVipInfoCond
    {
        0 optional   int                type=1;             // 请求类型，1：所有投顾；2：指定的投顾；
        1 optional   vector<string>     tgUserNames;        // 只有当type=2时才有意义
    };

    struct QueryVipInfoReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          direction;       // 方向，0：从新到旧，1：从旧到新
        2 optional    string                       referId;         // 参考id
        3 optional    int                          offset;          // 偏移
        4 optional    int                          size;            // 大小
        5 optional    string                       userName;        // 用户名
        6 optional    QueryVipInfoCond                condition;       // 请求条件
    };

    struct QueryVipInfoResult
    {
        0 optional  int                            total;              // 总数
        1 optional  int                            status;             // 是否有更多数据标识，0：还有更多数据；1：没有更多数据
        2 optional  vector<FeedsInfo>              list;               // 列表
    };

    struct QueryVipInfoRsp
    {
        0 optional  RET_CODE                     ret;                // 返回值
        1 optional  string                         message;            // 返回消息
        2 optional  QueryVipInfoResult                data;               // 信息流数据
    };

    struct UpdateFeedStatusReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       index;               // 动态索引
        2 optional    int                          status=0;            // 动态状态，0：正常状态；-1：删除/下架；
        3  optional   string                       author;              // 投顾老师的用户名
        4 optional    int                          type;                // 产品类型，1：笔记；2：直播；3：问答；4：组合；5：牛圈；6：投顾；7：锦囊；8：活动产品包；9：长锦囊；10：视频；11：微博
        5 optional    string                       id;                  // 产品id
    };

    struct UpdateFeedStatusRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
    };

    struct SetRecommendFeedReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          index;               //  动态索引
        2 optional    int                          status=0;          // 状态，1：推荐，2：取消推荐
        3 optional    string                       recommendKey;      // 推荐key,首页精选'home',首页置顶'homeTop',高手主页信息流置顶'top',首页信息流2-3条feature,首页顶部'banner'
        4  optional   string                       author;              // 投顾老师的用户名
        5 optional    int                          type;                // 产品类型，1：专栏文章；
        6 optional    string                       id;                  // 产品id
    };

    struct SetRecommendFeedRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
    };

    struct GetRecommendFeedReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       userName;            // 用户名
        2 optional    string                       recommendKey;        // 推荐key,首页精选'home',首页置顶'homeTop',高手主页信息流置顶'top',首页信息流2-3条feature,首页顶部'banner'
        3 optional    string                       author;              // 投顾老师的用户名,用于高手主页信息流置顶
        4 optional    int                          direction;           // 方向，0：从新到旧，1：从旧到新
        5 optional    string                       referId;             // 参考id
        6 optional    int                          offset;              // 偏移
        7 optional    int                          size;                // 大小
    };

    struct GetRecommendFeedRsp
    {
        0 optional  RET_CODE                        ret;           // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  QueryInfoResult                 data;        // 列表
    };

    struct SearchFeedsReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          direction;           // 方向，0：从新到旧，1：从旧到新
        2 optional    string                       referId;             // 参考id
        3 optional    int                          offset;              // 偏移
        4 optional    int                          size;                // 大小
        5 optional    string                       recommendKey;        // 推荐key,首页精选'home',首页置顶'homeTop',高手主页信息流置顶'top',首页信息流2-3条feature,首页顶部'banner'
        6 optional    string                       keyWord;             // 查询条件
    };

    struct FeedDetail
    {
        0 optional TgInfo                           tgInfo;                 // 投顾信息
        1 optional FeedsInfo                        feed;                  // 动态信息流内容
        2 optional int                              readCount;             // 阅读
        3 optional int                              favCount;              // 点赞
        4 optional int                              rewardCount;           // 打赏
        5 optional int                              shareCount;            // 分享
    };

    struct FeedListRsp
    {
        0 optional  int                              total;       // 总数
        1 optional  int                              status;       // 是否有更多的动态信息流标识，0：还有动态信息流；1：没有更多动态信息流
        2 optional  vector<FeedDetail>               list;        // 列表
    };

    struct SearchFeedsRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  FeedListRsp                     data;          // 数据
    };

    struct BroadcastReq
    {
        0 optional    int                          type=0;            // 0：单播；1：广播
        1 optional    string                       cmd;               // 关键字
        2 optional    string                       data;              // 数据
    };

    struct BroadcastRsp
    {
        0 optional  RET_CODE                      ret;          // 返回码
        1 optional  string                          message;       // 错误信息
    };

    struct GetFeedsByAuthorReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       author;            // 投顾用户名
        2 optional    int                          type;              // 产品类型，1：笔记；2：直播；3：问答；4：组合；5：牛圈；6：投顾；7：锦囊；8：活动产品包；9：长锦囊；10：视频；11：微博
        3 optional    string                       id;                // 产品id
        4 optional    int                          subType;           // 子类型，不同的产品子类型不同
        5 optional    string                       subId;             // 子类型的id，例如：锦囊文章
        6 optional    int                          costType;          // 价格类型 1：免费，2：付费：3：小额付费
    };

    struct GetFeedsByAuthorRsp
    {
        0 optional  RET_CODE                       ret;           // 返回码
        1 optional  string                         message;       // 错误信息
        2 optional  QueryInfoResult                data;          // 数据
    };

    struct SetFeedTagsReq
    {
        0 optional      BasicInfo                               basicInfo;              // 基本信息
        1 optional      vector<QueryInfoCond>                   queryInfoCondList;      // 标签列表
        2 optional      int                                     type;                   // tab类型 1为热门页面-观点
    };

    struct SetFeedTagsRsp
    {
        0 optional      RET_CODE                               ret;           // 返回码
        1 optional      string                                 message;       // 错误信息
    };

    struct GetFeedTagsReq
    {
        0 optional      BasicInfo                               basicInfo;              // 基本信息
        1 optional      int                                     type;                   // tab类型 1为热门页面-观点
        2 optional      string                                  upName;                 // 用户名
    };

    struct GetFeedTagsRsp
    {
        0 optional      RET_CODE                                ret;                    // 返回码
        1 optional      string                                  message;                // 错误信息
        2 optional      vector<QueryInfoCond>                   queryInfoCondList;      // 标签列表

    };

    struct GetFeedsByHotAuthorReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          type;              // 预留字段，
    };

    struct HotRecommend
    {
        0 optional      string                      backgroundUrl;           //背景图片
        1 optional      string                      productId;               //产品id
        2 optional      string                      productType;             //产品类型
        3 optional      string                      title;                   //标题
        4 optional      string                      intro;                   //简介
        5 optional      string                      icon;                    //小图标
        6 optional      string                      buttonName;              //按钮名称
        7 optional      string                      backgroundColor;         //背景颜色
        8 optional      string                      url;                     //跳转链接
        9 optional      string                      extro;                   //附加信息
        10 optional     string                      description;             //描述
        11 optional     string                      t;                       //推荐时间
    };

    struct FeedsByHotAuthor
    {
        0 optional    FeedsInfo                    feedsInfo;         // 信息流信息
        1 optional    HotRecommend                 hotRecommend;      // 推荐信息
    };

    struct GetFeedsByHotAuthorRsp
    {
        0 optional  RET_CODE                       ret;           // 返回码
        1 optional  string                         message;       // 错误信息
        2 optional  vector<FeedsByHotAuthor>       data;               // 列表
    };

///////////////////////////////////// 问股/评论相关的结构 /////////////////////////////////

    struct PublishCommentReq
    {
       0 optional BasicInfo                        basicInfo;     // 基本信息
       1 optional string                           userName;      // 用户名
       2 optional string                           business;      // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
       3 optional int                              bId;           // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
       4 optional string                           replyId;       // 发表评论的用户
       5 optional string                           replyUser;       // 被回复评论的用户
       6 optional int                              type;          // 类型，1：文本；2：语音；3：视频
       7 optional string                           body;          // 消息体
       8 optional int                              status=0;      // 状态，0：正常状态；1：删除；2：撤销；3：上线
       9 optional int                              unlimited=0;       // 是否限制发送数量,默认0：限制；1：无限制
    };

    struct CrmUser
    {
        0 optional string                           userName;            // 用户名
        1 optional string                           userId;           // 用户id
        2 optional string                           avatar;          // 用户头像
        3 optional string                           nickName;           // 用户昵称,为空取用户名，并隐藏手机号
        4 optional string                           realNickName;           // 用户昵称,为空取用户名
        5 optional int                              type;               // 用户类型 1：投顾，2：普通用户
		6 optional int                              isMember;          // 用户会员标示 1:是会员 0非会员
    };

    struct Comment
    {
        0 optional string                           id;            // 评论id
        1 optional string                           uId;           // 用户名
        2 optional string                           bus;           // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        3 optional int                              bId;           // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
        4 optional string                           rId;           //  回复id
        5 optional string                           rUId;           // 回复的用户名
        6 optional int                              type;          // 类型，1：文本；2：语音；3：视频
        7 optional string                           body;          // 消息体
        8 optional int                              cost=0;        // 价格，单位分
        9 optional string                           t;             // 回复时间
        10 optional int                             status=0;      // 状态，0：正常状态；1：删除；2：撤销；3：上线
        11 optional int                             fav=0;      // 点赞数
        12 optional CrmUser                         uInfo;      // 用户信息
        13 optional int                             isRecommend=0;      // 是否推荐到信息流，1：是；0：否
    };

    struct CommentDetail
    {
        0 optional string                           id;            // 评论id
        1 optional string                           uId;           // 用户名
        2 optional string                           bus;           // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        3 optional int                              bId;           // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
        4 optional string                           rId;           //  回复id
        5 optional string                           rUId;          // 回复的用户名
        6 optional int                              type;          // 类型，1：文本；2：语音；3：视频
        7 optional string                           body;          // 消息体
        8 optional int                              cost=0;        // 价格，单位分
        9 optional string                           t;             // 回复时间
        10 optional int                             status=0;      // 状态，0：正常状态；1：删除；2：撤销；3：上线
        11 optional int                             fav=0;      // 点赞数
        12 optional CrmUser                         uInfo;      // 用户信息
        13 optional  Comment                         rInfo;            // 回复的评论内容
        14 optional int                             favStatus=0;      // 是否点赞，1：是；0：否
        15 optional TgDetail                         tgDetail;                 // 投顾详情
        16 optional int                             isRecommend=0;      // 是否推荐到信息流，1：是；0：否
        17 optional int                             buyStatus=0;      // 是否有权限，1：是；0：否
        18 optional string                           originBody;          // 原始消息体(富文本)
    };

    struct PublishCommentData{
        0 optional string                          id;            // 评论id
        1 optional CommentDetail                          commentDetail;            // 评论
    };

    struct PublishCommentRsp{
         0 optional	RET_CODE		                ret;		  // 返回码
         1 optional	string			                message;	  // 错误信息，如果成功为success
         2 optional PublishCommentData              data;         // 评论id
    };

    struct UpdateCommentStatusReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                         business;      // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        2 optional    int                            bId;           // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
        3 optional    string                            id;           // 评论id
        4 optional    int                            status=0;            // 评论状态，0：正常；1：删除；2：撤销；3：上线
    };

    struct UpdateCommentStatusRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
    };

    struct GagUserReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          type;              // 类型，1：全局禁言用户；2：具体产品禁言用户
        2 optional    string                       business;          // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        3 optional    int                          bId;               // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
        4 optional    string                       userName;          // 用户名
        5 optional    int                          status=0;          // 操作状态，1：禁言，2：取消禁言
    };

    struct GagUserRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
    };

    struct SetRecommendCommentReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       business;          // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        2 optional    string                       recommendKey;          // 推荐key,热门问股为'hot',其他信息流的评论推荐为内容id(观点id，视频解盘id，专栏文章id)
        3 optional    int                          id;               //  评论id
        4 optional    string                       reason;          // 推荐理由
        5 optional    int                          status=0;          // 状态，1：推荐，2：取消推荐
    };

    struct SetRecommendCommentRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
    };

    struct GetRecommendCommentReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       business;          // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        2 optional    string                       recommendKey;          // 推荐key,热门问股为'hot',其他信息流的评论推荐为内容id(观点id，视频解盘id，专栏文章id)
    };

    struct CommentListRsp
    {
        0 optional  int                          total;       // 总数
        1 optional  int                          status;       // 是否有更多的评论标识，0：还有评论；1：没有更多评论
        2 optional  vector<CommentDetail>              list;        // 列表
    };

    struct GetRecommendCommentRsp
    {
        0 optional  RET_CODE                        ret;           // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  CommentListRsp                    data;          // 数据
    };

    struct GetCommentsFilterGagReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          type;           // 过滤类型，0：过滤所有的禁言用户（全局禁言+局部禁言）；1：只过滤全局禁言；2：只过滤局部禁言；3：不过滤任何用户
        2 optional    string                       business;            // 业务
        3 optional    int                          bId;         // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
        4 optional    int                          direction;          // 方向，0：从新到旧，1：从旧到新
        5 optional    int                          referId;         // 参考id
        6 optional    int                          offset;         // 偏移
        7 optional    int                          size;           // 大小
    };

    struct GetCommentsFilterGagRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  CommentListRsp                  data;          // 数据
    };

    struct GetCommentsReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       userName;            // 用户名
        2 optional    string                       business;            // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        3 optional    int                          bId;         // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
        4 optional    int                          direction;          // 方向，0：从新到旧，1：从旧到新
        5 optional    int                          referId;         // 参考id
        6 optional    int                          offset;         // 偏移
        7 optional    int                          size;           // 大小
    };

    struct GetCommentsRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  CommentListRsp                  data;          // 数据
    };

    struct GetMyCommentsReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       userName;            // 用户名
        2 optional    string                       business;            // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        3 optional    int                          bId;             // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
        4 optional    int                          direction;          // 方向，0：从新到旧，1：从旧到新
        5 optional    int                          referId;         // 参考id
        6 optional    int                          offset;          // 偏移
        7 optional    int                          size;            // 大小
        8 optional    int                          onlyReplied=0;            // 仅查询已回复,1：是
    };

    struct GetMyCommentsRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  CommentListRsp                  data;          // 数据
    };

    struct GetCommentsByIdReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       userName;            // 用户名
        2 optional    string                       business;            // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        3 optional    vector<int>                  ids;                 // 评论ids
        4 optional    int                          type=0;              //   0：查看详情；1：列表
    };

    struct GetCommentsByIdRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  vector<CommentDetail>           data;          // 列表
    };

    struct GetMultilevelCommentsReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          type;           // 查询类型，0：上线评论；1：全部评论
        2 optional    string                       userName;            // 用户名
        3 optional    string                       business;            // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        4 optional    int                          bId;         // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
        5 optional    int                          direction;          // 方向，0：从新到旧，1：从旧到新
        6 optional    int                          referId;         // 参考id
        7 optional    int                          offset;         // 偏移
        8 optional    int                          size;           // 大小
    };


    struct MultilevelComment
    {
        0 optional string                           id;            // 评论id
        1 optional string                           uId;           // 用户名
        2 optional string                           bus;           // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        3 optional int                              bId;           // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
        4 optional string                           rId;           //  回复id
        5 optional string                           rUId;          // 回复的用户名
        6 optional int                              type;          // 类型，1：文本；2：语音；3：视频
        7 optional string                           body;          // 消息体
        8 optional int                              cost=0;        // 价格，单位分
        9 optional string                           t;             // 回复时间
        10 optional int                             status=0;      // 状态，0：正常状态；1：删除；2：撤销；3：上线
        11 optional int                             fav=0;      // 点赞数
        12 optional CrmUser                         uInfo;      // 用户信息
        13 optional CrmUser                         rUInfo;      // 用户信息
    };

    struct ReplyCommentList
    {
        0 optional  int                          total;       // 总数
        1 optional  int                          status;       // 是否有更多的评论标识，0：还有评论；1：没有更多评论
        2 optional  vector<MultilevelComment>              list;        // 列表
    };

    struct MultilevelCommentDetail
    {
        0 optional string                           id;            // 评论id
        1 optional string                           uId;           // 用户名
        2 optional string                           bus;           // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        3 optional int                              bId;           // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
        4 optional string                           rId;           //  回复id
        5 optional string                           rUId;          // 回复的用户名
        6 optional int                              type;          // 类型，1：文本；2：语音；3：视频
        7 optional string                           body;          // 消息体
        8 optional int                              cost=0;        // 价格，单位分
        9 optional string                           t;             // 回复时间
        10 optional int                             status=0;      // 状态，0：正常状态；1：删除；2：撤销；3：上线
        11 optional int                             fav=0;      // 点赞数
        12 optional CrmUser                         uInfo;      // 用户信息
        13 optional CrmUser                         rUInfo;      // 用户信息
        14 optional  MultilevelComment              rInfo;            // 回复的评论内容
        15 optional  ReplyCommentList               bReply;            // 回复的评论列表
    };

    struct MultilevelCommentsRsp
    {
        0 optional  int                          total;       // 总数
        1 optional  int                          status;       // 是否有更多的评论标识，0：还有评论；1：没有更多评论
        2 optional  vector<MultilevelCommentDetail>              list;        // 列表
    };

    struct GetMultilevelCommentsRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  MultilevelCommentsRsp                  data;          // 数据
    };

    struct GetReplyCommentsReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          type;           // 查询类型，0：上线评论；1：全部评论
        2 optional    string                       userName;            // 用户名
        3 optional    string                       business;            // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        4 optional    int                          bId;         // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
        5 optional    int                          replyCommentId;         // 别回复评论id
        6 optional    int                          direction;          // 方向，0：从新到旧，1：从旧到新
        7 optional    int                          referId;         // 参考id
        8 optional    int                          offset;         // 偏移
        9 optional    int                          size;           // 大小
    };

    struct GetReplyCommentsRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  ReplyCommentList                  data;          // 数据
    };

    struct RecommendCommentBatch
    {
        0 optional    string                                    business;          // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        1 optional    string                                    recommendKey;      // 推荐key,热门问股为'hot',其他信息流的评论推荐为内容id(观点id，视频解盘id，专栏文章id)
        2 optional    vector<CommentDetail>                     data;              // 列表
    };

    struct GetRecommendCommentBatchReq
    {
        0 optional    BasicInfo                       basicInfo;         // 基本信息
        1 optional    vector<RecommendCommentBatch>   keys;           // 列表
    };

    struct GetRecommendCommentBatchRsp
    {
        0 optional  RET_CODE                        ret;           // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  vector<RecommendCommentBatch>   data;        // 列表
    };

    struct UpdateCommentFavReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          type;           // 更新类型，0：点赞；1：取消点赞
        2 optional    string                       userName;            // 用户名
        3 optional    string                       business;            // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        4 optional    int                          bId;         // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
        5 optional    int                          commentId;         // 评论id
    };

    struct UpdateCommentFavRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  int                             data;          // 数据
    };

    struct GetCommentBusinessReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                          tgId;              // 投顾id
        2 optional    string                       business;          // 业务
    };

    struct CommentBusiness
    {
        0 optional    string                          tgId;              // 投顾id
        1 optional    string                       business;          // 业务
        2 optional    int                          bId;              // 业务id
        3 optional    string                       bName;            // 业务名称
    };

    struct GetCommentBusinessRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  CommentBusiness                 data;          // 数据
    };

    struct SearchCommentsReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       recommendKey;            // 推荐key,热门问股为'hot',其他信息流的评论推荐为内容id(观点id，视频解盘id，专栏文章id)
        2 optional    string                       userName;            // 用户名，查询条件
        3 optional    string                       business;            // 业务，例如专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        4 optional    int                          bId;         // 业务对应的id，如专栏文章id，问股业务id，观点id，视频解盘id
        5 optional    int                          direction;          // 方向，0：从新到旧，1：从旧到新
        6 optional    int                          referId;         // 参考id
        7 optional    int                          offset;         // 偏移
        8 optional    int                          size;           // 大小
    };

    struct RecommendComment
    {
        0 optional  Comment                         rInfo;            // 回复的评论内容
        1 optional  string			                recommendTime;           // 推荐时间
        2 optional  string			                recommendReason;         // 推荐理由
        3 optional  string			                bName;         // 业务名称
    };

    struct RecommendCommentRsp
    {
        0 optional  int                          total;       // 总数
        1 optional  int                          status;       // 是否有更多的评论标识，0：还有评论；1：没有更多评论
        2 optional  vector<RecommendComment>              list;        // 列表
    };

    struct SearchCommentsRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  RecommendCommentRsp                  data;          // 数据
    };

    struct QueryCommentStatisticsReq
    {
        0 optional  BasicInfo       basicInfo;    // 基本信息
        1 optional  string          startTime;         // 统计开始日期
        2 optional  string          endTime;         // 统计结束日期
    };

    struct CommentStatistics
    {
        0 optional	string			                  userName;	                // 投顾名称
        1 optional	int			                      userCount;	                // 问股人数
        2 optional	int			                      commentCount;	       // 问股次数
        3 optional	double			                  buyPayment;	            // 购买收入
        4 optional	double			                  rewardPayment;	       // 打赏收入
    };

    struct QueryCommentStatisticsRsp
    {
        0 optional	RET_CODE			        iRet;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	vector<CommentStatistics>	    data;	           // 评论统计信息列表
    };

    struct UpdateRecommendInFeedReq
    {
        0 optional BasicInfo                        basicInfo;    // 基本信息
        1 optional string                           uId;           // 用户名
        3 optional int                              bId;           // 业务对应的id，如专栏文章id，问股业务id，观点id，视
        4 optional string                           id;            // 评论id
        5 optional string                           body;          // 消息体,
        6 optional int                              type=0;          // ，1：推荐，2：取消推荐
    };

    struct UpdateRecommendInFeedRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
    };

///////////////////////////////////// 观点相关的结构 /////////////////////////////////
    struct Tweet
    {
        0 optional string                           id;               // 微博动态id
        1 optional string                           userId;           // 投顾名
        2 optional string                           content;          // 内容
        3 optional vector<string>                   img;              //  图片
        4 optional string                           extra;             // 透传的扩展字段
        5 optional int                              status=0;         // 状态，0：正常状态；-1：删除；1：草稿；2；待审核;3：审核不通过；4；下架
        6 optional int                              isPush=0;         // 推送状态，0：未推送；1：已推送
        7 optional string                           createTime;
        8 optional string                           updateTime;
        9 optional string                           marketing;          // 营销语
        10 optional double                          cost=0;             // 价格，默认免费
        11 optional string                          cronTime;        // 定时发送时间
        12 optional string                          tagType;         // tag类型,1:短线操作, 2:价值投资, 3:内容精研, 4:稳健波段,5:特供布局, 6:利好公告, 21:盘前早报, 22:开盘速递, 23:主力点金, 24:热门事件, 25:A股收评, 26:今日复盘, 27:研报淘金, 28:热点聚焦, 29:免费利好公告
        13 optional string                          criterionProductId;        //标准产品id
        14 optional string                          exKey;                     //标准产品exKey
        15 optional int                             type=1;                  // 价格类型，默认免费，1：免费，2：付费：3：小额付费
        16 optional vector<Stock>                   relateStock;             // 关联股票
    };

    struct PublishTweetReq
    {
       0 optional BasicInfo                        basicInfo;     // 基本信息
       1 optional Tweet                            tweet;      // 微博动态
    };

    struct PublishTweetRsp{
         0 optional	RET_CODE		                ret;		  // 返回码
         1 optional	string			                message;	  // 错误信息，如果成功为success
         2 optional Tweet                           data;         // 微博动态id
    };

    struct OperateTweetReq
    {
       0 optional BasicInfo                        basicInfo;     // 基本信息
       1 optional Tweet                            tweet;      // 微博动态
       2 optional vector<string>                   editProps;	        // 修改字段列表
    };

    struct OperateTweetRsp{
         0 optional	RET_CODE		                ret;		  // 返回码
         1 optional	string			                message;	  // 错误信息，如果成功为success
         2 optional Tweet                           data;         // 微博动态id
    };


    struct PushTweetReq
    {
       0 optional BasicInfo                        basicInfo;     // 基本信息
       1 optional string                              id;         // 微博动态id
    };

    struct PushTweetRsp{
       0 optional	RET_CODE		                ret;		  // 返回码
       1 optional	string			                message;	  // 错误信息，如果成功为success
    };

    struct TweetDetail
    {
        0 optional TgInfo                           tgInfo;                 // 微博动态内容
        1 optional Tweet                            tweet;                 // 微博动态内容
        2 optional int                              readCount;             // 阅读
        3 optional int                              favCount;              // 点赞
        4 optional int                              rewardCount;           // 打赏
        5 optional int                              shareCount;            // 分享
        6 optional int                              commentCount;            // 评论
        7 optional int                              favStatus=0;      // 是否点赞，1：是；0：否
        8 optional TgDetail                         tgDetail;               // 投顾详情
        9 optional int                              buyStatus=0;      // 是否有权限，1：是；0：否
        10 optional int                             collectStatus=0;      // 1为已收藏 0为未收藏
    };

    struct TweetListRsp
    {
        0 optional  int                              total;       // 总数
        1 optional  int                              status;       // 是否有更多的微博动态标识，0：还有微博动态；1：没有更多微博动态
        2 optional  vector<TweetDetail>              list;        // 列表
    };

    struct GetTgTweetsReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          direction;          // 方向，0：从新到旧，1：从旧到新
        2 optional    string                       referId;         // 参考id
        3 optional    int                          offset;         // 偏移
        4 optional    int                          size;           // 大小
        5 optional    string                       userId;            // 投顾名
        6 optional    int                          type=0;         // 0：已上架;1:草稿；2:已发布
    };

    struct GetTgTweetsRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  TweetListRsp                    data;          // 数据
    };

    struct GetTweetsByIdReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    vector<string>               ids;            // 动态ids
        2 optional    int                          type=0;         // 0：查看详情；1：列表
    };

    struct GetTweetsByIdRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  vector<TweetDetail>              data;        // 列表
    };

    struct UpdateTweetStatusReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       id;           // 微博动态id
        2 optional    int                          status=0;            // 微博动态状态，0：正常状态；-1：删除；1：草稿；2；待审核;3：审核不通过；4；下架
    };

    struct UpdateTweetStatusRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
    };

    struct UpdateTweetExtraReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       id;           // 微博动态id
        2 optional    int                          operateType;           // 更新类型
        3 optional    string                       name;            // 更新字段
        4 optional    int                          count;         // 更新值
    };

    struct UpdateTweetExtraRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  int                             data;          // 数据
    };

    struct SearchTweetsReq
    {
        0 optional    BasicInfo                    basicInfo;           // 基本信息
        1 optional    int                          direction;           // 方向，0：从新到旧，1：从旧到新
        2 optional    string                       referId;             // 参考id
        3 optional    int                          offset;              // 偏移
        4 optional    int                          size;                // 大小
        5 optional    string                       recommendKey;            // 推荐key
        6 optional    string                       keyWord;            // 查询条件
        7 optional    int                          searchType=0;                //查找类型，0：所有；1：上架
    };

    struct SearchTweetsRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  TweetListRsp                    data;          // 数据
    };

    struct QueryTweetStatisticReq
    {
        0 optional    BasicInfo                    basicInfo;           // 基本信息
        1 optional    int                          direction;           // 方向，0：从新到旧，1：从旧到新
        2 optional    string                       referId;             // 参考id
        3 optional    int                          offset;              // 偏移
        4 optional    int                          size;                // 大小
        5 optional    string                       keyWord;            // 查询条件
        6 optional    string                       startTime;           // 开始时间
        7 optional    string                       endTime;             // 结束时间
        8 optional    string                       sortBy;              // 排序方向 asc desc
        9 optional    string                       sortKey;             // 排序字段
    };

    struct TweetStatistic
    {
        0 optional  TgDetail                         tgDetail;                 // 投顾详情
        1 optional  int                              total;                     // 总数
        2 optional  int                              readCount;             // 阅读数
        3 optional  int                              favCount;              // 点赞数
        4 optional  int                              rewardCount;           // 打赏
        5 optional  int                              shareCount;            // 分享
        6 optional  int                              commentCount;            // 评论数
        7 optional  int                              avgReadCount;            // 平均阅读数
    };

    struct TweetStatisticRsp
    {
        0 optional  int                              total;       // 总数
        1 optional  int                              status;       // 是否有更多的微博动态标识，0：还有微博动态；1：没有更多微博动态
        2 optional  vector<TweetStatistic>              list;        // 列表
    };

    struct QueryTweetStatisticRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  TweetStatisticRsp                    data;          // 数据
    };

///////////////////////////////////// 视频直播相关的结构 /////////////////////////////////

    struct VideoLive
    {
        0 optional string                           id;               // 视频解盘id
        1 optional string                           userId;           // 投顾名
        2 optional string                           title;            // 标题
        3 optional string                           url;              // 链接
        4 optional vector<string>                   img;              //  图片
        5 optional string                           extra;             // 透传的扩展字段
        6 optional int                              status=0;         // 状态，0：正常状态；-1：删除；1：草稿；2；待审核;3：审核不通过；4；下架
        7 optional int                              isPush=0;         // 推送状态，0：未推送；1：已推送
        8 optional string                           createTime;
        9 optional string                           updateTime;
        10 optional int                             costType=1;         //价格类型，默认免费，1：免费，2：付费：3：小额付费
        12 optional int                             videoType=0;        //视频类型 0为录播 1为直播
        13 optional string                          liveStartTime;      //直播开始时间
        14 optional string                          liveEndTime;        //直播结束时间
    };

    struct PublishVideoLiveReq
    {
       0 optional BasicInfo                        basicInfo;     // 基本信息
       1 optional VideoLive                            videoLive;      // 视频解盘
    };

    struct PublishVideoLiveRsp{
         0 optional	RET_CODE		                ret;		  // 返回码
         1 optional	string			                message;	  // 错误信息，如果成功为success
         2 optional VideoLive                           data;         // 视频解盘id
    };

    struct PushVideoLiveReq
    {
       0 optional BasicInfo                        basicInfo;     // 基本信息
       1 optional string                              id;         // 视频解盘id
    };

    struct PushVideoLiveRsp{
       0 optional	RET_CODE		                ret;		  // 返回码
       1 optional	string			                message;	  // 错误信息，如果成功为success
    };

    struct VideoLiveDetail
    {
        0 optional TgInfo                           tgInfo;                 // 视频解盘内容
        1 optional VideoLive                            videoLive;                 // 视频解盘内容
        2 optional int                              readCount;             // 阅读
        3 optional int                              favCount;              // 点赞
        4 optional int                              rewardCount;           // 打赏
        5 optional int                              shareCount;            // 分享
        6 optional int                              commentCount;            // 评论
        7 optional int                              favStatus=0;      // 是否点赞，1：是；0：否
        8 optional TgDetail                         tgDetail;               // 投顾详情
        9 optional int                              collectStatus;
        10 optional int                             isRecommend;            // 是否推荐，0:未推荐；1:已经推荐
    };

    struct VideoLiveListRsp
    {
        0 optional  int                              total;       // 总数
        1 optional  int                              status;       // 是否有更多的视频解盘标识，0：还有视频解盘；1：没有更多视频解盘
        2 optional  vector<VideoLiveDetail>              list;        // 列表
    };

    struct GetTgVideoLivesReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          direction;          // 方向，0：从新到旧，1：从旧到新
        2 optional    string                       referId;         // 参考id
        3 optional    int                          offset;         // 偏移
        4 optional    int                          size;           // 大小
        5 optional    string                       userId;            // 投顾名
        6 optional    int                          type=0;         // 0：已上架;1:草稿；2:已发布
        7 optional    string                       recommendKey;   // 热门页面顶部hot_top
    };

    struct GetTgVideoLivesRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  VideoLiveListRsp                    data;          // 数据
    };

    struct GetVideoLivesByIdReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    vector<string>               ids;            // 动态ids
        2 optional    int                          type=0;         // 0：查看详情；1：列表
    };

    struct GetVideoLivesByIdRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  vector<VideoLiveDetail>              data;        // 列表
    };

    struct UpdateVideoLiveStatusReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       id;           // 视频解盘id
        2 optional    int                          status=0;            // 视频解盘状态，0：正常状态；-1：删除；1：草稿；2；待审核;3：审核不通过；4；下架
    };

    struct UpdateVideoLiveStatusRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
    };

    struct UpdateVideoLiveExtraReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       id;           // 视频解盘id
        2 optional    int                          operateType;           // 更新类型
        3 optional    string                       name;            // 更新字段
        4 optional    int                          count;         // 更新值
    };

    struct UpdateVideoLiveExtraRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  int                             data;          // 数据
    };

    struct SearchVideoLivesReq
    {
        0 optional    BasicInfo                    basicInfo;           // 基本信息
        1 optional    int                          direction;           // 方向，0：从新到旧，1：从旧到新
        2 optional    string                       referId;             // 参考id
        3 optional    int                          offset;              // 偏移
        4 optional    int                          size;                // 大小
        5 optional    string                       recommendKey;            // 推荐key
        6 optional    string                       keyWord;            // 查询条件
    };

    struct SearchVideoLivesRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  VideoLiveListRsp                    data;          // 数据
    };

    struct GetVideoLivesReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          direction;         // 方向，0：从新到旧，1：从旧到新
        2 optional    string                       referId;           // 参考id
        3 optional    int                          offset;            // 偏移
        4 optional    int                          size;              // 大小
        5 optional    int                          videoType;         // 视频类型 0为录播 1为直播
    };

    struct GetVideoLivesRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  VideoLiveListRsp                    data;          // 数据
    };

///////////////////////////////////// 视频直播相关的结构 /////////////////////////////////

    struct UpdateBusinessExtraReq
    {
        0 optional    BasicInfo                    basicInfo;        // 基本信息
        1 optional    string                       business;         // 业务类型,例如，专栏：column;评论：comment;观点：viewpoint;视频解盘：videoLive;
        2 optional    string                       subBus;           // 子业务类型,例如，评论的子业务，专栏：column;问股：consult;观点：viewpoint;视频解盘：videoLive;
        3 optional    string                       bId;              // 业务id
        4 optional    int                          userRelated=0;    // 是否保存用户行为，0:否，1:是
        5 optional    int                          operateType;      // 操作类型，1：加；2：减；3：重置
        6 optional    string                       name;             // 需要更新的额外信息的属性名称，例如,阅读数:readCount
        7 optional    int                          count;            // 用于加减重置的数字
    };

    struct UpdateBusinessExtraRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  int                             data;          // 数据
    };

    struct BusinessExtra
    {
        0 optional    string                       business;         // 业务类型
        1 optional    string                       bId;              // 业务id
        2 optional    string                       extra;              // 业务信息
    };

    struct QueryBusinessExtraReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       userName;            // 用户名
        3 optional    int                          userRelated=0;    // 是否保存用户行为，0:否，1:是
        2 optional    vector<BusinessExtra>        bIds;               // 业务标识列表
    };

    struct QueryBusinessExtraRsp
    {
        0 optional  RET_CODE                        ret;           // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  vector<BusinessExtra>           data;            // 列表
    };
///////////////////////////////////// 投顾和用户相关的结构 /////////////////////////////////
    struct GetTgInfoReq
    {
        0 optional      BasicInfo                           basicInfo;                  // 基本信息
        1 optional      string                              tgUpName;                   // 投顾的优品用户名
    };

    struct GetTgInfoData
    {
        0 optional      TgInfo			                    tgInfo;	                    // 投顾信息
    };

    struct GetTgInfoRsp
    {
        0 optional	    RET_CODE			                ret;		                // 返回码
        1 optional	    string			                    message;	                // 错误信息，如果成功，则为空
        2 optional      GetTgInfoData                       data;
    };
    struct UpdateTgInfoReq
    {
        0 optional      BasicInfo                           basicInfo;                  // 基本信息
        1 optional      TgInfo                              tgInfo;                     // 投顾信息
        2 optional      int                                 onlyUpdateCache = 0;        // 是否只更新DCache 0：更新table+DCache；1：只更新DCache
    };
    struct UpdateTgInfoRsp
    {
        0 optional	    RET_CODE			                ret;		                // 返回码
        1 optional	    string			                    message;	                // 错误信息，如果成功，则为空
    };

    struct GetTgInfoBatchReq
    {
        0 optional      BasicInfo                           basicInfo;                  // 基本信息
        1 optional      vector<string>                      tgUpNames;                  // 投顾的优品用户名
    };
    struct GetTgInfoBatchData
    {
        0 optional	    vector<TgInfo>	                    tgs;	                    // 投顾数据
    };
    struct GetTgInfoBatchRsp
    {
        0 optional      RET_CODE			                ret;		                // 返回码
        1 optional	    string			                    message;	                // 错误信息，如果成功，则为空
        2 optional      GetTgInfoBatchData                  data;                       // 投顾批量数据
    };

    struct GetTgInfoListReq
    {
        0 optional      BasicInfo                            basicInfo;                 // 基本信息
        1 optional      int                                  type;                      // 推荐类型，0：所有投顾；1：Web-投顾推荐；2：股票通投顾banner；3：App-投顾推荐；4：App-金牌投顾；5：Web-资深投顾；6：App-金牌达人；7：web-意见领袖
        2 optional      string                               upName;                    // 用户id
        3 optional      int                                  offset=0;                  // 偏移
        4 optional      int                                  size;                      // 大小
    };

    struct TgListInfo
    {
        0 optional	    TgInfo			                     tgInfo;	                // 投顾信息
        2 optional      long                                 fans = 0;                  // 粉丝数目
        3 optional      int                                  followStatus=0;            // 是否已经关注投顾，0：未关注；1：关注
        4 optional      string                               recommendTime;             // 关注时间
        5 optional      string                               reason;                    // 关注理由
    };

    struct GetTgInfoListData
    {
        0 optional      int                                   total;                    // 投顾总数
        1 optional      vector<TgListInfo>                    list;                     // 投顾列表
    };

    struct GetTgInfoListRsp
    {
        0 optional      RET_CODE                              ret;                      // 返回码
        1 optional      string                                message;                   // 错误信息
        2 optional      GetTgInfoListData                     data;                      // 投顾列表
    };

    struct SetRecommendReq
    {
        0 optional      BasicInfo                             basicInfo;                 // 基本信息
        1 optional      string                                recommendKey;              // 推荐标识的key，"home_optimization" 首页优选
        2 optional      string                                tgUpName;                  // 投顾id
        3 optional      string                                reason="";                 // 推荐理由
        4 optional      int                                   operateType;               // 1：推荐；0：取消推荐
    };

    struct SetRecommendRsp
    {
        0 optional      RET_CODE                              ret;                     // 返回码
        1 optional      string                                message;                  // 错误信息
    };
    struct GetTgsReq
    {
        0 optional      BasicInfo                             basicInfo;                // 基本信息
        1 optional      int                                   type;                     // 推荐类型，0：所有投顾；1：首页优选；
        2 optional      int                                   offset=0;                 // 偏移
        3 optional      int                                   size;                     // 大小
        4 optional      string                                searchKey="";             // 模糊匹配条件，只匹配投顾id，投顾名，投顾昵称
    };

    struct GetTgsData
    {
        0 optional      int                                   total;                    // 投顾总数
        1 optional      int                                   status;                   // 1再加载完0未加载完
        2 optional      vector<TgListInfo>                    list;                     // 投顾列表
    };

    struct GetTgsRsp
    {
        0 optional      RET_CODE                              ret;                     // 返回码
        1 optional      string                                message;                  // 错误信息
        2 optional      GetTgsData                            data;                     // 投顾列表
    };

    struct GetRecommendTgListReq
    {
        0 optional      BasicInfo                             basicInfo;                // 基本信息
        1 optional      string                                recommendKey;             // 推荐标识的key，"web_gold_talent":web找投顾-金牌达人；"web_opinion":意见领袖；"web_recommend":web投顾推荐；"web_senior":web找投顾-资深投顾；"app_user_gold":APP用户版发现-金牌投顾；"app_user_recommend":APP用户版订阅-投顾推荐；"app_banner":优品股票通投顾banner；
        2 optional      string                                upName;                   // 用户名
        3 optional      int                                   offset=0;                 // 偏移
        4 optional      int                                   size;                     // 大小
    };

    struct GetRecommendTgListData
    {
        0 optional      int                                   total;                    // 投顾总数
        1 optional      vector<TgListInfo>                    list;                     // 投顾列表
    };

    struct GetRecommendTgListRsp
    {
        0 optional      RET_CODE                              ret;                     // 返回码
        1 optional      string                                message;                  // 错误信息
        2 optional      GetRecommendTgListData                data;                     // 投顾列表
    };

    struct FollowTgReq
    {
        0 optional      BasicInfo                              basicInfo;               // 基本信息
        1 optional      string                                 tgUpName;                // 投顾用户名
        2 optional      int                                    status;                  // 状态 0：取消关注，1：关注
        3 optional      string                                 upName;                  // 用户名
    };
    struct FollowTgRsp
    {
        0 optional      RET_CODE                               ret;                    // 返回码
        1 optional      string                                 message;                 // 错误信息
    };
    struct GetMyTgReq
    {
        0 optional      BasicInfo                              basicInfo;               // 基本信息
        1 optional      int                                    offset=0;                // 偏移
        2 optional      int                                    size;                    // 大小
        3 optional      string                                 upName;                  // 用户名
    };

    struct GetMyTgData
    {
        0 optional      int                                    total;                   // 投顾总数
        1 optional      vector<TgDetail>                       list;                    // 投顾列表
    };
    struct GetMyTgRsp
    {
        0 optional      RET_CODE                                ret;                   // 返回码
        1 optional      string                                  message;                // 错误信息，如果成功，则为空
        2 optional      GetMyTgData                             data;                   //  投顾列表
    };

    struct GetTgListReq
    {
        0 optional      BasicInfo                               basicInfo;              // 基本信息
        1 optional      int                                     offset;                 // 偏移
        2 optional      int                                     size;                   // 大小
        3 optional      string                                  upName;                 // 用户名
    };
    struct TgListRsp
    {
        0 optional      int                                     total;                  // 投顾总数
        1 optional      vector<TgDetail>                        list;                   //  投顾列表
    };

    struct GetTgListRsp
    {
        0 optional      RET_CODE                                ret;                   // 返回码
        1 optional      string                                  message;                // 错误信息，如果成功，则为空
        2 optional      TgListRsp                               data;                   //  投顾列表
    };
    struct GetTgDetailBatchReq
    {
        0 optional      BasicInfo                               basicInfo;              // 基本信息
        1 optional      vector<string>                          tgUpNames;              // 投顾的优品用户名
        2 optional      string                                  upName;                // 用户名
    };
    struct GetTgDetailBatchData
    {
        0 optional	    vector<TgDetail>	                    tgDetail;	            // 投顾详情
    };
    struct GetTgDetailBatchRsp
    {
        0 optional	    RET_CODE			                    ret;		            // 返回码
        1 optional	    string			                        message;	            // 错误信息，如果成功，则为空
        2 optional	    GetTgDetailBatchData	                data;	                // 投顾详情
    };
    struct GetUserInfoByUpNameBatchReq
    {
        0 optional      BasicInfo                               basicInfo;              // 基本信息
        1 optional      vector<string>                          upNames;                // 用户名
    };

    struct GetUserInfoByUpNameBatchRsp
    {
        0 optional	    RET_CODE			                    ret;		            // 返回码
        1 optional	    string			                        message;	            // 错误信息，如果成功，则为空
        2 optional	    vector<UserInfo>	                    users;                  // 用户信息
    };
    struct UserMap
    {
        0 optional      int                                     userId;                 // 用户id
        1 optional      string                                  userName;               // 用户名
    };

    struct PushMsgReq
    {
        0 optional      BasicInfo                               basicInfo;              // 基本信息
        1 optional      int                                     type;                   // 类型，1：给关注投顾的粉丝推送消息；2：给购买产品的用户推送；3：指定用户
        2 optional      string                                  tgUpName;               // 投顾id，类型为1的时候才有意义
        3 optional      int                                     productType;            // 产品类型，类型为2的时候才有意义，1：观点，2：直播，4：组合，5：圈子，7：锦囊
        4 optional      int                                     productId;              // 产品id，类型为2的时候才有意义
        5 optional      int                                     pushPlatform;           // 推送平台，默认为1，1：融云，2：自有的push
        6 optional      int                                     targetId;               // 目标id
        7 optional      string                                  targetName;             // 目标名
        8 optional      int                                     targetType;             // 目标类型，1：牛人组合调整；2：用户加入牛圈；3：用户添加好友；8：用户购买笔记；9：用户取消好友；11：用户退出牛圈；12：用户评论笔记；13：用户点赞笔记；14：牛人组合启动；15：用户购买组合；16：牛人组合达标；17：牛人组合结束；18：牛人发布笔记；19：牛人创建组合；20：牛人创建牛圈；21：牛圈付费提醒；22：创建锦囊提醒；23：锦囊购买提醒；24：锦囊更新提醒；25：锦囊更新提醒；26：锦囊结束提醒；27：牛圈自选股；31：牛圈消息提醒；32：牛人组合盘中达标；33：牛人组合盘中80%止损；34：牛人组合盘中止损；35：圈子操盘笔记
        9 optional      int                                     messageType;            // 消息类型，1：购买通知；2：好友通知；3：圈友通知；4：评论通知；5：点赞通知；6：服务通知（服务动态）；7:牛人通知（投顾动态）；8:圈子消息；9:系统通知
        10 optional     string                                  pushContent;            // 推送内容
        11 optional     string                                  upName;                 // 用户Id
        12 optional     string                                  startTime="";           // 开始时间
        13 optional     string                                  url;                    // 跳转地址，只有推送自建push的时候才需要此参数，推送融云不需要此参数
        14 optional     vector<UserMap>                         toUsers;                // 指定的用户，类型为3的时候才有意义
    };

    struct PushMsgRsp
    {
        0 optional      RET_CODE                                ret;                    // 返回码
        1 optional      string                                  message;                // 错误信息
    };

    struct SendSmsReq
    {
        0 optional      BasicInfo                               basicInfo;              // 基本信息
        1 optional      int                                     type;                   // 类型，1：给关注投顾的粉丝发短信；2：给购买产品的用户发短信；3：指定用户
        2 optional      int                                     tgId;                   // 投顾id，类型为1的时候才有意义
        3 optional      int                                     productType;            // 产品类型，类型为2的时候才有意义，1：观点，2：直播，4：组合，5：圈子，7：锦囊
        4 optional      int                                     productId;              // 产品id，类型为2的时候才有意义
        5 optional      string                                  msg;                    // 短信内容
        6 optional      vector<UserMap>                         toUsers;                // 指定的用户，类型为3的时候才有意义
    };

    struct SendSmsRsp
    {
        0 optional      RET_CODE                                ret;                   // 返回码
        1 optional      string                                  message;               // 错误信息
    };

    struct GetUserRightReq
    {
        0 optional      BasicInfo                               basicInfo;              // 用户基础信息
        1 optional      int                                     orderType;              // 用户的有权限产品的类型
        2 optional      int                                     offset;                 // 起始位置
        3 optional      int                                     size;                   // 数据大小
        4 optional      string                                  upName;                 // 用户名
    };

    struct UserRight
    {
        0 optional      int                                     id;                     // 产品id
        1 optional      string                                  updateTime;             // 产品购买时间
        2 optional      string                                  startTime;              // 产品开始时间
        3 optional      string                                  endTime;                // 产品结束时间
    };

    struct GetUserRightRsp
    {
        0 optional      RET_CODE                                ret;                    // 返回码
        1 optional      string                                  message;                // 错误信息，如果成功，则为空
        2 optional      vector<UserRight>                       data;                   // 有权限的产品Id
    };
    struct TabInfo
    {
        0 optional      int                                     type;                   // tab类型 1为投顾空间顶部 2为投顾空间底部 3为首面顶部 4为首面底部
        1 optional      int                                     subType;                // 类型，1：观点(专栏) 2：直播；4：组合；5：圈子；7：锦囊 10:vip 11:动态(观点)
        2 optional      string                                  name;                   // 名称，tab名称
        3 optional      int                                     productId;              // 默认展示的id（目前只有圈子才会用到）
        4 optional      string                                  icon;                   // icon链接
        5 optional      string                                  url;                    // 跳转链接
        6 optional      int                                     priId;                  // 编号，从1开始编号
        7 optional      int                                     status;                 // 1为开启,0为关闭
        8 optional      int                                     tabFlag;                // 1为突显,0为正常
    };

    struct SetTgTabReq
    {
        0 optional      BasicInfo                               basicInfo;              // 基本信息
        1 optional      string                                  tgUpName;               // 投顾用户名
        2 optional      vector<TabInfo>                         tabs;                   // 投顾tab列表
        3 optional      int                                     type;                   // tab类型 1为投顾空间顶部 2为投顾空间底部 3为热门页面顶部
    };

    struct SetTgTabRsp
    {
        0 optional	    RET_CODE			                    ret;		            // 返回码
        1 optional	    string			                        message;	            // 错误信息，如果成功，则为空
    };

    struct GetTgTabReq
    {
        0 optional      BasicInfo                               basicInfo;            // 基本信息
        1 optional      string                                  tgUpName;             // 投顾用户名
        2 optional      int                                     type;                 // tab类型 1为投顾空间顶部 2为投顾空间底部 3为首面顶部 4为首面底部
        3 optional      string                                  upName;               // 用户名
    };

    struct GetTgTabRsp
    {
        0 optional	    RET_CODE			                    ret;		          // 返回码
        1 optional	    string			                        message;	          // 错误信息，如果成功，则为空
        2 optional      vector<TabInfo>                         tabs;                 // 投顾tab列表
        3 optional      int                                     userVipRight=0;                 // 1：已开通vip
    };
    struct LoginReq
    {
        0 optional      BasicInfo                               basicInfo;            // 基本信息
        1 optional      string                                  upName;               // 用户名
        2 optional      string                                  pwd;                  // 密码
    };

    struct LoginRsp
    {
        0 optional	    RET_CODE			                    ret;		          // 返回码
        1 optional	    string			                        message;	          // 错误信息，如果成功，则为空
        2 optional      UserInfo                                userInfo;             // 用户信息
    };

    struct CreateCriterionProductReq
    {
        0  optional  int                        productId;                  //产品id
        1  optional  int                        productType;                //产品类型
        2  optional  string                     productName;                //产品名字
        3  optional  int                        riskLevel;                  //产品风险等级
        4  optional  int                        investType=1;               //产品投资类型
        5  optional  int                        investTime=1;               //产品投资期限
        6  optional  int                        price;                      //产品价格
        7  optional  int                        oldPrice;                   //产品原价
        8  optional  string                     tgUpName;                   //产品的投顾Id
        9  optional  CriterionOrderInfo         criterionOrderInfo;         //标准订单信息
    };

    struct CriterionProductData
    {
        0  optional  string                         criterionProductId;        //标准产品id
        1  optional  string                         exKey;                     //标准产品exKey
    };

    struct CreateCriterionProductRsp
    {
        0 optional	RET_CODE			            ret;		// 返回码
        1 optional	string			                message;	// 错误信息，如果成功，则为空
        2 optional  CriterionProductData            data;
    };

    struct CriterionProductInfo
    {
        0  optional  int                            productId;                     //产品id
        1  optional  int                            productType;                   //产品类型
        2  optional  string                         exKey;                         //标准产品key
        3  optional  string                         criterionProductId;            //标准产品Id
        4  optional  string                         upName;                        // 用户名
        5  optional  int                            discountType=0;                // 0为非打折产品,1为打折产品
        6  optional  string                         rightId;                       // 权限Id
        7  optional  CriterionOrderInfo             criterionOrderInfo;            // 标准订单信息
    };

    struct GetCriterionProductInfoBatchReq
    {
        0 optional   BasicInfo                          basicInfo;                  // 基本信息
        1 optional   vector<CriterionProductInfo>	    criterionProductInfoList;	// 标准产品keys
        2 optional   string                             upName;                     // 用户名
    };

    struct GetCriterionProductInfoBatchRsp
    {
        0 optional	RET_CODE			                ret;		                // 返回码
        1 optional	string			                    message;	                // 错误信息，如果成功，则为空
        2 optional   vector<CriterionProductInfo>	    criterionProductInfoList;	// 标准产品keys
    };

    struct GetTgProfileByProductIdReq
    {
        0 optional   BasicInfo                          basicInfo;                  // 基本信息
        1 optional   string                             productId;                  // 产品Id
    };

    struct TgProfile
    {
        0 optional   string                             upName;                    //投顾用户名
        1 optional   string                             productId;                 //产品id
    };

    struct GetTgProfileByProductIdRsp
    {
        0 optional	RET_CODE			                ret;		                // 返回码
        1 optional	string			                    message;	                // 错误信息，如果成功，则为空
        2 optional  TgProfile                           data;                       // 投顾信息
    };

    struct DisCountConfig
    {
        0 optional   int                                month;                      // 月份
        1 optional   int                                days;                       // 天数
        2 optional   double                             discount;                   // 折扣
        3 optional   int                                cost;                       // 价格
    };

    struct VipProduct
    {
        0 optional   int                                iaUserId;                   // 投顾id
        1 optional   vector<int>                        productTypes;               // vip产品的类型
        2 optional   vector<DisCountConfig>             config;                     // 折扣及价格配置
        3 optional   string                             intro;                      // 产品介绍
        4 optional   string                             productName;                // 产品名称
        5 optional   int                                riskLevel=3;                // 产品风险等级
        6 optional   int                                investType=1;               // 产品投资类型
        7 optional   int                                investTime=1;               // 产品投资期限
        8 optional   int                                status;                     // 产品的状态
        9 optional   int                                id;                         // vip产品Id
        11 optional  string                             createTime;                 // 创建时间
        12 optional  string                             updateTime;                 // 更新时间
        13 optional  string                             tgUpName;                   // 投顾优品用户名
        14 optional  string                             img;                        // VIP图片

    };
    struct CreateVipProductReq
    {
        0 optional   BasicInfo                          basicInfo;                  // 基本信息
        1 optional   VipProduct                         vipProduct;                 // vip产品信息
        2 optional   CriterionOrderInfo                 criterionOrderInfo;         // 标准订单信息
    };

    struct CreateVipProductRsp
    {
        0 optional	RET_CODE			                ret;		                // 返回码
        1 optional	string			                    message;	                // 返回信息
    };

    struct QueryVipProductReq
    {
        0 optional   BasicInfo                          basicInfo;                  // 基本信息
        1 optional   int                                iaUserId;                   // 投顾id
        2 optional   string                             keyword;                    // 关键字
        3 optional   int                                productType;                // 产品类型
        4 optional   int                                offset;                     // 起始位置
        5 optional   int                                size;                       // 数据大小
        6 optional   string                             tgUpName;                   // 投顾优品用户名
    };

    struct QueryVipProductData
    {
        0 optional   int                                total;                      // 总数
        1 optional   vector<VipProduct>                 list;                       // 消息列表
    };

    struct QueryVipProductRsp
    {
        0 optional	RET_CODE			                ret;		                // 返回码
        1 optional	string			                    message;	                // 返回信息
        2 optional  QueryVipProductData                 data;                       // 查询的数据
    };

    struct QueryVipProductDetailReq
    {
        0 optional   BasicInfo                          basicInfo;                  // 基本信息
        1 optional   int                                vipProductId;               // vip产品的Id
    };

    struct DisCountProduct
    {
        0 optional       int                id;                       // id
        1 optional       int                productId;                // 产品Id
        2 optional       int                productType;              // 产品类型，1：笔记；4：组合；5：牛圈；7：锦囊
        3 optional       int                userId;                   // 投顾id
        4 optional       double             initialPrice;             // 初始价格
        5 optional       int                activate;                 // 打折是否生效：0未生效，1生效,-1失效
        6 optional       int                cancelDiscount;           // 是否取消打折
        7 optional       int                favourableType;           // 是否取消打折
        8 optional       double             favourableRange;          // 如果是activate为0,则需求传这个字段
        9 optional       double             favourablePrice;          // 优惠价格
        10 optional      int                discountType;             // 打折类型，1：投顾打折；2：活动打折
        11 optional      string             discountExtra;            // 如果是圈子或长锦囊
        12 optional      string             productName;              // 产品名字
        13 optional      string             discountDescription;      // 打折描述
        14 optional      string             discountMonth;            // 权限的月份
        15 optional      int                riskLevel;                // 风险等级
    };

    struct DiscountInfo
    {
        0 optional   int                                total;
        1 optional   vector<DisCountProduct>            list;
    };

    struct QueryVipProductDetailData
    {
        0 optional  VipProduct                          vipProduct;                //  vip产品信息
        1 optional  DiscountInfo                        discountInfo;              //  打折信息
        2 optional  CriterionOrderInfo                  criterionOrderInfo;        //  标准订单信息
    };

    struct QueryVipProductDetailRsp
    {
        0 optional	RET_CODE			                ret;		                // 返回码
        1 optional	string			                    message;	                // 返回信息
        2 optional  QueryVipProductDetailData           data;                       // 查询的数据
    };

    struct QueryVipRightProductReq
    {
        0 optional   BasicInfo                          basicInfo;                  // 基本信息
        1 optional   int                                userId;                     // 用户Id
        2 optional   int                                vipProductId;               // vip产品id
        3 optional   int                                iaUserId;                   // 投顾Id
        4 optional   int                                offset;                     // 起始位置
        5 optional   int                                size;                       // 数据大小
        6 optional   string                             upName;                     // 用户优品用户名
        7 optional   string                             tgUpName;                   // 投顾优品用户名
        8 optional   string                             referenceId;                // 参考id
        9 optional   int                                direct;                     // 方向 1：拉取新的消息；0：拉取旧的消息
        10 optional  vector<int>                        productTypes;               // vip产品的类型

    };
    struct VipRightProduct
    {
        0 optional   string                             title;                     // 产品名称
        1 optional   string                             intro;                     // 产品介绍
        2 optional   int                                productId;                 // 产品Id
        3 optional   int                                productType;               // 产品类型
        4 optional   TgInfo                             tgInfo;                    // 投顾信息
        5 optional   vector<UserRight>                  userRight;                 // 有权限的产品Id
        6 optional   string                             extra;                     // 附加信息
        7 optional   string                             publishTime;               // 审核时间
        8 optional   string                             gId;                       // 生成的Id
    };
    struct QueryVipRightProduct
    {
        0 optional   int                                total;                      // 总数
        1 optional   vector<VipRightProduct>            list;                       // 消息列表
        2 optional   vector<UserRight>                  userRight;                  // 有权限的产品Id
        3 optional   int                                status;                     // 1再加载完0未加载完
    };

    struct QueryVipRightProductRsp
    {
        0 optional	RET_CODE			                ret;		                // 返回码
        1 optional	string			                    message;	                // 返回信息
        2 optional  QueryVipRightProduct                data;                       // 查询的数据
    };

    struct QueryTgVipProductBatchReq
    {
        0 optional   BasicInfo                          basicInfo;                  // 基本信息
        1 optional   vector<string>                     tgUpNames;                  // 投顾优品用户名
        2 optional   int                                productType;                // 产品类型
    };

    struct QueryTgVipProductBatchData
    {
        0 optional  string                              tgUpName;                  // 投顾优品用户名
        1 optional  vector<int>                         productTypes;               // vip产品的类型
    };

    struct QueryTgVipProductBatchRsp
    {
        0 optional	RET_CODE			                ret;		                // 返回码
        1 optional	string			                    message;	                // 返回信息
        2 optional  vector<QueryTgVipProductBatchData>  data;                       // vip产品的类型
    };

    struct QueryVipProductBatchReq
    {
        0 optional   BasicInfo                          basicInfo;                  // 基本信息
        1 optional   int                                productType;                // 产品类型
        2 optional   vector<string>                     tgUpNames;                   // 投顾优品用户名
    };

    struct QueryVipProductBatchData
    {
        0 optional   string                             tgUpName;                   // 总数
        1 optional   vector<VipProduct>                 list;                       // 消息列表
    };

    struct QueryVipProductBatchRsp
    {
        0 optional	RET_CODE			                ret;		                // 返回码
        1 optional	string			                    message;	                // 返回信息
        2 optional  vector<QueryVipProductBatchData>    data;                       // 查询的数据
    };

    struct QueryUserRightByRightIdReq
    {
        0 optional   BasicInfo                          basicInfo;                  // 基本信息
        1 optional   int                                productId;                  // 产品Id
        2 optional   int                                productType;                // 产品类型
        3 optional   string                             rightId;                    // 权限Id
        4 optional   string                             upName;                     // 用户名
    };

    struct QueryUserRightByRightIdRsp
    {
        0 optional	RET_CODE			                ret;		                // 返回码
        1 optional	string			                    message;	                // 返回信息
        2 optional	string			                    endTime;	                // 返回信息
        3 optional	int			                        status;	                    // 0表示无权限、1表示有权限

    };

    struct UpdateVipProductStatusReq
    {
        0 optional   BasicInfo                          basicInfo;                  // 基本信息
        1 optional   int                                vipProductId;               // vip产品Id
        2 optional   int                                status;                     // 状态
    };
    struct UpdateVipProductStatusRsp
    {
        0 optional	RET_CODE			                ret;		                // 返回码
        1 optional	string			                    message;	                // 返回信息
    };

    struct QueryUserVipRightReq
    {
        0 optional      BasicInfo                              basicInfo;              // 用户基础信息
        1 optional      string                                 upName;                 // 用户名
        2 optional      vector<int>                            productTypes;           // 产品类型
    };

    struct UserVipRightData
    {
        0 optional  int                                        productType;
        1 optional  string                                     tgUpName;
        2 optional  UserRight                                  userRight;
    };

    struct QueryUserVipRightRsp
    {
        0 optional	RET_CODE			                         ret;		                // 返回码
        1 optional	string			                             message;	                // 返回信息
        2 optional  vector<UserVipRightData>                     data;                       // 用户vip权限
    };

    struct SearchVipProductReq
    {
        0 optional   BasicInfo                                  basicInfo;                  // 基本信息
        1 optional   string                                     keyword;                    // 关键字
        2 optional   int                                        offset;                     // 起始位置
        3 optional   int                                        size;                       // 数据大小
        4 optional   int                                        direction;                  // 方向，0：从新到旧，1：从旧到新
        5 optional   int                                        referId;                    // 参考id
    };

    struct SearchVipProductData
    {
        0 optional   int                                        total;                      // 总数
        1 optional   int                                        status;                     // 是否有更多的评论标识，0：还有评论；1：没有更多评论
        2 optional   vector<VipProduct>                         list;                       // 列表
    };

    struct SearchVipProductRsp
    {
        0 optional	RET_CODE			                         ret;		                // 返回码
        1 optional	string			                             message;	                // 返回信息
        2 optional  SearchVipProductData                         data;
    };

    struct OpenFreeUserRightReq
    {
        0 optional   BasicInfo                                  basicInfo;                  // 基本信息
        1 optional   int                                        productId;                  // 产吕Id
        2 optional   int                                        productType;                // 产品类型
        3 optional   int                                        days;                       // 开通天数
        4 optional   string                                     productName;                // 产品名字
        5 optional   string                                     upName;                     // 用户upName
        6 optional   string                                     tgUpName;                   // 投顾upName
    };

    struct OpenFreeUserRightRsp
    {
        0 optional	RET_CODE			                         ret;		                // 返回码
        1 optional	string			                             message;	                // 返回信息
        2 optional	string			                             crmOrderId;	            // crm订单号
    };

    struct FollowTgBatchReq
    {
        0 optional      BasicInfo                              basicInfo;               // 基本信息
        1 optional      vector<string>                         tgUpNames;               // 投顾用户名
        2 optional      int                                    status;                  // 状态 0：取消关注，1：关注
        3 optional      string                                 upName;                  // 用户名
    };

    struct FollowTgBatchRsp
    {
        0 optional      RET_CODE                               ret;                    // 返回码
        1 optional      string                                 message;                 // 错误信息
    };

    struct GetHomeOptimizationRecommendTgReq
    {
        0 optional      BasicInfo                              basicInfo;               // 基本信息
        1 optional      string                                 upName;                  // 用户名
        2 optional      int                                    offset=0;                // 偏移
        3 optional      int                                    size;                    // 大小
    };

    struct HomeOptimizationRecommendTgData
    {
        0 optional      int                                   total;                    // 投顾总数
        1 optional      vector<TgListInfo>                    list;                     // 投顾列表
    };

    struct GetHomeOptimizationRecommendTgRsp
    {
        0 optional      RET_CODE                               ret;                     // 返回码
        1 optional      string                                 message;                  // 错误信息
        2 optional      HomeOptimizationRecommendTgData        data;                     // 投顾列表
    };

    struct GetUnionUserInfoByUpNameReq
    {
        0 optional      BasicInfo                              basicInfo;               // 基本信息
        1 optional      string                                 upName;                  // 用户名
        2 optional      string                                 plat;                    // 平台 默认为微信
    };

    struct GetUnionUserInfoByUpNameRsp
    {
        0 optional	    RET_CODE			                    ret;		            // 返回码
        1 optional	    string			                        message;	            // 错误信息，如果成功，则为空
        2 optional	    UserInfo	                            user;                  // 用户信息
    };
    struct CollectionInfo
    {
        0  optional    string                                   index;               // 索引
        1  optional    string                                   author;              // 投顾老师的用户名
        2  optional    int                                      type;                // 产品类型，1：笔记；2：直播；3：问答；4：组合；5：牛圈；6：投顾；7：锦囊；8：活动产品包；9：长锦囊；10：视频；11：微博
        3  optional    string                                   id;                  // 产品id
        4  optional    int                                      subType;             // 子类型，不同的产品子类型不同
        5  optional    string                                   subId;               // 子类型的id，例如：锦囊文章
        6  optional    string                                   title;               // 标题
        7  optional    string                                   summary;             // 简介
        8  optional    vector<string>                           img;                 // 图片
        9  optional    string                                   extra;               // 扩展字段，一般为json格式stringify
        10  optional   int                                      status;               // 动态状态,0：正常，-1：删除/下架
        11  optional   long                                     updateTime;          // 时间
        12  optional   long                                     recommendTime;          // 置顶时间
        13 optional    int                                      cost=0;             // 价格，默认免费
        14 optional    string                                   marketing;           // 营销语
        15 optional    string                                   tagType;             // tag类型,1:短线操作, 2:价值投资, 3:内容精研, 4:稳健波段,
        16 optional    string                                   criterionProductId;  //标准产品id
        17 optional    string                                   exKey;               //标准产品exKey
        18 optional    int                                      buyStatus=0;      // 是否有权限，1：是；0：否
        19 optional    int                                      costType=1;              // 价格类型，默认免费，1：免费，2：付费：3：小额付费
        20 optional    vector<Stock>                            relateStock;             // 关联股票
        21 optional    string                                   content;               // 内容
    };

    struct CollectInfoReq
    {
        0 optional      BasicInfo                              basicInfo;               // 基本信息
        1 optional      CollectionInfo                         info;                    // 收藏信息
        2 optional      int                                    status;                  // 1为收藏 0为取消收藏
    };

    struct CollectInfoRsp
    {
        0 optional	    RET_CODE			                    ret;		            // 返回码
        1 optional	    string			                        message;	            // 错误信息，如果成功，则为空
    };

    struct QueryMyCollectionReq
    {
        0 optional      BasicInfo                               basicInfo;         // 基本信息
        1 optional      int                                     direction;         // 方向，0：从新到旧，1：从旧到新
        2 optional      string                                  referId;           // 参考id
        3 optional      int                                     offset;            // 偏移
        4 optional      int                                     size;              // 大小
        5 optional      string                                  upName;            // 用户名
    };

    struct QueryMyCollectionResult
    {
        0 optional      int                            total;              // 总数
        1 optional      int                            status;             // 是否有更多数据标识，0：还有更多数据；1：没有更多数据
        2 optional      vector<CollectionInfo>         list;               // 列表
    };

    struct QueryMyCollectionRsp
    {
        0 optional      RET_CODE                       ret;                // 返回值
        1 optional      string                         message;            // 返回消息
        2 optional      QueryMyCollectionResult        data;               // 信息流数据
    };

    struct QueryUserCollectStatusReq
    {
        0 optional      BasicInfo                               basicInfo;         // 基本信息
        1 optional      int                                     type;              // 产品类型，1：笔记；2：直播；3：问答；4：组合；5：牛圈；6：投顾；7：锦囊；8：活动产品包；9：长锦囊；10：视频；11：微博
        2 optional      string                                  id;                // 产品id
        3 optional      string                                  upName;            // 用户名
    };

    struct QueryUserCollectStatusRsp
    {
        0 optional      RET_CODE                       ret;                // 返回值
        1 optional      string                         message;            // 返回消息
        2 optional      int                            status;             // 1为已收藏,2为未收藏
    };

    struct ContentLabel
    {
        0 optional      int                                    value;
        1 optional      string                                 label;
        2 optional      int                                    type;              //1为收费,0为免费
    };

    struct SetTgContentLabelReq
    {
        0 optional      BasicInfo                               basicInfo;         // 基本信息
        1 optional      string                                  tgUpName;               // 投顾用户名
        2 optional      vector<ContentLabel>                    contentLabels;                   // 投顾tab列表
    };

    struct SetTgContentLabelRsp
    {
        0 optional      RET_CODE                                ret;                // 返回值
        1 optional      string                                  message;            // 返回消息
    };

    struct GetTgContentLabelReq
    {
        0 optional      BasicInfo                               basicInfo;         // 基本信息
        1 optional      string                                  tgUpName;               // 投顾用户名
    };

    struct GetTgContentLabelRsp
    {
        0 optional      RET_CODE                                ret;                // 返回值
        1 optional      string                                  message;            // 返回消息
        2 optional      vector<ContentLabel>                    contentLabels;
    };

    struct CollectProductInfo{
        0 optional      int                                    productId;                //产品id
        1 optional      int                                    productType;              //产品类型
        2 optional      int                                    status;                   //收藏状态
    };
    struct QueryUserCollectStatusBatchReq
    {
        0 optional      BasicInfo                               basicInfo;                // 基本信息
        1 optional      string                                  upName;                   // 用户名
        2 optional      vector<CollectProductInfo>              list;                     // 产品信息
    };

    struct QueryUserCollectStatusBatchRsp
    {
        0 optional      RET_CODE                                ret;                      // 返回值
        1 optional      string                                  message;                  // 返回消息
        2 optional      vector<CollectProductInfo>              list;                     // 产品信息
    };

    struct QueryWeChatInfoByUpNameReq
    {
        0 optional      BasicInfo                               basicInfo;                // 基本信息
        1 optional      string                                  upName;                   // 用户名
    };

    struct WeChatInfo
    {
        0 optional      string                                  weChat;                   // 微信号
        1 optional      string                                  weChatName;               // 微信名称
    };

    struct QueryWeChatInfoByUpNameRsp
    {
        0 optional      RET_CODE                                ret;                      // 返回值
        1 optional      string                                  message;                  // 返回消息
        2 optional      WeChatInfo                              data;
    };

    struct GetTgStatisticsDataReq
    {
        0 optional      BasicInfo                               basicInfo;
        1 optional      string                                  tgName;
        2 optional      string                                  startTime;
        3 optional      string                                  endTime;
        4 optional      int                                     productType;
        5 optional      int                                     offset;                 // 偏移
        6 optional      int                                     size;                   // 大小
    };

    struct TgStatisticsData
    {
        0 optional      int                                     commentCount;
        1 optional      int                                     readCount;
        2 optional      int                                     favCount;
        3 optional      int                                     saleCount;
        4 optional      string                                  tgUpName;
        5 optional      string                                  tgName;
        6 optional      int                                     total;
    };

    struct TgStatisticsDataResult
    {
        0 optional      int                                    total;
        1 optional      vector<TgStatisticsData>               list;
    };

    struct GetTgStatisticsDataRsp
    {
        0 optional      RET_CODE                                ret;                      // 返回值
        1 optional      string                                  message;                  // 返回消息
        2 optional      TgStatisticsDataResult                  data;
    };

    struct CreateDisCountProductReq
    {
        0 optional       int                                    productId;                //产品Id
        1 optional       int                                    productType;              //产品类型 1为笔记4为组合5牛圈7锦囊
        2 optional       string                                 tgUpName;                 //用户ID
        3 optional       vector<DisCountConfig>                 disCountConfigs;          //打折产品配置如[{{"month":1,"days":0,"discount":10,"cost":998}}]
        4 optional       int                                    activate;                 //打折是否生效：0未生效，1生效,-1失效
        5 optional       int                                    cancelDiscount;           //是否取消打折
        6 optional       int                                    favourableType;           //优惠类型
        7 optional       double                                 favourableRange;          //如果是activate为0,则需求传这个字段
        8 optional       int                                    discountType;             //打折类型1为投顾打折，2为活动打折
        9 optional       string                                 discountExtra;            //如果是圈子或长锦囊
        10 optional      string                                 productName;              // 产品名字
        11 optional      int                                    riskLevel=3;              // 风险等级
        12 optional      CriterionOrderInfo                     criterionOrderInfo;       // 标准订单信息
    };

    struct CreateDisCountProductRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;       // 错误信息，如果成功，则为空
    };

    struct GetRightUserReq
    {
        0 optional   int                                        rightId;       // 权限Id
        1 optional   int                                        id;            //锦囊、观点、圈子的Id
        2 optional   int                                        type;          //类型 1为笔记2为直播4为组合5牛圈6投顾7锦囊
        3 optional   int                                        offset;        // 起始位置
        4 optional   int                                        size;          // 数据大小
    };

    struct RightUser
    {
        0 optional  int                                         userId;       // 用户Id
        1 optional  string                                      userName;     // 用户名
        2 optional  string                                      updateTime;   // 获得权限的时间
        3 optional string                                       startTime;      // 产品开始时间
        4 optional string                                       endTime;        // 产品结束时间
    };

    struct GetRightUserRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;       // 错误信息，如果成功，则为空
        2 optional  vector<RightUser>                           data;          // 有权限的用户Id
    };

    struct ContentService
    {
        0 optional      int                                    value;
        1 optional      string                                 service;
        2 optional      int                                    type;              //1为收费,0为免费
        3 optional      vector<ContentLabel>                   contentLabels;     //投顾tab列表
    };

    struct SetTgContentServiceReq
    {
        0 optional      BasicInfo                               basicInfo;         // 基本信息
        1 optional      string                                  tgUpName;          // 投顾用户名
        2 optional      vector<ContentService>                  contentServices;   // 投顾service列表
    };

    struct SetTgContentServiceRsp
    {
        0 optional      RET_CODE                                ret;                // 返回值
        1 optional      string                                  message;            // 返回消息
    };

    struct GetTgContentServiceReq
    {
        0 optional      BasicInfo                               basicInfo;         // 基本信息
        1 optional      string                                  tgUpName;               // 投顾用户名
    };

    struct GetTgContentServiceRsp
    {
        0 optional      RET_CODE                                ret;                // 返回值
        1 optional      string                                  message;            // 返回消息
        2 optional      vector<ContentService>                  contentServices;
    };

    struct GetTgContentServiceBatchReq
    {
        0 optional      BasicInfo                               basicInfo;         // 基本信息
        1 optional      vector<string>                          tgUpNames;               // 投顾用户名
    };

    struct ContentServiceData
    {
        1 optional      string                                  tgUpName;               // 投顾用户名
        2 optional      vector<ContentService>                  contentServices;
    };

    struct GetTgContentServiceBatchRsp
    {
        0 optional      RET_CODE                                ret;                // 返回值
        1 optional      string                                  message;            // 返回消息
        2 optional      vector<ContentServiceData>              data;               // 数据
    };

    struct GetAllContentServiceReq
    {
        0 optional      BasicInfo                               basicInfo;         // 基本信息
    };

    struct GetAllContentServiceRsp
    {
        0 optional      RET_CODE                                ret;                // 返回值
        1 optional      string                                  message;            // 返回消息
        2 optional      vector<ContentService>                  contentServices;
    };

    struct GetRightUserAvatarBatchReq
    {
        0 optional      BasicInfo                               basicInfo;     // 基本信息
        1 optional      vector<string>                          rightIds;       // 权限Id
        2 optional      vector<int>                             ids;           //锦囊、观点、圈子的Id
        3 optional      int                                     type;          //类型 1为笔记2为直播4为组合5牛圈6投顾7锦囊
        4 optional      int                                     offset;        // 起始位置
        5 optional      int                                     size;          // 数据大小
        6 optional      int                                     flag=1;        // 0为假头像1为真头像
    };

    struct RightUserAvatar
    {
        0 optional      vector<string>                          avatars;
        1 optional      string                                  rightId;       // 权限Id
        2 optional      int                                     id;            //锦囊、观点、圈子的Id
        3 optional      int                                     type;          //类型 1为笔记2为直播4为组合5牛圈6投顾7锦囊
    };

    struct GetRightUserAvatarBatchRsp
    {
        0 optional      RET_CODE                                ret;                // 返回值
        1 optional      string                                  message;            // 返回消息
        2 optional      vector<RightUserAvatar>                 data;            // 返回消息
    };

    struct GetCrmModulesReq
    {
        0 optional      BasicInfo                               basicInfo;     // 基本信息
        1 optional      string                                  upName;        // 用户名
        2 optional      string                                  rightId;       // 权限Id
        3 optional      int                                     productId;     // 产品id
        4 optional      int                                     productType;   // 产品类型
    };

    struct CrmModules
    {
        0 optional      string                                  crmOrderId;     // 订单Id
        1 optional      string                                  productId;      // 产品Id
        2 optional      string                                  startTime;      // 开始时间
        3 optional      string                                  endTime;        // 结束时间
    };

    struct GetCrmModulesRsp
    {
        0 optional      RET_CODE                                ret;                // 返回值
        1 optional      string                                  message;            // 返回消息
        2 optional      vector<CrmModules>                      data;               // 返回数据
    };

    struct SetCriterionOrderInfoReq
    {
        0 optional      BasicInfo                               basicInfo;         // 基本信息
        1 optional      int                                     productId;         // 产品id
        2 optional      int                                     productType;       // 产品类型
        3 optional      CriterionOrderInfo                      criterionOrderInfo;// 标准订单信息
    };

    struct SetCriterionOrderInfoRsp
    {
        0 optional      RET_CODE                                ret;                // 返回值
        1 optional      string                                  message;            // 返回消息
    };

    struct GetCriterionOrderInfoReq
    {
        0 optional      BasicInfo                               basicInfo;         // 基本信息
        1 optional      int                                     productId;         // 产品id
        2 optional      int                                     productType;       // 产品类型
    };

    struct GetCriterionOrderInfoRsp
    {
        0 optional      RET_CODE                                ret;                // 返回值
        1 optional      string                                  message;            // 返回消息
        2 optional      CriterionOrderInfo                      data;               // 标准订单信息
    };

    struct GetHotRecommendTgReq
    {
        0 optional      BasicInfo                             basicInfo;                // 基本信息
        1 optional      string                                recommendKey;             // 推荐标识的key，"tg_hot":热门大咖推荐
        2 optional      string                                upName;                   // 用户名
        3 optional      int                                   offset=0;                 // 偏移
        4 optional      int                                   size;                     // 大小
    };

    struct HotRecommendTgData
    {
        0 optional      int                                   total;                    // 投顾总数
        1 optional      vector<TgDetail>                      list;                     // 投顾列表
    };

    struct GetHotRecommendTgRsp
    {
        0 optional      RET_CODE                              ret;                     // 返回码
        1 optional      string                                message;                  // 错误信息
        2 optional      HotRecommendTgData                    data;                     // 投顾列表
    };

///////////////////////////////////// 专栏相关的结构 /////////////////////////////////
	struct GetRecommendBasic{
        0 optional	ArticleBasicInfo                        basicInfo;          //基本详情
        1 optional  TgInfo                                  userInfo;           //投顾信息
        2 optional	int		                                commentCount;       //观点评论数
        3 optional	int		                                readCount;	        //观点阅读数
        4 optional	int		                                favorites;	        //观点点赞数
        5 optional	int		                                saleCount;          //售出份数
        6 optional  int		                                rewardCount;        //打赏次数
        7 optional  string                                  description;        //推荐的理由
        8 optional  string                                  picture;            //推荐的图片
        9 optional  int                                     isRecommend;        //是否推荐，0:未推荐；1:已经推荐
        10 optional string                                  recommendTime;      //推荐时间
        11 optional  string                                 articleDetailUrl;   // 观点详情H5的url
        12 optional  TgDetail                               tgDetail;           //投顾详细信息
    };
    struct GetRecommendBasicList{
        0 optional  int                                     total;              //数据总条数
        1 optional  vector<GetRecommendBasic>	            list;               //观点信息列表
    };
    struct GetArticleList{
        0 optional  int                                     total;              //数据总条数
        1 optional  vector<ArticleDetailExtra>	            list;               //观点信息列表
    };

    struct SaveArticleReq{
        0 optional  BasicInfo                               basicInfo;          //基本信息
        1 optional  ArticleBasicInfo	                    articleBasic;	    //观点基础信息
        2 optional  WorkWeChatInfo                          workWeChatInfo;     //企业微信信息
    };

    struct SaveArticleRsp{
        0 optional	RET_CODE		                        ret;		        // 返回码
        1 optional	string			                        message;	        // 错误信息，如果成功为success
    };

    struct VerifyArticleReq{
        0 optional  BasicInfo                               basicInfo;          //基本信息
        1 optional  int                                     id;                 //观点id
        2 optional  int                                     status;             //-1：删除；0：观点上架；1：观点草稿；2：审核通过；3：审核不通过；4：待审核；5：下架
    };
    struct VerifyArticleRsp{
        0 optional	RET_CODE		                        ret;		        // 返回码
        1 optional	string			                        message;	        // 错误信息，如果成功为success
    };

    struct SetArticleRecommendReq{
        0 optional  BasicInfo                               basicInfo;          //基本信息
        1 optional  int                                     articleId;          //观点id
        2 optional  string                                  recommendKey;       //推荐的类型的key,index_exclusive:web首页-独家观点; article_exclusive:web读观点-独家观点; index_banner:app首页-banner; article_banner:app观点-banner
        3 optional  int                                     operateType;        // 操作类型：1：推荐；0：取消推荐
        4 optional  string                                  description;        // 推荐描述
        5 optional  string                                  picture;            //推荐的图片地址

    };
    struct SetArticleRecommendRsp{
        0 optional	RET_CODE		                        ret;		        // 返回码
        1 optional	string			                        message;	        // 错误信息，如果成功为success
    };

    struct OperateArticleReq{
        0 optional  BasicInfo                               basicInfo;          //基本信息
        1 optional  ArticleBasicInfo	                    articleBasic;	    //观点基础信息
        2 optional  vector<string>                          editProps;	        // 修改字段列表
    };

    struct OperateArticleRsp{
        0 optional	RET_CODE		                        ret;		        // 返回码
        1 optional	string			                        message;	        // 错误信息，如果成功为success
    };

    struct GetRecommendListReq{
        0 optional  BasicInfo                               basicInfo;          //基本信息
        1 optional  int                                     direction;          //按推荐的时间排序，0：新到旧，1：从旧到新（默认是0）
        2 optional  string                                  type;               //区分是何种运营位
        3 optional  int                                     offset;             //偏移量, 默认为0
        4 optional  int                                     size;               //获取的长度
		5 optional  string                                  upName;             //用户名
    };
    struct GetRecommendListRsp{
        0 optional	RET_CODE		                         ret;		        // 返回码
        1 optional	string			                         message;	        // 错误信息，如果成功为success
        2 optional  vector<GetRecommendBasic>	             list;              // 观点信息列表
    };

    struct GetHotArticleListReq{
        0 optional  BasicInfo                               basicInfo;          //基本信息
    };

    struct GetHotArticleListRsp{
        0 optional	RET_CODE		                         ret;		        // 返回码
        1 optional	string			                         message;	        // 错误信息，如果成功为success
        2 optional  vector<GetRecommendBasic>	             list;              // 观点信息列表
    };

    struct GetViewDetailReq{
        0 optional  BasicInfo                                 basicInfo;         //基本信息
        1 optional  int                                       articleId;         //观点id
        2 optional  string                                    upName;            //查看详细观点的用户id
        3 optional  bool                                      isUserGet;         // true:为用户获取，阅读数加一，false:投顾获取不更新阅读数,默认为false
    };
    struct GetViewDetailRsp{
        0 optional	RET_CODE		                          ret;		          //返回码
        1 optional	string			                          message;	          //错误信息，如果成功为success
        2 optional  ArticleDetailExtra                        data;               //观点的详细信息数据
    };

    struct OperateExtra{
        0 optional  string                                     name;               //需要更新的额外信息的属性名称，例如,阅读数:readCount；评论数:commentCount；点赞数favorites ; saleCount卖出数;rewardCount打赏数;  其中点赞数和卖出数，同时更新观点的附加信息和用户行为信息
        1 optional  int                                        operateType;        //操作类型，1：加；2：减；3：重置
        2 optional  int                                        count;              //用于加减重置的数字
    };

    struct UpdateArticleExtraReq{
        0 optional  BasicInfo                                   basicInfo;         //基本信息
        1 optional  int                                         articleId;         //观点id
        2 optional  string                                      upName;            //查看详细观点的用户id,用于获取附加信息
        3 optional	vector<OperateExtra>	                    extras;            // 额外信息列表
    };
    struct UpdateArticleExtraRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
    };

    struct GetTgArticleListByStatusReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  string                                      tgUpName;           //投顾的id
        2 optional  int                                         status;             //更具的状态,0:上架(默认),1:草稿,4:发布成功待审核,3:审核不通过,5:观点下架,-2:获取所有(不包括删除了的和草稿)观点
        3 optional  int                                         direction;          //按创建时间排序，0：新到旧，1：从旧到新（默认是0）
        4 optional  int                                         offset;             //偏移量, 默认为0
        5 optional  int                                         size;               //获取的长度
        6 optional  int                                         referId;            //参考观点的ID(选传)
        7 optional  string                                      recommendKey;      // 推荐key,高手主页和首页信息流2-6条'top',首页顶部'banner'
    };
    struct GetTgArticleListByStatusRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetArticleList	                            data;               // 观点信息和总数
    };

    struct GetArticleListByTimeReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         referId;            //参考观点的ID(选传)
        2 optional  int                                         offset;             //偏移量
        3 optional  int                                         size;               //大小
        4 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
    };
    struct GetArticleListByTimeRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetArticleList	                            data;               //返回的数据,观点列表和总数

    };

    struct SearchArticlesReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         referId;            //参考观点的ID(选传)
        2 optional  int                                         offset;             //偏移量
        3 optional  int                                         size;               //大小
        4 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        5 optional	string			                            keyWord;	        // 查询关键字
    };
    struct SearchArticlesRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetArticleList	                            data;               //返回的数据,观点列表和总数
    };

    struct GetArticleListByIdReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  vector<int>                                 articleIds;         //观点id
    };

    struct GetArticleListByIdRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	vector<ArticleDetailExtra>	                data;               //返回的数据,观点列表和总数
    };
        
    struct GetViewCountsReq{
        0 optional  BasicInfo                                   basicInfo;           //基本信息
        1 optional  string                                      tgUpName;            //投顾的id
    };
    struct GetViewCountsRsp{
        0 optional	RET_CODE		                            ret;		         // 返回码
        1 optional	string			                            message;	         // 错误信息，如果成功，则为空
        2 optional	int	                                        allCount;            //总数量(除去草稿和删除的数量)
        3 optional	int	                                        freeCount;           //免费笔记的总数
        4 optional	int	                                        chargeCount;         //收费笔记的总数
        5 optional	int	                                        allEarnings;         //总收益
    };

    struct GetManageArticleListReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        2 optional  int                                         offset;             // 偏移量, 默认为0
        3 optional  int                                         size;               // 长度
        4 optional  int                                         referId;            //参考观点的ID(选传)
    };
    struct GetManageArticleListRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetArticleList	                            data;               //返回的数据,观点列表和总数
    };
    struct SearchManageArticleListReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        2 optional  int                                         offset;             // 偏移量, 默认为0
        3 optional  int                                         size;               // 长度，如果为-1则获取所有的数据
        4 optional  string                                      keyWord;            //根据投顾id搜索
        5 optional  int                                         referId;            //参考观点的ID(选传)
    };
    struct SearchManageArticleListRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetArticleList	                            data;               //返回的数据,观点列表和总数
    };

    struct GetOperateAllArticleListReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        2 optional  int                                         offset;             // 偏移量, 默认为0
        3 optional  int                                         size;               // 长度
        4 optional  string                                      recommendKey;       // 推荐的类型的key,index_exclusive:web首页-独家观点; article_exclusive:web读观点-独家观点; index_banner:app首页-banner; article_banner:app观点-banner
        5 optional  int                                         referId;            //参考观点的ID(选传)
    };
    struct GetOperateAllArticleListRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetRecommendBasicList	                    data;               //返回的数据,观点列表和总数
    };

    struct SearchOperateArticleListReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        2 optional  int                                         offset;             // 偏移量, 默认为0
        3 optional  int                                         size;               // 长度
        4 optional  string                                      recommendKey;       // 推荐的类型的key,index_exclusive:web首页-独家观点; article_exclusive:web读观点-独家观点; index_banner:app首页-banner; article_banner:app观点-banner
        5 optional  int                                         referId;            //参考观点的ID(选传)
        6 optional  string                                      keyWord;            //根据投顾id搜索

    };
    struct SearchOperateArticleListRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetRecommendBasicList	                    data;               //返回的数据,观点列表和总数
    };
    struct GetViewsByKeyWordReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        2 optional  int                                         offset;             // 偏移量, 默认为0
        3 optional  int                                         size;               // 长度
        4 optional  string                                      keyWord;            //关键字搜索
        5 optional  int                                         referId;            //参考观点的ID(选传)
    };
    struct GetViewsByKeyWordRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetArticleList	                            data;               //返回的数据,观点列表和总数
    };
    struct GetMyArticleReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        2 optional  int                                         offset;             // 偏移量, 默认为0
        3 optional  int                                         size;               // 长度
        4 optional  string                                      upName;             //用户id
        5 optional  int                                         referId;            //参考观点的ID(选传)
    };
    struct GetMyArticleRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetArticleList	                            data;               //返回的数据,观点列表和总数
    };
    struct GetTgRecentArticleReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        2 optional  int                                         offset;             // 偏移量, 默认为0
        3 optional  int                                         size;               // 长度
        4 optional  int                                         referId;            //参考观点的ID(选传)
        5 optional  string                                      tgUpName;           //投顾的id
        6 optional  string                                      startTime;          //开始时间（可选，默认一个月前）
    };
    struct GetTgRecentArticleRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetArticleList	                            data;               //返回的数据,观点列表和总数
    };
    struct GetTgArticleCountBatchReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional	vector<string>	                            upNames;            //返回的数据,观点列表和总数
    };
    struct GetTgArticleCountBatchRsp{
        0 optional	RET_CODE		                            ret;		        //返回码
        1 optional	string			                            message;	        //错误信息，如果成功为success
        2 optional	vector<map<string,int>>	                    list;               //返回的数据,观点列表和总数
    };

    struct GetArticleRewardList{
        0 optional  int                                         userId;             //用户id
        1 optional  string                                      userName;           //用户名
        2 optional  string                                      upName;             //up
        3 optional  string                                      avatar;             //头像
    };
    struct GetArticleReward{
        0 optional  vector<GetArticleRewardList>	            list;               //用户信息列表
        1 optional  int	                                        total;
    };
    struct GetArticleRewardReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional	int	                                        articleId;          //返回的数据,观点列表和总数
    };

    struct GetArticleRewardRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetArticleReward	                        data;               //返回的数据,观点列表和总数
    };

    struct GetTopNewsReq
    {
        0 optional    BasicInfo                          basicInfo;         // 基本信息
    };

    struct TopNews
    {
        0 optional    int                                productId;
        1 optional    int                                productType;
        2 optional    string                             feedIndex;
        3 optional    string                             title;
        4 optional    string                             updateTime;
    };

    struct TopNewsData
    {
        0 optional    vector<TopNews>                    morningTopNews;     //优投顾早班车
        1 optional    vector<TopNews>                    nightTopNews;       //优投顾晚间干货
    };

    struct GetTopNewsRsp
    {
        0 optional  RET_CODE                              ret;          // 返回码
        1 optional  string                                message;       // 错误信息
        2 optional  TopNewsData                           data;
    };

    struct QueryArticleStatisticReq
    {
        0 optional    BasicInfo                    basicInfo;           // 基本信息
        1 optional    int                          direction;           // 方向，0：从新到旧，1：从旧到新
        2 optional    string                       referId;             // 参考id
        3 optional    int                          offset;              // 偏移
        4 optional    int                          size;                // 大小
        5 optional    string                       keyWord;             // 查询条件
        6 optional    string                       startTime;           // 开始时间
        7 optional    string                       endTime;             // 结束时间
        8 optional    string                       sortBy;              // 排序方向 asc desc
        9 optional    string                       sortKey;             // 排序字段
    };

    struct ArticleStatistic
    {
        0 optional  string                           tgUpName;                // 用户名
        1 optional  int                              total;                   // 总数
        2 optional  int                              readCount;               // 阅读数
        3 optional  int                              favCount;                // 点赞数
        4 optional  int                              rewardCount;             // 打赏
        5 optional  int                              shareCount;              // 分享
        6 optional  int                              commentCount;            // 评论数
        7 optional  int                              avgReadCount;            // 平均阅读数
        8 optional  string                           realName;                //投顾真实姓名
        9 optional  string                           nickName;                //投顾昵称
    };

    struct ArticleStatisticRsp
    {
        0 optional  int                              total;       // 总数
        1 optional  int                              status;       // 是否有更多的微博动态标识，0：还有微博动态；1：没有更多微博动态
        2 optional  vector<ArticleStatistic>         list;        // 列表
    };

    struct QueryArticleStatisticRsp
    {
        0 optional  RET_CODE                       ret;          // 返回码
        1 optional  string                         message;       // 错误信息
        2 optional  ArticleStatisticRsp            data;          // 数据
    };

    struct SendWorkWeChatMessageByArticleReq
    {
        0 optional    BasicInfo                    basicInfo;           // 基本信息
        1 optional    string                       noteTitle;           // 观点标题
        2 optional    string                       content;             // 观点内容
        3 optional    string                       marketingWord;       // 观点付费内容
        4 optional    WorkWeChatInfo               workWeChatInfo;      // 企业号信息
    };

    struct SendWorkWeChatMessageByArticleRsp
    {
        0 optional  RET_CODE                       ret;          // 返回码
        1 optional  string                         message;       // 错误信息
    };

///////////////////////////////////// 公共服务相关的结构 /////////////////////////////////
    struct Extra
    {
        0 optional     string                 name;                 //属性名，例如：readCount、showCount
        1 optional     int                    operateType;          //操作类型，1：加；2：减；3：重置；4：设置属性对应的内容
        2 optional     int                    count;                //数量
        3 optional     string                 val;                  //只有operateType为4时才有效
    };

    struct UpdateExtraReq
    {
        0 optional     string                 businessId;            //业务Id，例如：观点viewpoint,微博tweet
        1 optional     int                    type;                  //产品类型，1：笔记；2：直播；3：问答；4：组合；5：牛圈；6：投顾；7：锦囊；8：活动产品包；9：长锦囊；10：视频；11：微博
        2 optional     string                 id;                    //产品id
        3 optional     vector<Extra>          extras;                //附加信息
        4 optional     string                 upName;                //用户名
    };

    struct UpdateExtraRsp
    {
        0 optional	   RET_CODE			       ret;		             //返回码
        1 optional	   string			       message;	             //错误信息，如果成功，则为空
    };

    struct GetExtraBatchReq
    {
        0 optional     string                  businessId;            //业务Id，例如：观点viewpoint,微博tweet
        1 optional     vector<string>          ids;                   //产品id
        2 optional     string                  upName;                //用户名
    };

    struct GetExtraBatchData
    {
        0 optional      string                  id;                     //产品id
        1 optional      vector<Extra>		    extras;	             //附加信息
    };

    struct GetExtraBatchRsp
    {
        0 optional      RET_CODE			       ret;		             //返回码
        1 optional	    string			           message;	             //错误信息，如果成功，则为空
        2 optional	    vector<GetExtraBatchData>  data;	             //附加信息
    };

    struct SetHotRecommendReq
    {
        0 optional      BasicInfo                   basicInfo;               //基础信息
        1 optional      string                      recommendKey;            //推荐key
        2 optional      HotRecommend                data;                    //推荐数据
        3 optional      int                         status;                  //状态，1：推荐，2：取消推荐
    };

    struct SetHotRecommendRsp
    {
        0 optional      RET_CODE			        ret;		             //返回码
        1 optional	    string			            message;	             //错误信息，如果成功，则为空
    };

    struct GetHotRecommendReq
    {
        0 optional      BasicInfo                   basicInfo;               //基础信息
        1 optional      string                      recommendKey;            //推荐key
        2 optional      int                         direction;               //按推荐的时间排序，0：新到旧，1：从旧到新（默认是0）
        3 optional      int                         offset;                  //偏移量, 默认为0
        4 optional      int                         size;                    //获取的长度
    };

    struct GetHotRecommendRsp
    {
        0 optional      RET_CODE			        ret;		             //返回码
        1 optional	    string			            message;	             //错误信息，如果成功，则为空
        2 optional	    vector<HotRecommend>        list;	                 //推荐的列表
    };
///////////////////////////////////// CRM终端配置相关的结构 /////////////////////////////////
    struct getAppIconMoreReq
    {
        0 optional int  iType; //图标类型 0：优品股票通   1：优投顾
    };
    struct IconInfo
    {
        0 optional  string              sLinkUrl;            //ICON链接
        1 optional  string              sImgUrl;             //图片链接
        2 optional  string              sName;               //ICON名称
        3 optional  string              sMarkUrl;            //角标图片地址
        4 optional  string              sDescription;        //描述
    };
    struct AppIndexIconRsp
    {
        0 require   int             	 iRet;
        1 require   string              sMsg;
        2 optional  vector<IconInfo>    stIconInfo;         //ICON信息
    };

///////////////////////////////////// 五星股票池相关的结构 /////////////////////////////////
    struct GetFiveStarMonitorReq
    {
        0 optional   string                                       upName;
    };

    struct FiveStarMonitor
    {
        0 optional   double                                        High;
        1 optional   double                                        RiseAfterPick;
        2 optional   double                                        RiseMax;
        3 optional   double                                        RiseNow;
        4 optional   double                                        highAfterSignal;
        5 optional   double                                        rise_max;
        6 optional   int                                           signalContinue;
        7 optional   double                                        signalPrice;
        8 optional   int                                           signalStar;
        9 optional   int                                           signalStat;
        10 optional   double                                       signalTime;

    };
    struct GetFiveStarMonitorData
    {
        0 optional   int                                           shtMarket;
        1 optional   string                                        sCode;
        2 optional   int                                           iDate;
        3 optional   int                                           iTime;
        4 optional   string                                        sName;
        5 optional   FiveStarMonitor                               mField;

    };

    struct GetFiveStarMonitorRsp
    {
        0 optional   int             	                             ret;
        1 optional   vector<GetFiveStarMonitorData>             	 data;
        2 optional   int                                             buyStatus=0;      // 是否有权限，1：是；0：否
    };

///////////////////////////////////// 涨停尖兵相关的结构 /////////////////////////////////
    struct GetLimitUpPioneerReq
    {
        0 optional   string                                         upName;
    };

    struct LimitUpPioneer
    {
        0 optional   int                                           CC;
        1 optional   int                                           CCTime;
        2 optional   double                                        PriceNow;
        3 optional   double                                        RiseAfterPick;
        4 optional   double                                        RiseNow;
        5 optional   int                                           XN;
        6 optional   int                                           XNTime;
        7 optional   int                                           ZT;
        8 optional   int                                           ZTTime;
        9 optional   int                                           crzf;
        10 optional   double                                       price;
        11 optional   int                                          time;
        12 optional   int                                          wrzf;
    };
    struct GetLimitUpPioneerData
    {
        0 optional   int                                           shtMarket;
        1 optional   string                                        sCode;
        2 optional   int                                           iDate;
        3 optional   int                                           iTime;
        4 optional   string                                        sName;
        5 optional   double                                        fZTPrice;
        6 optional   double                                        fDTPrice;
        7 optional   LimitUpPioneer                                mField;
    };


    struct GetLimitUpPioneerRsp
    {
        0 optional   int             	                             ret;
        1 optional   string             	                         msg;
        2 optional   vector<GetLimitUpPioneerData>             	     data;
        3 optional   int                                             buyStatus=0;      // 是否有权限，1：是；0：否
    };

///////////////////////////////////// 键盘精灵相关的结构 /////////////////////////////////
    struct GetSuggestionReq
    {
        0 optional   string                                          sInput;
        1 optional   vector<int>                                     markets;
        2 optional   int                                             type;
        3 optional   int                                             iMaxNum;
        4 optional   int                                             getJG;

    };
    struct GetSuggestionData
    {
        0 optional   int                                           shtMarket;
        1 optional   string                                        sCode;
        2 optional   string                                        sName;
    };

    struct GetSuggestionRsp
    {
        0 optional   int             	                             ret;
        1 optional   string             	                         msg;
        2 optional   vector<GetSuggestionData>             	         vStkSuggests;
    };

///////////////////////////////////// 诊股记录相关的结构 /////////////////////////////////
    struct GetDiagnosisRecordReq
    {
        0 optional   string                                          channel;
        1 optional   int                                             iWantNum;
    };
    struct GetDiagnosisRecordData
    {
        0 optional   int                                           market;
        1 optional   string                                        stockCode;
        2 optional   string                                        stockName;
        3 optional   string                                        recordTime;
        4 optional   string                                        userName;
    };

    struct GetDiagnosisRecordRsp
    {
        0 optional   int             	                             ret;
        1 optional   string             	                         msg;
        2 optional   vector<GetDiagnosisRecordData>             	 diagnosisRecordList;
    };

///////////////////////////////////// 自选股相关的结构 /////////////////////////////////
    struct GetMyStockReq
    {
        0 optional   BasicInfo                                       basicInfo;          //基本信息
        1 optional   string                                          upName;
    };

    struct GetMyStockRsp
    {
        0 optional   int             	                             ret;
        1 optional   string             	                         message;
        2 optional   vector<GetSuggestionData>             	         data;
    };

    struct AddMyStockReq
    {
         0 optional   BasicInfo                                       basicInfo;          //基本信息
         1 optional   string                                          upName;             //用户名
         2 optional   string                                          market;             //市场
         3 optional   string                                          stockCode;          //股票代码
         4 optional   string                                          position;           //位置
         5 optional   int                                             groupId;            //自选分组
         6 optional   string                                          xua;                //终端xua
         7 optional   string                                          gUid;               //终端guid
    };

    struct AddMyStockRsp
    {
        0 optional   int             	                             ret;
        1 optional   string             	                         message;
    };

    struct IsFollowWxServiceReq
    {
        0 optional   BasicInfo                                       basicInfo;          //基本信息
        1 optional   string                                          upName;
    };

    struct IsFollowWxServiceRsp
    {
        0 optional   int             	                             ret;
        1 optional   string             	                         message;
        2 optional   int                                             data;                //1:已经关注 0:未关注
    };

    struct QueryPickStockReq
    {
        0 optional   BasicInfo                                       basicInfo;          //基本信息
        1 optional   string                                          upName;
    };

    struct PickStock
    {
        0 optional   int                                           shtMarket;       //市场代码
        1 optional   string                                        sCode;           //股票代码
        2 optional   string                                        sName;           //股票名称
        3 optional   double                                        price;           //股价
        4 optional   double                                        change;          //涨跌额
        5 optional   double                                        changeRate;      //涨跌幅度
        6 optional   string                                        time;            //入选时间
    };

    struct QueryPickStockData
    {
        0 optional   vector<PickStock>                              ContinuousBuyStock;  //大单持续买入
        1 optional   vector<PickStock>                              LowerPriceStock;     //低位扫货
        2 optional   int                                            buyStatus=0;         //是否有权限，1：是；0：否
        3 optional   WeChatInfo                                     weChatInfo;          //微信号
    };

    struct QueryPickStockRsp
    {
        0 optional   int             	                             ret;
        1 optional   string             	                         message;
        2 optional   QueryPickStockData                              data;
    };

    ///////////////////////////////////// 引用消息相关的结构 /////////////////////////////////
    struct Cite
    {
        0 optional string                           id;               // 引用消息id
        1 optional string                           userId;           // 投顾名
        2 optional string                           content;          // 内容
        3 optional int                              citedType;        // 被引用内容类型，1：文章，11：观点
        4 optional string                           citedId;          // 被引用内容id，例如：文章id
        5 optional string                           citedTitle;       // 被引用内容标题
        6 optional vector<string>                   citedImg;         //  被引用内容的图片
        7 optional int                              status=0;         // 状态，0：正常状态；-1：删除；1：草稿；2；待审核;3：审核不通过；4；下架
        8 optional int                              isPush=0;         // 推送状态，0：粉丝推送；1：全员推送
        9 optional string                           createTime;
        10 optional string                           updateTime;
        11 optional int                             type=1;             // 价格类型，默认免费，1：免费，2：付费：3：小额付费
        12 optional double                          cost=0;             // 价格，默认免费
        13 optional string                          marketing;          // 营销语
        14 optional string                          tagType;            // tag类型,1:短线操作, 2:价值投资, 3:内容精研, 4:稳健波段,5:特供布局, 6:利好公告, 21:盘前早报, 22:开盘速递, 23:主力点金, 24:热门事件, 25:A股收评, 26:今日复盘, 27:研报淘金, 28:热点聚焦, 29:免费利好公告
        15 optional vector<Stock>                   relateStock;        // 关联股票
        16 optional string                          coverImg;           // 封面图片
    };

    struct PublishCiteReq
    {
       0 optional BasicInfo                        basicInfo;     // 基本信息
       1 optional Cite                            cite;      // 引用消息
    };

    struct PublishCiteRsp{
         0 optional	RET_CODE		                ret;		  // 返回码
         1 optional	string			                message;	  // 错误信息，如果成功为success
         2 optional Cite                           data;         // 引用消息id
    };

    struct PushCiteReq
    {
       0 optional BasicInfo                        basicInfo;     // 基本信息
       1 optional string                              id;         // 引用消息id
    };

    struct PushCiteRsp{
       0 optional	RET_CODE		                ret;		  // 返回码
       1 optional	string			                message;	  // 错误信息，如果成功为success
    };

    struct CiteDetail
    {
        0 optional TgDetail                         tgDetail;                 // 投顾详情
        1 optional Cite                             cite;                 // 引用消息内容
        2 optional int                              readCount;             // 阅读
        3 optional int                              favCount;              // 点赞
        4 optional int                              shareCount;            // 分享
        5 optional int                              commentCount;            // 评论
        6 optional int                              rewardCount;           // 打赏
        7 optional int                              favStatus=0;      // 是否点赞，1：是；0：否
        8 optional int                              buyStatus=0;      // 是否有权限，1：是；0：否
    };

    struct CiteListRsp
    {
        0 optional  int                              total;       // 总数
        1 optional  int                              status;       // 是否有更多的引用消息标识，0：还有引用消息；1：没有更多引用消息
        2 optional  vector<CiteDetail>               list;        // 列表
    };

    struct GetTgCitesReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    int                          direction;          // 方向，0：从新到旧，1：从旧到新
        2 optional    string                       referId;         // 参考id
        3 optional    int                          offset;         // 偏移
        4 optional    int                          size;           // 大小
        5 optional    string                       userId;            // 投顾名
        6 optional    int                          type=0;         // 0：已上架;1:草稿；2:已发布
    };

    struct GetTgCitesRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  CiteListRsp                    data;          // 数据
    };

    struct GetCitesByIdReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    vector<string>               ids;            // 动态ids
        2 optional    int                          type=0;         // 0：查看详情；1：列表
    };

    struct GetCitesByIdRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  vector<CiteDetail>              data;        // 列表
    };

    struct UpdateCiteStatusReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       id;           // 引用消息id
        2 optional    int                          status=0;            // 引用消息状态，0：正常状态；-1：删除；1：草稿；2；待审核;3：审核不通过；4；下架
    };

    struct UpdateCiteStatusRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
    };

    struct UpdateCiteExtraReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       id;           // 引用消息id
        2 optional    int                          operateType;           // 更新类型
        3 optional    string                       name;            // 更新字段
        4 optional    int                          count;         // 更新值
    };

    struct UpdateCiteExtraRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  int                             data;          // 数据
    };

    struct SearchCitesReq
    {
        0 optional    BasicInfo                    basicInfo;           // 基本信息
        1 optional    int                          direction;           // 方向，0：从新到旧，1：从旧到新
        2 optional    string                       referId;             // 参考id
        3 optional    int                          offset;              // 偏移
        4 optional    int                          size;                // 大小
        5 optional    string                       recommendKey;            // 推荐key
        6 optional    string                       keyWord;            // 查询条件
    };

    struct SearchCitesRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  CiteListRsp                    data;          // 数据
    };

    struct QueryNewStockReq
    {
        0 optional    BasicInfo                    basicInfo;           // 基本信息
        1 optional    string                       upName;
    };

    struct NewStock
    {
        0 optional    int                           shtMarket;
        1 optional    string                        sCode;
        2 optional    string                        sName;
        3 optional    string                        desc;             // 新股类型描述
    };

    struct QueryNewStockData
    {
        0 optional    vector<NewStock>             list;
    };

    struct QueryNewStockRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  QueryNewStockData               data;
    };

    struct QueryStopAndResumeStockReq
    {
        0 optional    BasicInfo                    basicInfo;           // 基本信息
        1 optional    string                       upName;
    };

    struct StopAndResumeStock
    {
        0 optional    int                           shtMarket;
        1 optional    string                        sCode;
        2 optional    string                        sName;
        3 optional    string                        desc;             // 停牌或复牌描述
    };

    struct QueryStopAndResumeStockData
    {
        0 optional    vector<StopAndResumeStock>   list;
    };

    struct QueryStopAndResumeStockRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  QueryStopAndResumeStockData     data;
    };

    struct GetUserStockMsgReq
    {
        0 optional    BasicInfo                    basicInfo;           // 基本信息
        1 optional    string                       upName;
    };

	struct StockInfo
	{
		0 optional int 	    iMarket;    //股票市场
		1 optional string   sGPCode;    //股票代码
        2 optional string	sGPName;    //股票名称
        3 optional int      iGroupId;        // 自选股分组
	};

	struct StockMsgInfo
	{
		0 optional int 	        eMoudle;//大类
		1 optional long		    lMsgId; //消息ID
		2 optional string   	sMTitle;//主标题
		3 optional string   	sATitle;//副标题
		4 optional string   	sDigest;//摘要
		5 optional string   	sUrl; //跳转地址
		6 optional unsigned int iTime; //消息发生的时间
		7 optional string       sAnaly;//解读
		8 optional StockInfo    stGPInfo;//消息关联的股票代码
		9 optional int          eSubModule;//消息子类
		10 optional string		ext = "";//扩展字段
	};

    struct UserStockMsg
    {
        1 optional long lDate;                  // 日期
        2 optional StockInfo stGPInfo;          // 股票信息
        3 optional vector<StockMsgInfo> vMsgs;
    };

    struct UserStockMsgRsp
    {
        0 optional  vector<UserStockMsg>            list;
        1 optional  int                             isChange=0;//是否有更新
    };

    struct GetUserStockMsgRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  UserStockMsgRsp                 data;
    };

    struct GetPickSuggestionReq
    {
        0 optional    BasicInfo                    basicInfo;           // 基本信息
        1 optional    string                       upName;
        2 optional    int                          noRandom;            //是否不随机,1:不随机，0：随机

    };

    struct PickSuggestionData
    {
        0 optional   int                                           shtMarket;
        1 optional   string                                        sCode;
        2 optional   string                                        sName;
        3 optional   string                                        RiseNow;
        4 optional   int                                           pickType;// 推荐类型，1:出现买点信号;2:自选热门股;3:有上涨潜力
    };

    struct GetPickSuggestionRsp
    {
        0 optional   int             	                             ret;
        1 optional   string             	                         msg;
        2 optional   vector<PickSuggestionData>             	     data;
    };

    ///////////////////////////////////// 金股池相关的结构 /////////////////////////////////
    struct AdjustStockReq
    {
        0 optional  BasicInfo                       basicInfo;              // 基本信息
        1 optional  string                          business="stg_tg";      // 业务
        2 optional  string                          bId;                    // 业务对应的id
        3 optional	vector<GoldStockRecord>		    stockRecords;	        // 调入、调出股票记录
        4 optional  string                          tgUpName;               // 投顾用户名
    };

    struct AdjustStockRsp
    {
        0 optional	RET_CODE			            ret;		            // 返回码
        1 optional	string			                message;	            // 返回信息
        2 optional	vector<GoldStockRecord>		    success;	            // 调整成功股票记录
        3 optional	vector<GoldStockRecord>		    failure;	            // 调整失败股票记录
    };

    struct GetGoldStockReq
    {
        0 optional  BasicInfo                       basicInfo;              // 基本信息
        1 optional  string                          business="stg_tg";      // 业务
        2 optional  string                          bId;                    // 业务对应的id
        3 optional  int                             goldStockId;            // 版本id
        4 optional  string                          tgUpName;               // 投顾用户名
        5 optional  string                          upName;                 // 用户名
    };

    struct GoldStockData
    {
        0 optional	vector<GoldStockRecord>	        list;	                // 列表
        1 optional  int                             buyStatus=0;            // 是否有权限，1：是；0：否
        2 optional  int                             productId;              // 产品id
        3 optional  int                             productType;            // 产品类型
        4 optional  string                          styleIntro;             // 风格介绍
        5 optional  string                          oneMonthCost;           // 一个月的价格
        6 optional  string                          endTime;                // 到期时间
    };

    struct GetGoldStockRsp
    {
        0 optional	RET_CODE			            ret;		       // 返回码
        1 optional	string			                message;	       // 返回信息
        2 optional  GoldStockData                   data;
    };

    struct GetGoldStockRecordReq
    {
        0 optional  BasicInfo                       basicInfo;              // 基本信息
        1 optional  int                             offset = 0;             // 偏移
        2 optional  int                             size;                   // 大小
        3 optional  string                          business="stg_tg";      // 业务
        4 optional  string                          bId;                    // 业务对应的id
        5 optional  int                             goldStockId;            // 版本id
        6 optional  string                          tgUpName;               // 投顾用户名
    };

    struct GoldStockRecordRsp
    {
        0 optional	int			                    total;	   // 总数
        1 optional	vector<GoldStockRecord>	        list;	       // 列表
    };

    struct GetGoldStockRecordRsp
    {
        0 optional	RET_CODE			            ret;		       // 返回码
        1 optional	string			                message;	       // 返回信息
        2 optional  GoldStockRecordRsp              data;              // 列表及总数
    };


    struct SearchStockByKeyReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	string                        keyWord;	        // 关键字
    };

    struct SearchStockByKeyRsp
    {
        0 optional	RET_CODE			            ret;		       // 返回码
        1 optional	string			                message;	       // 返回信息
        2 optional	vector<StockInfo>	            data;	           // 模块列表
    };

    struct CreateGoldStockReq
    {
        0 optional  BasicInfo                       basicInfo;              // 基本信息
        1 optional  string                          business="stg_tg";      // 业务
        2 optional  string                          tgUpName;               // 投顾用户名
        3 optional  vector<DisCountConfig>          config;                     // 折扣及价格配置
    };

    struct CreateGoldStockRsp
    {
        0 optional  RET_CODE                         ret;          // 返回码
        1 optional  string                           message;       // 错误信息
    };

    struct GetGoldStockBusinessReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       tgUpName;          // 投顾用户名
        2 optional    string                       business;          // 业务
    };

    struct GoldStockBusiness
    {
        0 optional    string                       tgUpName;         // 投顾用户名
        1 optional    string                       business;         // 业务
        2 optional    int                          bId;              // 业务id
        3 optional    string                       bName;            // 业务名称
        4 optional    string                       bNameIntro;       // 业务介绍
    };

    struct GetGoldStockBusinessRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
        2 optional  GoldStockBusiness               data;          // 数据

    };
///////////////////////////////////// 课程相关的结构 /////////////////////////////////
    struct CourseInfo
    {
        0 optional  string                                      id;           // 课程id
        1 optional  string                                      tgUpName;     // 投顾用户名
        2 optional  string                                      title;        // 课程名称
        3 optional  string                                      intro;        // 课程简介
        4 optional  string                                      tgIntro;      // 老师简介
        5 optional  int                                         costType;     // 收费类型 0为免费，1为收费
        6 optional  int                                         cost;         // 收费价格
        7 optional  string                                      coverImg;     // 封面图片
        8 optional  int                                         status;       // 状态 0：正常状态；-1：删除；1：草稿；2；待审核;3：审核不通过；4；下架 5；已结束
        9 optional  int                                         courseNum;    // 课程数
        10 optional string                                      createTime;
        11 optional string                                      updateTime;
        12 optional int                                         courseFlag;   // 标志 0：未结束，1为已结束
        13 optional string                                      courseTags;   // 课程标签
        14 optional string                                      description;  // 一句话描述
        15 optional string                                      courseImg;    // 详情图
        16 optional int                                         oldPrice;     // 原价
        17 optional string                                      extra;        // 附加属性
        18 optional int                                         isRecommend;  //是否推荐，0:未推荐；1:已经推荐
        19 optional string                                      courseDetailUrl;  //课程详情H5的url
        20 optional vector<string>                              userRightAvatars;  //购买过课程头像
        21 optional int                                         rightType;  //权限类型 0:按课程授权 1:按购买时段内章节授权
    };

    struct CreateCourseReq
    {
        0 optional  BasicInfo                                   basicInfo;    // 基础信息
        1 optional  CourseInfo                                  courseInfo;   // 课程信息
        2 optional  CriterionOrderInfo                          criterionOrderInfo;        //  标准订单信息
    };

    struct CreateCourseRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;      // 错误信息，如果成功，则为空
    };

    struct GetTgCoursesReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  int                                         direction;         // 方向，0：从新到旧，1：从旧到新
        2 optional  string                                      referId;           // 参考id
        3 optional  int                                         offset;            // 偏移
        4 optional  int                                         size;              // 大小
        5 optional  string                                      tgUpName;          // 投顾名
		7 optional  int                                         type=0;            // 0: 已上架;1：草稿;2：已发布
		8 optional  string                                      recommendKey;      // 推荐key
    };

    struct CoursesRsp
    {
        0 optional  int                                         total;         // 总数
        1 optional  int                                         status;        // 是否有更多的视频解盘标识，0：还有视频解盘；1：没有更多视频解盘
        2 optional  vector<CourseInfo>                          list;          // 列表
    };

    struct GetTgCoursesRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;       // 错误信息
        2 optional  CoursesRsp                                  data;          // 数据
    };

    struct CourseContentInfo
    {
        0 optional  string                                      id;            // 课程内容id
        1 optional  string                                      title;         // 标题
        2 optional  int                                         costType;      // 收费类型0为免费，1为收费
        3 optional  int                                         cost;          // 收费价格
        4 optional  int                                         contentType;   // 内容类型 1为专栏，2为视频，3为音频
        5 optional  string                                      content;       // 专栏内容
        6 optional  string                                      summary;       // 专栏摘要
        7 optional  string                                      marketingWord; // 专栏营销语
        8 optional  string                                      coverImg;      // 封面图片
        9 optional  string                                      videoUrl;      // 视频地址
        10 optional string                                      audioUrl;      // 音频地址
        11 optional string                                      courseId;      // 课程Id
        12 optional string                                      createTime;
        13 optional string                                      updateTime;
        14 optional int                                         status;        // 0已发布 1为草稿 -1为删除
        15 optional int                                         index;         // 课程序号
        16 optional string                                      tgUpName;      // 投顾用户名
        17 optional string                                      extra;         // 附加信息
        18 optional  int                                        buyStatus;           // 是否有权限，1：是；0：否
        19 optional  int                                        buyType;           // 是否章节购买，1：是；0：否
    };

    struct CreateCourseContentReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  CourseContentInfo                           courseContentInfo; // 课程内容信息
        2 optional  CriterionOrderInfo                          criterionOrderInfo;        //  标准订单信息
    };

    struct CreateCourseContentRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;       // 错误信息
    };

    struct GetCourseContentsReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  int                                         direction;         // 方向，0：从新到旧，1：从旧到新
        3 optional  int                                         offset;            // 偏移
        4 optional  int                                         size;              // 大小
        6 optional  string                                      courseId;          // 课程id
		7 optional  int                                         type=0;            // 0: 已上架;1：草稿;2：已发布
		8 optional  string                                      upName;            // 用户名
    };

    struct CourseContentsRsp
    {
        0 optional  int                                         total;         // 总数
        1 optional  int                                         status;        // 是否有更多的课程内容标识，0：还有课程内容；1：没有更多课程内容
        2 optional  vector<CourseContentInfo>                   list;          // 列表
        3 optional  CourseInfo                                  courseInfo;    // 课程信息
        4 optional  int                                         buyStatus;           // 是否有权限，1：是；0：否
        5 optional  int                                         readCount;           // 阅读数
        6 optional  int                                         commentCount;        // 评论数
        7 optional  int                                         rewardCount;         // 打赏数
        8 optional  int                                         shareCount;          // 分享数
        9 optional  int                                         favCount;            // 点赞数
        10 optional  int                                        favStatus;           // 用户点赞状态
    };

    struct GetCourseContentsRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;       // 错误信息
        2 optional  CourseContentsRsp                           data;          // 数据
    };

    struct UpdateCourseStatusReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  string                                      id;                // 课程id
        2 optional  int                                         status;            // 0：正常状态；-1：删除；1：草稿；2；待审核;3：审核不通过；4；下架 5；已结束
    };

    struct UpdateCourseStatusRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;       // 错误信息
    };

    struct GetCourseByIdsReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  vector<string>                              ids;               // 课程ids
    };

    struct GetCourseByIdsRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;      // 错误信息
        2 optional  vector<CourseInfo>                          data;         // 数据
    };

    struct GetCourseContentByIdsReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  vector<string>                              ids;               // 课程内容ids
    };

    struct GetCourseContentByIdsRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;      // 错误信息
        2 optional  vector<CourseContentInfo>                   data;         // 数据
    };

    struct GetLatestCourseReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  int                                         direction;         // 方向，0：从新到旧，1：从旧到新
        2 optional  string                                      referId;           // 参考id
        3 optional  int                                         offset;            // 偏移
        4 optional  int                                         size;              // 大小
        5 optional  int                                         type;              // 0: 已上架;1：草稿;2：已发布
    };

    struct LatestCourseRsp
    {
        0 optional  int                                         total;         // 总数
        1 optional  int                                         status;        // 是否有更多的课程标识，0：还有课程；1：没有更多课程
        2 optional  vector<CourseInfo>                          list;          // 列表
    };

    struct GetLatestCourseRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;      // 错误信息
        2 optional  LatestCourseRsp                             data;      // 错误信息
    };

    struct SetRecommendCourseReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  string                                      recommendKey;      // 推荐标识 home_course_top 首页讲股堂推荐位
		2 optional  string                                      courseId;          // 课程id
        3 optional  int                                         operateType;       // 1：推荐；0：取消推荐
    };

    struct SetRecommendCourseRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;      // 错误信息
    };

    struct GetRecommendCourseReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  string                                      recommendKey;      // 推荐标识 home_course_top 首页讲股堂推荐位
        2 optional  int                                         direction;         // 方向，0：从新到旧，1：从旧到新
        3 optional  string                                      referId;           // 参考id
        4 optional  int                                         offset;            // 偏移
        5 optional  int                                         size;              // 大小
    };

    struct RecommendCourseRsp
    {
        0 optional  int                                         total;         // 总数
        1 optional  int                                         status;        // 是否有更多的课程标识，0：还有课程；1：没有更多课程
        2 optional  vector<CourseInfo>                          list;          // 列表
    };

    struct GetRecommendCourseRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;      // 错误信息
        2 optional  RecommendCourseRsp                          data;         // 数据
    };

    struct UpdateCourseContentStatusReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  string                                      id;                // 课程id
        2 optional  int                                         status;            // 0：正常状态；-1：删除；1：草稿；4；下架
    };

    struct UpdateCourseContentStatusRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;      // 错误信息
    };

    struct UpdateCourseFlagReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  string                                      id;                // 课程id
        2 optional  int                                         courseFlag;        // 标志 0：未结束，1为已结束

    };

    struct UpdateCourseFlagRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;      // 错误信息
    };

    struct GetCourseContentDetailReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  string                                      id;                // 课程内容id
        2 optional  string                                      upName;            // 用户名
    };

    struct CourseContentDetail
    {
        0 optional  CourseContentInfo                           courseContentInfo;   // 课程内容基本信息
        1 optional  TgDetail                                    tgDetail;            // 投顾详情
        2 optional  int                                         buyStatus;           // 是否有权限，1：是；0：否
        3 optional  int                                         readCount;           // 阅读数
        4 optional  int                                         commentCount;        // 评论数
        5 optional  int                                         rewardCount;         // 打赏数
        6 optional  int                                         shareCount;          // 分享数
        7 optional  int                                         favCount;            // 点赞数
        8 optional  int                                         favStatus;           // 用户点赞状态
        9 optional  CourseInfo                                  courseInfo;          // 课程信息
    };

    struct GetCourseContentDetailRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;      // 错误信息
        2 optional  CourseContentDetail                         data;         // 课程内容详情
    };

    struct UpdateCourseExtraReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       id;                // 课程id
        2 optional    int                          operateType;       // 更新类型
        3 optional    string                       name;              // 更新字段
        4 optional    int                          count;             // 更新值
    };

    struct UpdateCourseExtraRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
    };

    struct UpdateCourseContentExtraReq
    {
        0 optional    BasicInfo                    basicInfo;         // 基本信息
        1 optional    string                       id;                // 课程内容id
        2 optional    int                          operateType;       // 更新类型
        3 optional    string                       name;              // 更新字段
        4 optional    int                          count;             // 更新值
    };

    struct UpdateCourseContentExtraRsp
    {
        0 optional  RET_CODE                        ret;          // 返回码
        1 optional  string                          message;       // 错误信息
    };

    struct GetRecommendCourseListReq
    {
        0 optional  BasicInfo                               basicInfo;          //基本信息
        1 optional  int                                     direction;          //按推荐的时间排序，0：新到旧，1：从旧到新（默认是0）
        2 optional  string                                  recommendKey;       //推荐key home_recommend 首页推荐位
        3 optional  int                                     offset;             //偏移量, 默认为0
        4 optional  int                                     size;               //获取的长度
        5 optional  int                                     referId;            // 参考id
    };

    struct GetRecommendCourseListRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;       // 错误信息
        2 optional  vector<CourseInfo>                          list;          // 列表
    };
    struct GetMyCoursesReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  int                                         direction;         // 方向，0：从新到旧，1：从旧到新
        2 optional  string                                      referId;           // 参考id
        3 optional  int                                         offset;            // 偏移
        4 optional  int                                         size;              // 大小
        5 optional  string                                      upName;            // 用户名
    };

    struct GetMyCoursesRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;      // 错误信息
        2 optional  CoursesRsp                                  data;         // 数据
    };

    struct GetCoursesByCostTypeReq
    {
        0 optional  BasicInfo                                   basicInfo;         // 基本信息
        1 optional  int                                         direction;         // 方向，0：从新到旧，1：从旧到新
        2 optional  string                                      referId;           // 参考id
        3 optional  int                                         offset;            // 偏移
        4 optional  int                                         size;              // 大小
        5 optional  int                                         costType;          // 收费类型0为免费，1为收费
    };

    struct GetCoursesByCostTypeRsp
    {
        0 optional  RET_CODE                                    ret;          // 返回码
        1 optional  string                                      message;       // 错误信息
        2 optional  CoursesRsp                                  data;          // 数据
    };


///////////////////////////////////// 话题相关的结构 /////////////////////////////////

    struct GetTopicList{
        0 optional  int                                     total;              //数据总条数
        1 optional  vector<TopicDetailExtra>	            list;               //观点信息列表
    };

    struct SaveTopicReq{
        0 optional  BasicInfo                               basicInfo;          //基本信息
        1 optional  TopicBasicInfo	                    TopicBasic;	    //观点基础信息
    };

    struct SaveTopicRsp{
        0 optional	RET_CODE		                        ret;		        // 返回码
        1 optional	string			                        message;	        // 错误信息，如果成功为success
    };

    struct VerifyTopicReq{
        0 optional  BasicInfo                               basicInfo;          //基本信息
        1 optional  int                                     id;                 //观点id
        2 optional  int                                     status;             //-1：删除；0：观点上架；1：观点草稿；2：审核通过；3：审核不通过；4：待审核；5：下架
    };
    struct VerifyTopicRsp{
        0 optional	RET_CODE		                        ret;		        // 返回码
        1 optional	string			                        message;	        // 错误信息，如果成功为success
    };

    struct SetTopicRecommendReq{
        0 optional  BasicInfo                               basicInfo;          //基本信息
        1 optional  int                                     topicId;          //观点id
        2 optional  string                                  recommendKey;       //推荐的类型的key,index_exclusive:web首页-独家观点; Topic_exclusive:web读观点-独家观点; index_banner:app首页-banner; Topic_banner:app观点-banner
        3 optional  int                                     operateType;        // 操作类型：1：推荐；0：取消推荐
        4 optional  string                                  description;        // 推荐描述
        5 optional  string                                  picture;            //推荐的图片地址

    };
    struct SetTopicRecommendRsp{
        0 optional	RET_CODE		                        ret;		        // 返回码
        1 optional	string			                        message;	        // 错误信息，如果成功为success
    };

    struct OperateTopicReq{
        0 optional  BasicInfo                               basicInfo;          //基本信息
        1 optional  TopicBasicInfo	                    TopicBasic;	    //观点基础信息
        2 optional  vector<string>                          editProps;	        // 修改字段列表
    };

    struct OperateTopicRsp{
        0 optional	RET_CODE		                        ret;		        // 返回码
        1 optional	string			                        message;	        // 错误信息，如果成功为success
    };



    struct GetTopicDetailReq{
        0 optional  BasicInfo                                 basicInfo;         //基本信息
        1 optional  int                                       TopicId;         //观点id
        2 optional  string                                    upName;            //查看详细观点的用户id
        3 optional  bool                                      isUserGet;         // true:为用户获取，阅读数加一，false:投顾获取不更新阅读数,默认为false
    };
    struct GetTopicDetailRsp{
        0 optional	RET_CODE		                          ret;		          //返回码
        1 optional	string			                          message;	          //错误信息，如果成功为success
        2 optional  TopicDetailExtra                        data;               //观点的详细信息数据
    };

    struct UpdateTopicExtraReq{
        0 optional  BasicInfo                                   basicInfo;         //基本信息
        1 optional  int                                         TopicId;         //观点id
        2 optional  string                                      upName;            //查看详细观点的用户id,用于获取附加信息
        3 optional	vector<OperateExtra>	                    extras;            // 额外信息列表
    };
    struct UpdateTopicExtraRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional  int                                         data;               // 数据
    };

    struct GetTgTopicListByStatusReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  string                                      tgUpName;           //投顾的id
        2 optional  int                                         status;             //更具的状态,0:上架(默认),1:草稿,4:发布成功待审核,3:审核不通过,5:观点下架,-2:获取所有(不包括删除了的和草稿)观点
        3 optional  int                                         direction;          //按创建时间排序，0：新到旧，1：从旧到新（默认是0）
        4 optional  int                                         offset;             //偏移量, 默认为0
        5 optional  int                                         size;               //获取的长度
        6 optional  int                                         referId;            //参考观点的ID(选传)
        7 optional  string                                      recommendKey;      // 推荐key,高手主页和首页信息流2-6条'top',首页顶部'banner'
    };
    struct GetTgTopicListByStatusRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetTopicList	                            data;               // 观点信息和总数
    };

    struct GetTopicListByTimeReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         referId;            //参考观点的ID(选传)
        2 optional  int                                         offset;             //偏移量
        3 optional  int                                         size;               //大小
        4 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
    };
    struct GetTopicListByTimeRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetTopicList	                            data;               //返回的数据,观点列表和总数

    };

    struct SearchTopicsReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         referId;            //参考观点的ID(选传)
        2 optional  int                                         offset;             //偏移量
        3 optional  int                                         size;               //大小
        4 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        5 optional	string			                            keyWord;	        // 查询关键字
    };
    struct SearchTopicsRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetTopicList	                            data;               //返回的数据,观点列表和总数
    };

    struct GetTopicListByIdReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  vector<int>                                 TopicIds;         //观点id
    };

    struct GetTopicListByIdRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	vector<TopicDetailExtra>	                data;               //返回的数据,观点列表和总数
    };

    struct GetTopicCountsReq{
        0 optional  BasicInfo                                   basicInfo;           //基本信息
        1 optional  string                                      tgUpName;            //投顾的id
    };
    struct GetTopicCountsRsp{
        0 optional	RET_CODE		                            ret;		         // 返回码
        1 optional	string			                            message;	         // 错误信息，如果成功，则为空
        2 optional	int	                                        allCount;            //总数量(除去草稿和删除的数量)
        3 optional	int	                                        freeCount;           //免费笔记的总数
        4 optional	int	                                        chargeCount;         //收费笔记的总数
        5 optional	int	                                        allEarnings;         //总收益
    };

    struct GetManageTopicListReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        2 optional  int                                         offset;             // 偏移量, 默认为0
        3 optional  int                                         size;               // 长度
        4 optional  int                                         referId;            //参考观点的ID(选传)
    };
    struct GetManageTopicListRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetTopicList	                            data;               //返回的数据,观点列表和总数
    };
    struct SearchManageTopicListReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        2 optional  int                                         offset;             // 偏移量, 默认为0
        3 optional  int                                         size;               // 长度，如果为-1则获取所有的数据
        4 optional  string                                      keyWord;            //根据投顾id搜索
        5 optional  int                                         referId;            //参考观点的ID(选传)
    };
    struct SearchManageTopicListRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetTopicList	                            data;               //返回的数据,观点列表和总数
    };

    struct GetTopicsByKeyWordReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        2 optional  int                                         offset;             // 偏移量, 默认为0
        3 optional  int                                         size;               // 长度
        4 optional  string                                      keyWord;            //关键字搜索
        5 optional  int                                         referId;            //参考观点的ID(选传)
    };
    struct GetTopicsByKeyWordRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetTopicList	                            data;               //返回的数据,观点列表和总数
    };
    struct GetMyTopicReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        2 optional  int                                         offset;             // 偏移量, 默认为0
        3 optional  int                                         size;               // 长度
        4 optional  string                                      upName;             //用户id
        5 optional  int                                         referId;            //参考观点的ID(选传)
    };
    struct GetMyTopicRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetTopicList	                            data;               //返回的数据,观点列表和总数
    };
    struct GetTgRecentTopicReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional  int                                         direction;          //方向，默认值为0，0：从新到旧；2：从旧到新
        2 optional  int                                         offset;             // 偏移量, 默认为0
        3 optional  int                                         size;               // 长度
        4 optional  int                                         referId;            //参考观点的ID(选传)
        5 optional  string                                      tgUpName;           //投顾的id
        6 optional  string                                      startTime;          //开始时间（可选，默认一个月前）
    };
    struct GetTgRecentTopicRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetTopicList	                            data;               //返回的数据,观点列表和总数
    };
    struct GetTgTopicCountBatchReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional	vector<string>	                            upNames;            //返回的数据,观点列表和总数
    };
    struct GetTgTopicCountBatchRsp{
        0 optional	RET_CODE		                            ret;		        //返回码
        1 optional	string			                            message;	        //错误信息，如果成功为success
        2 optional	vector<map<string,int>>	                    list;               //返回的数据,观点列表和总数
    };

    struct GetTopicRewardList{
        0 optional  int                                         userId;             //用户id
        1 optional  string                                      userName;           //用户名
        2 optional  string                                      upName;             //up
        3 optional  string                                      avatar;             //头像
    };
    struct GetTopicReward{
        0 optional  vector<GetTopicRewardList>	            list;               //用户信息列表
        1 optional  int	                                        total;
    };
    struct GetTopicRewardReq{
        0 optional  BasicInfo                                   basicInfo;          //基本信息
        1 optional	int	                                        TopicId;          //返回的数据,观点列表和总数
    };

    struct GetTopicRewardRsp{
        0 optional	RET_CODE		                            ret;		        // 返回码
        1 optional	string			                            message;	        // 错误信息，如果成功为success
        2 optional	GetTopicReward	                        data;               //返回的数据,观点列表和总数
    };

    struct GetTgTopicExtraReq
    {
        0 optional    BasicInfo                          basicInfo;         // 基本信息
        1 optional    string                             tgUpName;         // 投顾用户名
    };

    struct GetTgTopicExtraRsp
    {
       0 optional  RET_CODE                              ret;          // 返回码
       1 optional  string                                message;       // 错误信息
       2 optional  string                                extra;
    };

    struct GetTgTopicExtraBatchReq
    {
        0 optional    BasicInfo                          basicInfo;         // 基本信息
        1 optional    vector<string>                     tgUpNames;         // 投顾用户名
        2 optional    string                             startTime;
        3 optional    string                             endTime;
    };

    struct GetTgTopicExtraBatchRsp
    {
        0 optional  RET_CODE                              ret;          // 返回码
        1 optional  string                                message;       // 错误信息
        3 optional  vector<string>                        extras;
    };

    struct QueryTopicStatisticReq
    {
        0 optional    BasicInfo                    basicInfo;           // 基本信息
        1 optional    int                          direction;           // 方向，0：从新到旧，1：从旧到新
        2 optional    string                       referId;             // 参考id
        3 optional    int                          offset;              // 偏移
        4 optional    int                          size;                // 大小
        5 optional    string                       keyWord;             // 查询条件
        6 optional    string                       startTime;           // 开始时间
        7 optional    string                       endTime;             // 结束时间
        8 optional    string                       sortBy;              // 排序方向 asc desc
        9 optional    string                       sortKey;             // 排序字段
    };

    struct TopicStatistic
    {
        0 optional  string                           tgUpName;                // 用户名
        1 optional  int                              total;                   // 总数
        2 optional  int                              readCount;               // 阅读数
        3 optional  int                              favCount;                // 点赞数
        4 optional  int                              rewardCount;             // 打赏
        5 optional  int                              shareCount;              // 分享
        6 optional  int                              commentCount;            // 评论数
        7 optional  int                              avgReadCount;            // 平均阅读数
        8 optional  string                           realName;                //投顾真实姓名
        9 optional  string                           nickName;                //投顾昵称
    };

    struct TopicStatisticRsp
    {
        0 optional  int                              total;       // 总数
        1 optional  int                              status;       // 是否有更多的微博动态标识，0：还有微博动态；1：没有更多微博动态
        2 optional  vector<TopicStatistic>         list;        // 列表
    };

    struct QueryTopicStatisticRsp
    {
        0 optional  RET_CODE                       ret;          // 返回码
        1 optional  string                         message;       // 错误信息
        2 optional  TopicStatisticRsp            data;          // 数据
    };
///////////////////////////////////// 直播相关的结构  //////////////////////////////////
    struct StageLiveDetailExtend                                    //web热门直播，加了一个推荐理由需要返回，为了兼容老的数据结构，这里新加了一个结构体，前0到7字段保持不变
    {
        0 optional  StageLiveBasicInfo   stageLiveBasicInfo;        // 分期直播基本信息
        1 optional  int                  commentCount;              // 评论数
        2 optional  int                  favoriteCount;             // 点赞数
        3 optional  int                  participants;              // 参与人数
        4 optional  int                  saleCount;                 // 售出份数
        5 optional  int                  rewardCount;               // 打赏次数
        6 optional  int                  contentCount;              // 观点数据
        7 optional  TgDetail             tgDetail;                  // 投顾信息
        8 optional  string               reason;                    // 推荐理由,这个字段是一个扩展字段
    };

    struct RelationProduct                                           //直播室内锦囊浮窗信息
    {
        0 optional  string   url;           //跳转地址
        1 optional  string   icon;          //icon的url
        2 optional  string   type;          //类型：1锦囊,后续其他的这里再扩展
        3 optional  int      id;            //类型：绑定产品的id
    };

	struct GetLiveBasicInfoReq
	{
		0 optional  BasicInfo       basicInfo;    // 基本信息
		1 optional	int		        id;		      // 直播室id
	};

	struct GetLiveBasicInfoRsp
	{
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional	LiveBasicInfo	    liveBasicInfo;	   // 直播室基本信息
	};

	struct GetLatestStageBatchByUidReq
	{
		0 optional  BasicInfo       basicInfo;    // 基本信息
		1 optional	vector<string>		upNames;      // 投顾id列表
	};

	struct GetLatestStageBatchByUidRsp
	{
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	vector<StageLiveBasicInfo>	list;	           // 直播室基本信息列表
	};

    struct GetStageLiveListByUidReq
    {
        0 optional  BasicInfo       basicInfo;    // 基本信息
        1 optional	string             upName;       // 投顾id
        2 optional	int             offset;       // 偏移
        3 optional	int             size;         // 数量
        4 optional  int             flag;         // 顺序标识，1：从新到旧；2：从旧到新，默认为1
    };

    struct StageLiveListByUidRsp
    {
        0 optional	int                         total;		       // 总数
        1 optional	vector<StageLiveBasicInfo>	list;	           // 分期直播室基本信息列表
    };

    struct GetStageLiveListByUidRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	StageLiveListByUidRsp   	data;	           // 分期直播室基本信息列表
    };

    struct CreateLiveReq
    {
        0 optional  BasicInfo                   basicInfo;          // 基本信息
        1 optional  vector<DisCountConfig>      config;             // 折扣及价格配置
    };

    struct CreateLiveRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
    };

    struct CreateLiveByStageSubmitReq
    {
        0 optional  BasicInfo           basicInfo;            // 基本请求信息
        1 optional  StageLiveBasicInfo  stageLiveBasicInfo;   // 分期直播信息
    };

    struct CreateLiveByStageSubmitRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional  StageLiveBasicInfo  data;              // 分期直播基本信息
    };

    struct GetHottestStageListReq
    {
        0 optional  BasicInfo           basicInfo;    // 基本信息
        1 optional  int                 offset;       // 偏移
        2 optional  int                 size;         // 大小
    };

    struct GetHottestStageListRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional  StageLive           stageLive;         // 分期直播数据
    };

    struct ViewStageLiveReq
    {
        0 optional  BasicInfo           basicInfo;        // 基本信息
        1 optional  string                 upName;           // 投顾的用户id
        2 optional  int                 liveId;           // 直播室id
        3 optional  int                 stageLiveId;      // 分期直播id
    };

    struct ViewStageLiveRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional  StageLiveDetail     detail;            // 分期直播详情
        3 optional  int                 favoriteStatus;    // 点赞状态 0：未点赞；1：点赞
        4 optional  int                 isLatestStage;     // 是否是最新的分期直播 0：否；1：是
        5 optional  int                 buyStatus=0;       // 是否有权限，1：是；0：否
    };

    struct JoinStageLiveReq
    {
        0 optional  BasicInfo           basicInfo;        // 基本信息
        1 optional  int                 liveId;           // 直播室id
        2 optional  int                 stageLiveId;      // 分期直播id
    };

    struct JoinStageLiveRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
    };

    struct FavoriteStageLiveReq
    {
        0 optional  BasicInfo           basicInfo;        // 基本信息
        1 optional  int                 stageLiveId;      // 分期直播id
    };

    struct FavoriteStageLiveRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
    };

    struct PushStageContentReq
    {
        0 optional  BasicInfo           basicInfo;        // 基本信息
        1 optional  LiveContent         liveContent;      // 直播室内容
    };

    struct PushStageContentRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
    };

    struct DelLiveContentReq
    {
        0 optional  BasicInfo           basicInfo;        // 基本信息
        1 optional  int                 liveId;           // 直播室id
        2 optional  int                 stageLiveId;      // 分期直播id
        3 optional  int                 contentId;        // 内容id
    };

    struct DelLiveContentRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
    };

    struct PullStageLiveContentReq
    {
        0 optional  BasicInfo           basicInfo;        // 基本信息
        1 optional  string              tgUpName;             // 投顾的用户id
        2 optional  int                 liveId;           // 直播室id
        3 optional  int                 stageLiveId;      // 分期直播id
        4 optional  int                 flag;             // 方向标识 1：向下拉取最新的直播内容；2：向上拉取旧的直播内容
        5 optional  int                 maxId;            // 最大的消息id，当flag为1时配合使用
        6 optional  int                 minId;            // 最小的消息id，当flag为2时配合使用
        7 optional  int                 offset;           // 偏移
        8 optional  int                 size;             // 大小
    };

    struct PullStageLiveContentRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional  StageLiveContent    data;              // 直播内容
    };

    struct QueryHotLivesReq
    {
        0 optional  BasicInfo           basicInfo;        // 基本信息
    };

    struct QueryHotLivesRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	vector<StageLiveDetailExtend>	    stageLives;	       // 分期直播
    };


    struct SetHotLiveReq
    {
        0 optional  BasicInfo           basicInfo;        // 基本信息
        1 optional  int                 liveId;           // 直播室id
        2 optional  int                 status;           // 状态 0：取消，1：设置
        3 optional  string              reason;           // 推荐理由
    };

    struct SetHotLiveRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
    };

    struct EditLiveReq
    {
        0 optional  BasicInfo           basicInfo;        // 基本信息
        1 optional  int                 liveId;           // 直播室id
        2 optional  int                 stageLiveId;      // 分期直播id
        3 optional  int                 peopleNum;        // 参与人数
    };

    struct EditLiveRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
    };

    struct SwitchLiveStatusReq
    {
        0 optional  BasicInfo           basicInfo;        // 基本信息
        1 optional  int                 liveId;           // 直播室id
        2 optional  int                 status;           // 状态 1：开启；0：关闭
        3 optional  string              startT;           // 开始时间，时间格式例如：2017-01-03 12:11:09
        4 optional  string              endT;             // 结束时间，时间格式例如：2017-11-03 12:11:09
    };

    struct SwitchLiveStatusRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
    };

    struct QueryLatestLivesReq
    {
        0 optional  BasicInfo           basicInfo;    // 基本信息
        1 optional  int                 offset;       // 偏移
        2 optional  int                 size;         // 大小
    };

    struct QueryLatestLivesRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional  StageLive           stageLive;         // 分期直播数据
    };

    struct StageLiveNoticeReq
    {
        0 optional  BasicInfo           basicInfo;    // 基本信息
        1 optional  int                 liveId;       // 直播室id
        2 optional  int                 stageLiveId;  // 分期直播id
        3 optional  int                 maxId;        // 最大的直播内容id
        4 optional  int                 toText;        // 是否转成纯文本
        5 optional  string              tgUpName;             // 投顾的用户id
    };

    struct StageLiveNoticeRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional  StageLiveNotice     data;              // 最新消息内容
    };

    struct GetLiveStageRedDotReq
    {
        0 optional  BasicInfo           basicInfo;    // 基本信息
        1 optional  int                 liveId;       // 直播室id
    };


    struct GetLiveStageRedDotRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional  int                 count;             // 是否有新的直播内容 1：有，0：没有
    };

    struct GetLiveListReq
    {
        0 optional  BasicInfo       basicInfo;       // 基本信息
        1 optional  int             offset;          // 偏移
        2 optional  int             size;            // 大小
        3 optional  string          recommendKey;   // 类型 'hotshot'大咖直播置顶
    };

    struct RecommendLiveDetail
    {
        0 optional	LiveDetail			  detail;	        // 返回码
        1 optional	int	                  isRecommend = 0;  // 是否推荐 1：推荐； 0：不推荐
        2 optional  string                t;                // 推荐时间
        3 optional  int                   isClose;          // 是否关闭 1：关闭；0：开启
        4 optional  string                startT;           // 直播室开始关闭的时间
        5 optional  string                endT;             // 直播室结束关闭的时间
    };

    struct LiveListRsp
    {
        0 optional	int			                  total;	   // 返回码
        1 optional	vector<RecommendLiveDetail>	  list;	       // 返回信息
    };

    struct GetLiveListRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional  LiveListRsp         data;              // 直播数据
    };

    struct GetStageLiveDetailListReq
    {
        0 optional  BasicInfo       basicInfo;       // 基本信息
        1 optional  string             upName;          // 投顾id
        2 optional  int             liveId;          // 直播室id
        3 optional  int             offset;          // 偏移
        4 optional  int             size;            // 大小
        5 optional  string          year;            // 年，用于过滤
        6 optional  string          month;           // 月，用于过滤
        7 optional  string          recommendKey;    // 推荐key
    };

    struct StageLiveDetailListRsp
    {
        0 optional int                              total;             // 总数
        1 optional  vector<StageLiveDetail>         list;              // 分期直播详情列表
    };

    struct GetStageLiveDetailListRsp
    {
        0 optional	RET_CODE			            ret;		       // 返回码
        1 optional	string			                message;	       // 返回信息
        2 optional  StageLiveDetailListRsp          data;              // 分期直播详情列表
    };

    struct UpdateLiveSubmitReq
    {
        0 optional  BasicInfo                   basicInfo;       // 基本信息
        1 optional  int                         liveId;          // 直播室id
        2 optional  string                      title;           // 直播室标题
        3 optional  vector<DisCountConfig>      config;          // 折扣及价格配置
    };

    struct UpdateLiveSubmitRsp
    {
        0 optional	RET_CODE			            ret;		       // 返回码
        1 optional	string			                message;	       // 返回信息
    };

    struct GetLiveBasicInfoByUidReq
    {
        0 optional  BasicInfo       basicInfo;       // 基本信息
        1 optional  string             tgUpName;            // 投顾id
    };

    struct GetLiveBasicInfoByUidRsp
    {
        0 optional	RET_CODE			            ret;		       // 返回码
        1 optional	string			                message;	       // 返回信息
        2 optional  LiveBasicInfo                   liveBasicInfo;     // 直播室基本信息
    };

    struct EditStageLiveReq
    {
        0 optional  BasicInfo       basicInfo;              // 基本信息
        1 optional  StageLiveBasicInfo stageLiveBasicInfo;  //分期直播的基本信息
    };

    struct EditStageLiveRsp
    {
        0 optional	RET_CODE			            ret;		         // 返回码
        1 optional	string			                message;	         // 返回信息
    };

    struct GetRelationProductReq
    {
        0 optional  BasicInfo       basicInfo;              // 基本信息
        1 optional  int             liveId;                 // 直播室id
    };

    struct GetRelationProductRsp
    {
        0 optional	RET_CODE			            ret;		         // 返回码
        1 optional	string			                message;	         // 返回信息
        2 optional	vector<RelationProduct>			list;	             // 绑定的产品列表
    };

    struct SetRelationProductReq
    {
        0 optional  BasicInfo       basicInfo;              // 基本信息
        1 optional  int             liveId;                 // 直播室id
        2 optional	RelationProduct	relationProduct;	    // 绑定的产品
        3 optional	string	status;	    //1设置，0取消
    };

    struct SetRelationProductRsp
    {
        0 optional	RET_CODE			            ret;		         // 返回码
        1 optional	string			                message;	         // 返回信息
    };

    struct SetStageLiveContentTopReq
    {
        0 optional  BasicInfo       basicInfo;              // 基本信息
        1 optional  int             liveId;                 // 直播室id
        2 optional	int	            stageLiveId;	        // 分期直播id
        3 optional	int	            liveContentId;	        // 直播类容id
        4 optional	int	            status;	                //1设置，0取消
    };

    struct SetStageLiveContentTopRsp
    {
        0 optional	RET_CODE			            ret;		         // 返回码
        1 optional	string			                message;	         // 返回信息
    };

    struct GetStageLiveContentTopReq
    {
        0 optional  BasicInfo           basicInfo;        // 基本信息
        1 optional  int                 liveId;           // 直播室id
        2 optional  int                 stageLiveId;      // 分期直播id
    };

    struct GetStageLiveContentTopRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional  string              liveContent;       // 直播内容
        3 optional  string              recommendTime;     // 置顶时间
    };

    struct GetStageLiveExtraBatchReq
    {
        0 optional  BasicInfo           basicInfo;        // 基本信息
        1 optional  vector<int>         stageLiveIds;      // 分期直播ids
    };

    struct StageLiveExtra
    {
        0 optional  int                  stageLiveId;      // 分期直播id
        1 optional  int                  participants;              // 参与人数
        2 optional  int                  favoriteCount;             // 点赞数
        3 optional int                   favStatus=0;           // 是否点赞，1：是；0：否
    };

    struct GetStageLiveExtraBatchRsp
    {
        0 optional	RET_CODE			           ret;		       // 返回码
        1 optional	string			               message;	       // 返回信息
        2 optional  vector<StageLiveExtra>         data;      // 分期直播Extrass
    };

    struct SetStagePlatformLiveContentTopReq
    {
        0 optional  BasicInfo       basicInfo;              // 基本信息
        1 optional  int             liveId;                 // 直播室id
        2 optional	int	            stageLiveId;	        // 分期直播id
        3 optional	string	            liveContent;	        // 直播类容
        4 optional	int	            status;	                //1设置，0取消
        5 optional	int	            platformType;	                //平台类型1安卓，2 苹果
    };

    struct SetStagePlatformLiveContentTopRsp
    {
        0 optional	RET_CODE			            ret;		         // 返回码
        1 optional	string			                message;	         // 返回信息
    };

    struct SetStageLiveStatusReq
    {
        0 optional  BasicInfo       basicInfo;              // 基本信息
        1 optional	int	            stageLiveId;	        // 分期直播id
        2 optional	int	            status;	                //0：结束；1：进行中
    };

    struct SetStageLiveStatusRsp
    {
        0 optional	RET_CODE			            ret;		         // 返回码
        1 optional	string			                message;	         // 返回信息
    };

    struct SetRecommendLiveReq
    {
        0 optional  BasicInfo       basicInfo;              // 基本信息
        1 optional  int             liveId;                 // 直播室id
        2 optional  string          recommendKey;           // 推荐的key
        3 optional  int             type;                   // 1为推荐 0为取消
    };

    struct SetRecommendLiveRsp
    {
        0 optional	RET_CODE			            ret;		         // 返回码
        1 optional	string			                message;	         // 返回信息
    };

    struct QueryRecommendLivesReq
    {
        0 optional  BasicInfo           basicInfo;        // 基本信息
        1 optional  string              recommendKey;           // 推荐的key
    };

    struct QueryRecommendLivesRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	vector<StageLiveDetail>	    stageLives;	       // 分期直播
    };

///////////////////////////////////// 圈子相关的结构 /////////////////////////////////

    struct Group
    {
        0   optional string			                        id;                     // id
        1   optional string			                        tgUpName;              // 投顾用户名
        2   optional string			                        name;                  // 牛圈名称
        3   optional string                                 intro;                 // 圈子简介
        4   optional string			                        service;               // 圈子服务
        5   optional string			                        welcomeWord;           // 圈子欢迎寄语
        6   optional string			                        img;                   // 圈子图标
        7   optional string			                        thumbnail;             // 图片缩略图
        8   optional int			                        userCount;             //
        9   optional int			                        maxUserCount;          // 最大牛圈人数
        10   optional int			                        status;                // 圈子状态（constant）
        11   optional string		                        createTime;            // 创建时间
        12   optional string	                            updateTime;            // 更新时间
        13   optional int			                        rewardCount;           // 打赏次数
        14   optional int			                        isCost;                // 是否是付费牛圈：1：是，0：否
        15   optional int			                        cost;                  // 牛圈费用
        16   optional int			                        isOwnTip;              // 是否拥有锦囊
        17   optional int			                        tipId;                 // 拥有锦囊的ID
        18   optional string	                            groupBackgroundImg;    // 圈子背景图片
        19   optional string	                            serviceSummary;        // 圈子服务内容简介
        20   optional string	                            planForMonth;          // 圈子包月计划
        21   optional string	                            showScoreUrl;          // 战绩
        22   optional int			                        groupType;             // 圈子类型：1：普通圈；2：黄金圈；3：黄金免费圈；4：l2大数据圈
        23   optional string	                            feature;               // 圈子特色
        24   optional string	                            description;           // 一句话描述
        25   optional int			                        banPublicSay;          // 禁止群聊
        26   optional int			                        riskLevel;             // 风险等级
        27   optional string	                            imGroupId;             // im群组id
        28   optional int			                        realCount;             // 真实牛圈人数
        29   optional vector<DisCountConfig>                config;                // 折扣及价格配置
        30   optional int                                   type;                  // 圈子类型 1为小额圈子；2为大额圈子
        31   optional string                                startTime;             // 大额圈子服务开始时间
        32   optional string                                endTime;               // 大额圈子服务结束时间
    };

    // 圈子运营推荐
    struct GroupAd
    {
        0  optional int                       id;           // id
        1  optional int			              type;         // 类型，1：指定产品；2：指定链接
        2  optional string			          pic;          // 图片
        3  optional string			          url;          // url
        4  optional int			              status;       // 状态 1：启用；0：停用
        5  optional int			              productType;  // 产品类型（兼容旧数据），1：笔记；2：直播；4：组合；5：牛圈；6：投顾；7：锦囊
        6  optional int			              productId;    // 产品id（兼容就数据)
        7  optional string                    groupId;      // 圈子id
    };

    // 圈子完整信息
    struct GroupInfo
    {
        0   optional  Group                   group;          // 圈子信息
        1   optional  TgInfo                  tgInfo;       // 投顾信息
        2   optional  int			          authority=0;             // 是否有权限1有权限0没有有权限
        3   optional  string			      startTime;               // 权限开始时间
        4   optional  string			      endTime;                 // 权限结束时间
        5   optional  int			          remainDays;              // 权限剩余天数
        6   optional  int			          followStatus;              // 投顾关注状态
        7   optional  string			      recommendTime;           // 推荐时间
        8   optional  string			      recommendReason;         // 推荐理由
        9   optional  vector<GroupAd>		  groupAds;                 // 圈子广告产品
        10  optional  int			          isGoldUser;              // 是否黄金用户 1:是；0：否
        11  optional  int			          privateChatNum;              // 群聊消息总数
        12  optional  int			          groupChatNum;              // 私聊消息总数
        13  optional  int			          currentDayPrivateChatNum;              // 当日私聊消息数
        14  optional  int			          currentDayGroupChatNum;              // 当日群聊消息数
        15  optional  int			          runStatus;                //运行状态(0:已结束;1:待启动;2:运行中)
    };

    struct GroupUser
    {
        0 optional    int             id;                   // 用户圈子的id(主键)
        1 optional    int             userId;               // 用户id
        2 optional    string          upName;               // 用户名
        3 optional    string          userName;             // 昵称名
        4 optional    string          groupName;            // 圈子名
        5 optional    int             groupId;              // 圈子id
        6 optional    string          startTime;            // 开始时间
        7 optional    string          endTime;              // 结束时间
        8 optional    string          isGag;              // 是否禁言 1：是；0：否
    };

    // 圈子消息
    struct GroupMsg
    {
        0 optional  int			            id;                         // 消息id
        1 optional  string			        groupId;                    // 牛圈id
        2 optional  string			        tgUpName;                     // 投顾id
        3 optional  string			        content;                    // 消息内容
        4 optional  vector<string>			imgs;                       // 消息图片
        5 optional  vector<string>			thumbnails;                 // 消息图片缩略图
        6 optional  int 			        status=0;                     // 是否已读:1已读0未读
        7 optional  string			        fromUser;                   // 消息发送者
        8 optional  string			        toUser;                     // 消息接受者
        9 optional  int			            type;                       // 消息类型：1为私聊，2为群聊
        10 optional  string			        createTime;                 // 发送时间
        11 optional  string			        linkTitle;                  // 链接标题
        12 optional  string			        linkUrl;                    // 链接地址
        13 optional  string			        linkDesc;                   // 链接描述
        14 optional  string			        toUsers;                   // 群私聊接收用户
        15 optional  string			        linkWebUrl;                 // 链接web地址
        16 optional  int			        isArticle=0;                     // 是否观点更新链接
    };

    struct GroupModule
    {
        0 optional	int		            id;		       // id
        1 optional	int 		        type;		   // 类别；1：圈子功能模块；2：圈子详情模块
        2 optional	int	    	        moduleType;	   // 模块类型，0：私聊，1：金股池；2：交易圈锦囊；3：研究；4：战法；5：大数据报告；6：交易;7：开户；8：订阅；10：链接
        3 optional	string		        moduleName;	   // 名称
        4 optional	string		        modulePic;	   // 图标
        5 optional	string	    	    moduleUrl;	   // 链接
        6 optional	int		            status=1;	   // 状态，1：启用；2：停用
        7 optional	int		            moduleId;	   // 关联产品id, 例如：交易圈锦囊中对应锦囊id
        8 optional	string		        createTime;    // 创建时间
        9 optional  int                 sort;          // 排序
    };

    struct SetGroupModuleReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	string                        groupId;	            // 圈子id
        2 optional	GroupModule                   groupModule;	        // 圈子模块
    };

    struct SetGroupModuleRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
    };

    struct SetGroupModuleBatchReq
    {
        0 optional  BasicInfo                        basicInfo;            // 基本信息
        1 optional	string                           groupId;	            // 圈子id
        2 optional	string                           tgUpName;	            // 投顾用户名
        3 optional	vector<GroupModule>              groupModules;	        // 圈子模块
    };

    struct SetGroupModuleBatchRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
    };

    struct GetGroupModuleReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	string                        groupId;	        // 圈子id
    };

    struct GetGroupModuleRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	vector<GroupModule>	        data;	       // 模块列表
    };

    struct QueryGroupListReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional  int                           offset = 0;           // 偏移
        2 optional  int                           size;                 // 大小
    };

    struct GroupListRsp
    {
        0 optional	int			                  total;	   // 总数
        1 optional	vector<GroupInfo>	          list;	       // 列表
    };

    struct QueryGroupListRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	GroupListRsp	            data;	            // 圈子列表
    };

    struct QueryGroupListByIdReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	vector<string>	                groupIds;	            // 圈子ids
    };

    struct QueryGroupListByIdRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	vector<GroupInfo>	          data;	            // 圈子列表
    };

    struct QueryAdviserGroupReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional  int                           offset = 0;           // 偏移
        2 optional  int                           size;                 // 大小
        3 optional  string                        tgUpName;             // 投顾id
    };

    struct QueryAdviserGroupRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	GroupListRsp	            data;	            // 圈子列表
    };

    struct JoinGroupReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional  string                        groupId;                 // 圈子id
    };

    struct JoinGroupRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	Group       	            data;	            // 圈子列表
    };

    struct JoinGroupFreeReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional  string                        groupId;                 // 圈子id
    };

    struct JoinGroupFreeRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	Group       	            data;	            // 圈子列表
    };

    struct QuitGroupReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional  string                        groupId;                 // 圈子id
    };

    struct QuitGroupRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	Group       	            data;	            // 圈子列表
    };

    struct QuitGroupFreeReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional  string                        groupId;                 // 圈子id
    };

    struct QuitGroupFreeRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	Group       	            data;	            // 圈子列表
    };

    struct GetMyGroupReq
    {
        0 optional BasicInfo             basicInfo;        // 基本信息
        1 optional int                   offset = 0;       // 偏移
        2 optional int                   size;             // 大小
        3 optional string                upName;            // 用户id/投顾id
    };

    struct GetMyGroupRsp
    {
        0 optional  int             ret;         // 返回码
        1 optional  string          message;      // 返回消息
        2 optional  GroupListRsp       data;         // 消息列表
    };

    struct EnterGroupReq
    {
        0 optional BasicInfo             basicInfo;        // 基本信息
        1 optional string                groupId;       // 圈子id
    };

    struct EnterGroupRsp
    {
        0 optional  int             ret;         // 返回码
        1 optional  string          message;      // 返回消息
        2 optional  GroupInfo       data;         // 圈子信息
    };

    struct GetGroupByTgIdReq
    {
        0 optional BasicInfo             basicInfo;        // 基本信息
        1 optional string                tgUpName;              //投顾id
    };

    struct GetGroupByTgIdRsp
    {
        0 optional  int             ret;         // 返回码
        1 optional  string          message;      // 返回消息
        2 optional  Group           data;         // 圈子信息
    };

    struct ViewGroupReq
    {
        0 optional BasicInfo             basicInfo;        // 基本信息
        1 optional string                groupId;          // 圈子id
        2 optional string                tgUpName;         // 投顾用户名
    };

    struct ViewGroupRsp
    {
        0 optional  int             ret;         // 返回码
        1 optional  string          message;      // 返回消息
        2 optional  GroupInfo       data;         // 圈子信息
    };

    struct SetGroupAdReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	string                        groupId;	            // 圈子id
        2 optional	GroupAd                       groupAd;	        // 圈子广告
    };

    struct SetGroupAdRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
    };

    struct GetGroupAdReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	string                           groupId;	        // 圈子id
    };

    struct GetGroupAdRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	vector<GroupAd>	        data;	       // 广告列表
    };

    struct SetTgGroupRightReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	int                           typeId;	            // 权限类型,1圈子创建上限;2圈子插入连接;
        2 optional	string                        tgUpName;	            // 投顾用户名
        3 optional	string                        data;	                // 权限信息
    };

    struct SetTgGroupRightRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
    };

    struct GetTgGroupRightReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	int                           typeId;	            // 权限类型,1圈子创建上限;2圈子插入连接;
        2 optional	string                        tgUpName;	            // 投顾id
    };

    struct GetTgGroupRightRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	string	                    data;	            // 权限信息
    };

    struct CreateGroupReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	Group                         group;	        // 圈子信息
        2 optional  CriterionOrderInfo            criterionOrderInfo;        //  标准订单信息
    };

    struct CreateGroupRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	Group           	        data;	              // 圈子信息
    };

    struct OperationGroupReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	Group                         group;	        // 圈子信息
        2 optional	vector<string>                editProps;	        // 修改字段列表
        3 optional  CriterionOrderInfo            criterionOrderInfo;        //  标准订单信息
    };

    struct OperationGroupRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	Group           	        data;	              // 圈子信息
    };

    struct GetGroupContentReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional  int                            offset = 0;   // 偏移
        2 optional  int                            size;         // 大小
        3 optional  int                            type;         // 消息类型：1：私聊，2：群聊,3：群私聊
        4 optional	string                         groupId;	        // 圈子id
        5 optional  string                        upName;       // 用户id,type=1可用
    };

    struct GroupContent
    {
        0 optional	GroupMsg			                  groupMsg;	   // 消息
        1 optional	UserInfo			                  userInfo;	   // 用户信息
    };

    struct GroupContentRsp
    {
        0 optional	int			                  total;	   // 总数
        1 optional	vector<GroupContent>	      list;	       // 列表
    };

    struct GetGroupContentRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	GroupContentRsp           	        data;	              // 圈子信息
    };

    struct PushGroupContentReq
    {
        0 optional  BasicInfo                     basicInfo;                // 基本信息
        1 optional	GroupMsg			          groupMsg;	                // 圈子消息
        2 optional  int                           ignoreIMError = 0;       // 是否忽略IM失败，1：是；0：否
        3 optional  int                           sendRongyun = 1;         // 是否发送融云，1：是；0：否
        4 optional  int                           groupMsgType;         // 消息类型：1文本；2：图片；3：内外链；8：圈子锦囊更新；10：圈子红包消息；
        5 optional  int                           isSystem;         // 是否系统消息，1：是；0：否
    };

    struct PushGroupContentRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	GroupMsg           	        data;	              // 圈子信息
    };

    struct PushGroupPrivateContentReq
    {
        0 optional  BasicInfo                     basicInfo;                // 基本信息
        1 optional	GroupMsg			          groupMsg;	                // 圈子消息
        2 optional  int                           groupMsgType;         // 消息类型：1文本；2：图片；3：内外链
        3 optional  int                           groupChatType;         // 聊天类型：3：群私聊，4：分组私聊
    };

    struct PushGroupPrivateContentRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	GroupMsg           	        data;	              // 圈子信息
    };

    struct PullGroupSessionReq
    {
        0 optional  BasicInfo                      basicInfo;            // 基本信息
        1 optional	string                         groupId;	        // 圈子id
        2 optional  string                         tgUpName;          // 投顾id
        3 optional	string                         condition;	        // 搜索条件
    };

    struct GroupSession
    {
        0 optional  string                         upName;              // 用户id
        1 optional	string			               userName;	       //用户名
        2 optional	string			               avatar;	            //用户头像
        3 optional  int                            onReadCount;         //未读消息数
        4 optional  double                         payment = 0;             //消费金额
        5 optional  int                            star = 0;                //用户星级
        6 optional	string			               userTag;	            //用户标签(黑名单)
        7 optional	string			               createTime;	        //最新消息时间
        8 optional	string			               content;	            //最新文本消息
        9 optional	vector<string>			       imgs;	            //最新图片消息
    };

    struct PullGroupSessionRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	vector<GroupSession>	        data;	       // 列表
    };

    struct PullGroupFriendReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	string                         groupId;	        // 圈子id
        2 optional  string                         tgUpName;         // 投顾id
        3 optional	string                         condition;	        // 搜索条件
    };

    struct GroupFriend
    {
        0 optional  string                         upName;              // 用户名
        1 optional	string			               userName;	        // 昵称
        2 optional	string			               avatar;	            //用户头像
        3 optional  int                            onReadCount;         //未读消息数
        4 optional  double                         payment=0;           //消费金额
        5 optional  int                            star=0;              //用户星级
        6 optional  int                            readStatus;         //消息阅读状态
        7 optional	string			               latestTime;	       //最新消息时间
        8 optional  int                            teamId;             //圈子分组id
        9 optional	string			               endTime;	            //服务结束日期
        10 optional	string			               userTag;	            //用户标签(黑名单)
        11 optional int                            isGag;              // 是否禁言 1：是；0：否
    };

    struct PullGroupFriendRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	vector<GroupFriend>	        data;	       // 列表
    };

    struct QueryAllMessageReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional  int                            offset = 0;   // 偏移
        2 optional  int                            size;         // 大小
        3 optional  int                            type;         // 消息类型：1为私聊，2为群聊
        4 optional	string                         condition;	        // 搜索条件
    };

    struct GroupMessage
    {
        0 optional	GroupMsg			              groupMsg;	           // 圈子消息
        1 optional	string			                  groupName;	       // 圈子名
        2 optional	string			                  fromUserName;	       // 发送用户名
        3 optional	string			                  toUserName;	       // 接收用户名
        4 optional	string			                  createUser;	       // 投顾名
    };

    struct AllMessageRsp
    {
        0 optional	int			                  total;	   // 总数
        1 optional	vector<GroupMessage>	      list;	       // 列表
    };

    struct QueryAllMessageRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	AllMessageRsp           	        data;	              // 圈子信息
    };

    struct QueryGroupUserReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional  int                            offset = 0;   // 偏移
        2 optional  int                            size;         // 大小
        3 optional	string                         condition;	        // 搜索条件
    };

    struct GroupUserRsp
    {
        0 optional	int			                  total;	   // 总数
        1 optional	vector<GroupUser>	      list;	       // 列表
    };

    struct QueryGroupUserRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	GroupUserRsp           	        data;	              // 圈子信息
    };

    struct SetGroupGagReq
    {
        0 optional  BasicInfo                      basicInfo;            // 基本信息
        1 optional	string                         groupId;	        // 圈子id
        2 optional  string                         upName;   // 用户id
        3 optional  int                            type;   //1:设置;0:取消
    };

    struct SetGroupGagRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
    };

    struct QueryGroupsWithRecommendReq
    {
        0 optional  BasicInfo       basicInfo;    // 基本信息
        1 optional  int             offset = 0;   // 偏移
        2 optional  int             size;         // 大小
        3 optional  int             typeId;       // 推荐类型,0圈子管理;1appBanner;2观点圈子
        4 optional  string          condition;         // 查询条件
    };

    struct QueryGroupsWithRecommendRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional	GroupListRsp			data;	       // 返回信息
    };

    struct UpdateRecommendGroupReq
    {
        0 optional  BasicInfo       basicInfo;    // 基本信息
        1 optional  string             groupId;        // 圈子id
        2 optional  int             status;       // 1：更新/增加；2：删除
        3 optional  int             typeId;       // 推荐类型,1appBanner;2观点圈子
        4 optional  string          updateTime;       // 更新时间
    };

    struct UpdateRecommendGroupRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
    };

    struct QueryRecommendGroupsReq
    {
        0 optional  BasicInfo       basicInfo;    // 基本信息
        1 optional  int             typeId;       // 推荐圈子列表类别(1appBanner;2观点圈子)
        2 optional  int             excludeSubscribed=0;       //是否排除已有的，1：是
    };

    struct QueryRecommendGroupsRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional	vector<GroupInfo>	    data;	           // 圈子列表
    };

    struct SubscribeGroupReq
    {
        0 optional  BasicInfo       basicInfo;    // 基本信息
        1 optional  string          upName;       // 用户名
        2 optional  string          groupId;        // 圈子id
        3 optional  int             type;         // 交易类型(1:购买；2:打赏)
        4 optional  int             status;       // 订单状态
    };

    struct SubscribeGroupRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
    };

    struct QueryGroupStatisticReq
    {
        0 optional  BasicInfo       basicInfo;    // 基本信息
        1 optional  string          date;         // 统计日期，不传为前一天
    };

    struct GroupStatistic
    {
        0 optional	string			                  groupId;	                    // 圈子id
        1 optional	string			                  groupName;	                // 圈子名
        2 optional	int			                      userCount;	                // 圈子人数
        3 optional	int			                      groupChatUserCount;	       // 群聊人数
        4 optional	int			                      groupChatMsgCount;	       // 群聊次数
        5 optional	int			                      privateChatUserCount;	       // 私聊人数
        6 optional	int			                      privateChatMsgCount;	       // 私聊次数
        7 optional	double			                  buyPayment;	            // 购买收入
        8 optional	double			                  rewardPayment;	       // 打赏收入
    };

    struct QueryGroupStatisticRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	vector<GroupStatistic>	    data;	           // 圈子统计信息列表
    };

    struct PullGroupTeamReq
    {
        0 optional  BasicInfo                      basicInfo;            // 基本信息
        1 optional	string                         groupId;	            // 圈子id
        2 optional	vector<int>                    teamIds;	            // 分组id
        3 optional  int                            isUser=0;              //是否查询分组用户
        4 optional	string                         condition;	        // 搜索条件
    };

    struct GroupTeam
    {
        0 optional  int                            id;              // 分组id
        1 optional	string                         groupId;	        // 圈子id
        2 optional	string			               name;	       //分组名
        3 optional  string			               createTime;     // 创建时间
        4 optional  string			               updateTime;     // 更新时间
        5 optional  int			                   status=1;       // 是否有效
        6 optional	vector<GroupFriend>	           users;	       // 圈子分组用户列表
    };

    struct PullGroupTeamRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	vector<GroupTeam>	        data;	       // 列表
    };

    struct UpdateGroupTeamReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	GroupTeam                     groupTeam;	        // 圈子分组
    };

    struct UpdateGroupTeamRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional	GroupTeam           	        data;	              // 圈子分组
    };

    struct UpdateGroupTeamUserReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	GroupFriend                   groupFriend;	    // 圈子用户
        2 optional	int                           fromTeamId=0;	        //移动分组用户
        3 optional	int                           isDelete=0;	        //删除分组用户
    };

    struct UpdateGroupTeamUserRsp
    {
        0 optional	RET_CODE			ret;		       // 返回码
        1 optional	string			    message;	       // 返回信息
        2 optional	GroupFriend           	        data;	              // 圈子分组用户
    };

    struct notifyReq
    {
        0 optional    BasicInfo       basicInfo;         // 基本信息
        1 optional    string          cmd;               // 关键字
        2 optional    string          data;              // 数据
    };

    struct notifyRsp
    {
        0 optional  RET_CODE                             ret;          // 返回码
        1 optional  string                               message;       // 错误信息
    };

    struct broadcastReq
    {
        0 optional    BasicInfo       basicInfo;         // 基本信息
        1 optional    string          cmd;               // 关键字
        2 optional    string          data;              // 数据
    };

    struct broadcastRsp
    {
        0 optional  RET_CODE                             ret;          // 返回码
        1 optional  string                               message;       // 错误信息
    };

    struct GetTokenReq
    {
        0 optional    BasicInfo       basicInfo;            // 基本信息
        1 optional    string          upName;               // 用户Id
        2 optional    string          nickName;             // 用户昵称
        3 optional    string          avatar;               // 用户头像
    };

    struct GetTokenRsp
    {
        0 optional  RET_CODE                             ret;          // 返回码
        1 optional  string                               message;       // 错误信息
        3 optional  string                               token;         // 融云token
    };

    struct PushSystemMessageReq
    {
        0 optional    BasicInfo             basicInfo;              // 基本信息
        1 optional    int                   targetId;               // 目标Id
        2 optional    string                targetName;             // 目标名称
        3 optional    int                   targetType;             // 目标类型
        4 optional    int                   messageType;            // 消息类型
        5 optional    vector<int>           userIds;                // 接收者id
        6 optional    vector<string>        userNames;              // 接收者名字
        7 optional    string                pushContent;            // 消息内容
        8 optional    int                   userId;                 // 发送者Id
        9 optional    string                userName;               // 发送者昵称
        10 optional   string                avatar;                 // 发送者头像
        11 optional   string                startTime;              // 发送时间

    };

    struct PushSystemMessageRsp
    {
        0 optional  RET_CODE                             ret;          // 返回码
        1 optional  string                               message;       // 错误信息
    };

    struct GetGroupRightByAppReq
    {
        0 optional    BasicInfo                          basicInfo;              // 基本信息
        1 optional    string                             upName;                 // 用户信息
        2 optional    string                             groupId;                // 圈子id
    };

    struct GetGroupRightByAppData
    {
        0 optional    int                                buyStatus;              // 是否有权限,1为有权限,0为无权限
        1 optional    string                             url;                    // h5地址,当buyStatus为0时有效
    };

    struct GetGroupRightByAppRsp
    {
        0 optional  RET_CODE                             ret;          // 返回码
        1 optional  string                               message;       // 错误信息
        2 optional  GetGroupRightByAppData               data;         // 数据
    };

    struct EnterGroupByAppReq
    {
         0 optional BasicInfo                            basicInfo;        // 基本信息
         1 optional string                               groupId;          // 圈子id
         2 optional string                               upName;           // 用户名
    };

    struct EnterGroupData
    {
        0   optional  Group                             group;             // 圈子信息
        1   optional  TgInfo                            tgInfo;            // 投顾信息
        2   optional  int			                    authority=0;       // 是否有权限1有权限0没有有权限
        3   optional  string			                startTime;         // 权限开始时间
        4   optional  string			                endTime;           // 权限结束时间
        5   optional  int			                    remainDays;        // 权限剩余天数
        6   optional  string			                groupIntroUrl;     // 圈子介绍地址
        7   optional  string			                renewFeeUrl;       // 续费地址
        8   optional  string			                rewardUrl;         // 打赏地址
        9   optional  vector<GroupModule>	            groupOwnRightList; // 模块列表			                rewardUrl;         // 打赏地址
    };
    struct EnterGroupByAppRsp
    {
        0 optional  RET_CODE                             ret;          // 返回码
        1 optional  string                               message;       // 错误信息
        2 optional  EnterGroupData                       data;       // 数据
    };

    struct SetGroupNoticeReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	string                        groupId;	        // 圈子id
        2 optional	string                        notice;	        // 圈子id
        3 optional	int	                          status;	        //1设置，0取消
        4 optional	int	                          platformType;	    //平台类型:1 安卓;2 苹果;3 PC
        5 optional	string                        url;	            // 跳转链接
    };

    struct SetGroupNoticeRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
    };

    struct GetGroupNoticeReq
    {
        0 optional  BasicInfo                     basicInfo;            // 基本信息
        1 optional	string                        groupId;	        // 圈子id
        2 optional	int	                          platformType;	    //平台类型:1 安卓;2 苹果;3 PC
    };

    struct GroupNotice
    {
        0 optional	string			            notice;	       // 公告
        1 optional	string	                    url;	       // 跳转链接
    };

    struct GetGroupNoticeRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	GroupNotice	                data;	           // 圈子公告
    };

    struct QueryUserGagReq
    {
        0 optional  BasicInfo                      basicInfo;            // 基本信息
        1 optional	string                         groupId;	        // 圈子id
        2 optional	string                         condition;	        // 搜索条件
    };

    struct QueryUserGagRsp
    {
        0 optional	RET_CODE			        ret;		       // 返回码
        1 optional	string			            message;	       // 返回信息
        2 optional	vector<GroupFriend>	        data;	       // 列表
    };

    struct GetAgentListReq
    {
        0 optional BasicInfo                            basicInfo;        // 基本信息
        1 optional string                               corpId;      // 企业微信ID
        2 optional string                               tgUpName;    // 投顾用户名
    };

    struct AgentInfo
    {
        0 optional string                               agentId;
        1 optional string                               agentName;
        2 optional string                               corpSecret;
    };

    struct GetAgentListRsp
    {
        0 optional   int                                ret;                // 状态码
        1 optional   string                             message;            // 返回消息
        2 optional   vector<AgentInfo>                  agentList;          // 应用列表
        3 optional   string                             corpId;             // 企业微信ID
    };

    struct GetDepartmentListReq
    {
        0 optional      BasicInfo                               basicInfo;         // 基本信息
        1 optional      string                                  corpId;      // 企业微信ID
        2 optional      string                                  tgUpName;    // 投顾用户名
        3 optional      string                                  departmentId;      // 部门id
    };

    struct Department
    {
        0 optional      string                                  id;       // 部门id
        1 optional      string                                  name;     // 部门名称
        2 optional      string                                  parentId; // 父部门id
        3 optional      string                                  order;    // 在父部门中的次序值
    };

    struct GetDepartmentListRsp
    {
        0 optional      RET_CODE                                ret;                // 返回值
        1 optional      string                                  message;            // 返回消息
        2 optional      vector<Department>                      departmentList;     // 部门列表

    };

    struct GetTagListReq
    {
        0 optional      BasicInfo                               basicInfo;         // 基本信息
        1 optional      string                                  corpId;      // 企业微信ID
        2 optional      string                                  tgUpName;    // 投顾用户名
    };

    struct Tag
    {
        0 optional      string                                  tagId;       // 标签id
        1 optional      string                                  tagName;     // 标签名
    };

    struct GetTagListRsp
    {
        0 optional      RET_CODE                                ret;                // 返回值
        1 optional      string                                  message;            // 返回消息
        2 optional      vector<Tag>                             tagList;            // 标签列表

    };

///////////////////////////////////// 战绩榜相关的结构 /////////////////////////////////
    struct GetIndexByDateNewReq
    {
        0 optional      BasicInfo                               basicInfo;         // 基本信息
        1 optional      int                                     type=239;              // 企业微信ID
        2 optional      string                                  startTime;         // 开始时间
        3 optional      string                                  endTime;           // 结束时间
        4 optional      map<string, string>                     condition;         // 查询条件
    };

    struct IndexByDateNew
    {
        1 optional short shtMarket;
        2 optional string sCode;
        3 optional int iDate;
        4 optional map<string, double> mField;    //指标double型信号数据
        5 optional int iTime = 0;                 //指标时间格式：小时*60 + 分钟，如9:30对应 9*60+30，仅对分钟级别指标有效
        6 optional string sName;
        7 optional map<string, string> mTagField; //指标string型标签数据
    };

    struct GetIndexByDateNewRsp
    {
        0 optional      RET_CODE                                ret;                // 返回值
        1 optional      string                                  message;            // 返回消息
        2 optional      IndexByDateNew                          data;               // 数据
    };

    interface TgAccess
    {
///////////////////////////////////// 信息流相关的接口 /////////////////////////////////

        // 注入信息
       int injectInfo(InjectInfoReq stReq, out InjectInfoRsp stRsp);

       // 查询信息
       int queryInfo(QueryInfoReq stReq, out QueryInfoRsp stRsp);

       // 查询会员信息流
       int queryVipInfo(QueryVipInfoReq stReq, out QueryVipInfoRsp stRsp);

       // 修改动态状态（动态删除/下架）
       int updateFeedStatus(UpdateFeedStatusReq stReq, out UpdateFeedStatusRsp stRsp);

       // 设置精彩动态
       int setRecommendFeed(SetRecommendFeedReq stReq, out SetRecommendFeedRsp stRsp);

       // 获取精彩动态
       int getRecommendFeed(GetRecommendFeedReq stReq, out GetRecommendFeedRsp stRsp);

       // 搜索动态列表（运营后台接口)
       int searchFeeds(SearchFeedsReq stReq, out SearchFeedsRsp stRsp);

       // 查询投顾的信息流
       int getFeedsByAuthor(GetFeedsByAuthorReq stReq, out GetFeedsByAuthorRsp stRsp);

      // 设置信息流过滤标签
      int setFeedTags(SetFeedTagsReq stReq, out SetFeedTagsRsp stRsp);

      // 获取信息流过滤标签
      int getFeedTags(GetFeedTagsReq stReq, out GetFeedTagsRsp stRsp);

       // 广播消息
       int broadcast(BroadcastReq stReq, out BroadcastRsp stRsp);

       // 查询热门大咖
       int getFeedsByHotAuthor(GetFeedsByHotAuthorReq stReq, out GetFeedsByHotAuthorRsp stRsp);

///////////////////////////////////// 问股/评论相关的接口 /////////////////////////////////

        // 发表评论
        int publishComment(PublishCommentReq stReq, out PublishCommentRsp stRsp);

        // 修改评论审核状态（评论审核、撤销）
        int updateCommentStatus(UpdateCommentStatusReq stReq, out UpdateCommentStatusRsp stRsp);

        // 设置用户禁言
        int gagUser(GagUserReq stReq, out GagUserRsp stRsp);

        // 设置精彩评论
        int setRecommendComment(SetRecommendCommentReq stReq, out SetRecommendCommentRsp stRsp);

        // 获取精彩评论
        int getRecommendComment(GetRecommendCommentReq stReq, out GetRecommendCommentRsp stRsp);

        // 获取精彩评论(信息流中的多级评论)
        int getRecommendCommentBatch(GetRecommendCommentBatchReq stReq, out GetRecommendCommentBatchRsp stRsp);

        // 获取全部问股（投顾后台接口）
        int getCommentsFilterGag(GetCommentsFilterGagReq stReq, out GetCommentsFilterGagRsp stRsp);

        // 获取上线问股列表
        int getComments(GetCommentsReq stReq, out GetCommentsRsp stRsp);

        // 根据id获取上线问股列表
        int getCommentsById(GetCommentsByIdReq stReq, out GetCommentsByIdRsp stRsp);

        // 获取我的问股列表
        int getMyComments(GetMyCommentsReq stReq, out GetMyCommentsRsp stRsp);

        // 获取评论列表
        int getMultilevelComments(GetMultilevelCommentsReq stReq, out GetMultilevelCommentsRsp stRsp);

        // 获取二级评论更多列表
        int getReplyComments(GetReplyCommentsReq stReq, out GetReplyCommentsRsp stRsp);

        // 评论点赞
        int updateCommentFav(UpdateCommentFavReq stReq, out UpdateCommentFavRsp stRsp);

        // 获取评论业务信息
        int getCommentBusiness(GetCommentBusinessReq stReq, out GetCommentBusinessRsp stRsp);

        // 搜索评论列表（运营后台接口)
        int searchComments(SearchCommentsReq stReq, out SearchCommentsRsp stRsp);

        // 搜索评论统计（运营后台接口)
        int queryCommentStatistics(QueryCommentStatisticsReq stReq, out QueryCommentStatisticsRsp stRsp);

        // 更新信息流里的推荐问股
        int updateRecommendInFeed(UpdateRecommendInFeedReq stReq, out UpdateRecommendInFeedRsp stRsp);


///////////////////////////////////// 观点相关的接口 /////////////////////////////////

        // 发表微博动态
        int publishTweet(PublishTweetReq stReq, out PublishTweetRsp stRsp);

        // 修改微博动态（后台)
        int operateTweet(OperateTweetReq stReq, out OperateTweetRsp stRsp);

        // 推送微博动态通知
        int pushTweet(PushTweetReq stReq, out PushTweetRsp stRsp);

        // 获取投顾线微博动态列表
        int getTgTweets(GetTgTweetsReq stReq, out GetTgTweetsRsp stRsp);

        // 修改微博动态状态（微博动态删除、下架）
        int updateTweetStatus(UpdateTweetStatusReq stReq, out UpdateTweetStatusRsp stRsp);

        // 搜索微博动态列表（运营后台接口)
        int searchTweets(SearchTweetsReq stReq, out SearchTweetsRsp stRsp);

        // 搜索微博动态统计数据（运营后台接口)
        int queryTweetStatistic(QueryTweetStatisticReq stReq, out QueryTweetStatisticRsp stRsp);

        // 根据id获取上线微博动态列表
        int getTweetsById(GetTweetsByIdReq stReq, out GetTweetsByIdRsp stRsp);

        // 更新微博动态点赞数等信息
        int updateTweetExtra(UpdateTweetExtraReq stReq, out UpdateTweetExtraRsp stRsp);

///////////////////////////////////// 视频直播相关的接口 /////////////////////////////////

        // 发表视频解盘
        int publishVideoLive(PublishVideoLiveReq stReq, out PublishVideoLiveRsp stRsp);

        // 推送视频解盘通知
        int pushVideoLive(PushVideoLiveReq stReq, out PushVideoLiveRsp stRsp);

        // 获取投顾线视频解盘列表
        int getTgVideoLives(GetTgVideoLivesReq stReq, out GetTgVideoLivesRsp stRsp);

        // 根据id获取上线视频解盘列表
        int getVideoLivesById(GetVideoLivesByIdReq stReq, out GetVideoLivesByIdRsp stRsp);

        // 修改视频解盘状态（视频解盘删除、下架）
        int updateVideoLiveStatus(UpdateVideoLiveStatusReq stReq, out UpdateVideoLiveStatusRsp stRsp);

        // 更新视频解盘点赞数等信息
        int updateVideoLiveExtra(UpdateVideoLiveExtraReq stReq, out UpdateVideoLiveExtraRsp stRsp);

        // 搜索视频解盘列表（运营后台接口)
        int searchVideoLives(SearchVideoLivesReq stReq, out SearchVideoLivesRsp stRsp);

        // 获取视频解盘列表
        int getVideoLives(GetVideoLivesReq stReq, out GetVideoLivesRsp stRsp);

///////////////////////////////////// 公共相关的接口 /////////////////////////////////
        // 更新业务内容点赞数等信息
        int updateBusinessExtra(UpdateBusinessExtraReq stReq, out UpdateBusinessExtraRsp stRsp);

        // 查询业务内容点赞数等信息
        int queryBusinessExtra(QueryBusinessExtraReq stReq, out QueryBusinessExtraRsp stRsp);

///////////////////////////////////// 投顾和用户相关的接口 /////////////////////////////////

        //  获取投顾信息
        int getTgInfo(GetTgInfoReq stReq, out GetTgInfoRsp stRsp);

        //  更新投顾信息
        int updateTgInfo(UpdateTgInfoReq stReq, out UpdateTgInfoRsp stRsp);

        //  批量获取投顾信息
        int getTgInfoBatch(GetTgInfoBatchReq stReq, out GetTgInfoBatchRsp stRsp);

        //  获取投顾列表
        int getTgInfoList(GetTgInfoListReq stReq, out GetTgInfoListRsp stRsp);

        //  设置推荐位
        int setRecommend(SetRecommendReq stReq, out SetRecommendRsp stRsp);

        //  获取投顾列表,推荐位排在前面(管理平台使用)
        int getTgs(GetTgsReq stReq, out GetTgsRsp stRsp);

        //  获取推荐的投顾
        int getRecommendTgList(GetRecommendTgListReq stReq, out GetRecommendTgListRsp stRsp);

        //  关注投顾
        int followTg(FollowTgReq stReq, out FollowTgRsp stRsp);

        //  我的投顾
        int getMyTg(GetMyTgReq stReq,out GetMyTgRsp stRsp);

        //  投顾列表-非好友
        int getTgList(GetTgListReq stReq, out GetTgListRsp stRsp);

        // 批量获取投顾详细信息，包括基本的用户信息和投顾信息
        int getTgDetailBatch(GetTgDetailBatchReq stReq, out GetTgDetailBatchRsp stRsp);

        //批量根据用户名查询用户信息
        int getUserInfoByUpNameBatch(GetUserInfoByUpNameBatchReq stReq, out GetUserInfoByUpNameBatchRsp stRsp);

        // push消息
        int pushMsg(PushMsgReq stReq, out PushMsgRsp stRsp);

        // 发送短信
        int sendSms(SendSmsReq stReq, out SendSmsRsp stRsp);

        //用户的权限
        int getUserRight(GetUserRightReq stReq,out GetUserRightRsp stRsp);

		// 设置投顾tab
        int setTgTab(SetTgTabReq stReq, out SetTgTabRsp stRsp);

        // 获取投顾tab
        int getTgTab(GetTgTabReq stReq, out GetTgTabRsp stRsp);

        int login(LoginReq stReq, out LoginRsp stRsp);

        // 创建标准产品
        int createCriterionProduct(CreateCriterionProductReq stReq, out CreateCriterionProductRsp stRsp);

        // 批量获取标准产品信息
        int getCriterionProductInfoBatch(GetCriterionProductInfoBatchReq stReq, out GetCriterionProductInfoBatchRsp stRsp);

        // 根据产品Id获取投顾upName
        int getTgProfileByProductId(GetTgProfileByProductIdReq stReq, out GetTgProfileByProductIdRsp stRsp);

        // 创建Vip产品
        int createVipProduct(CreateVipProductReq stReq, out CreateVipProductRsp stRsp);

        // 查询Vip产品
        int queryVipProduct(QueryVipProductReq stReq, out QueryVipProductRsp stRsp);

        // 查询Vip打折信息及详情
        int queryVipProductDetail(QueryVipProductDetailReq stReq, out QueryVipProductDetailRsp stRsp);

        // 查询用户购买vip的产品权限
        int queryVipRightProduct(QueryVipRightProductReq stReq, out QueryVipRightProductRsp stRsp);

        // 批量查询投顾是否创建vip产品
        int queryTgVipProductBatch(QueryTgVipProductBatchReq stReq, out QueryTgVipProductBatchRsp stRsp);

        // 批量查询Vip产品
        int queryVipProductBatch(QueryVipProductBatchReq stReq, out QueryVipProductBatchRsp stRsp);

        // 根据权限Id和用户名查询权限
        int queryUserRightByRightId(QueryUserRightByRightIdReq stReq, out QueryUserRightByRightIdRsp stRsp);

        // 更新Vip产品状态
        int updateVipProductStatus(UpdateVipProductStatusReq stReq, out UpdateVipProductStatusRsp stRsp);

        // 查询用户vip权限
        int queryUserVipRight(QueryUserVipRightReq stReq, out QueryUserVipRightRsp stRsp);

        // 查询所有VIP信息
        int searchVipProduct(SearchVipProductReq stReq, out SearchVipProductRsp stRsp);

        // 免费开通权限
        int openFreeUserRight(OpenFreeUserRightReq stReq, out OpenFreeUserRightRsp stRsp);

        // 批量关注投顾
        int followTgBatch(FollowTgBatchReq stReq, out FollowTgBatchRsp stRsp);

        // 批量首页优先推荐投顾
        int getHomeOptimizationRecommendTg(GetHomeOptimizationRecommendTgReq stReq, out GetHomeOptimizationRecommendTgRsp stRsp);

        // 查询第三方用户信息,如微信、qq
        int getUnionUserInfoByUpName(GetUnionUserInfoByUpNameReq stReq, out GetUnionUserInfoByUpNameRsp stRsp);

        // 收藏观点、专栏、视频
        int collectInfo(CollectInfoReq stReq, out CollectInfoRsp stRsp);

        // 我的收藏
        int queryMyCollection(QueryMyCollectionReq stReq, out QueryMyCollectionRsp stRsp);

        // 查询用户收藏状态
        int queryUserCollectStatus(QueryUserCollectStatusReq stReq, out QueryUserCollectStatusRsp stRsp);

        // 设置投顾内容标签
        int setTgContentLabel(SetTgContentLabelReq stReq, out SetTgContentLabelRsp stRsp);

        // 获取投顾内容标签
        int getTgContentLabel(GetTgContentLabelReq stReq, out GetTgContentLabelRsp stRsp);

        // 批量查询用户收藏状态
        int queryUserCollectStatusBatch(QueryUserCollectStatusBatchReq stReq, out QueryUserCollectStatusBatchRsp stRsp);

        // 根据用户名获取对应的微信号
        int queryWeChatInfoByUpName(QueryWeChatInfoByUpNameReq stReq, out QueryWeChatInfoByUpNameRsp stRsp);

        // 统计投顾的数据
        int getTgStatisticsData(GetTgStatisticsDataReq stReq, out GetTgStatisticsDataRsp stRsp);

        //创建打折产品
        int createDisCountProduct(CreateDisCountProductReq stReq,out CreateDisCountProductRsp stRsp);

        //某权限的用户
        int getRightUser(GetRightUserReq stReq,out GetRightUserRsp stRsp);

        // 设置投顾服务及标签
        int setTgContentService(SetTgContentServiceReq stReq, out SetTgContentServiceRsp stRsp);

        // 获取投顾内容标签
        int getTgContentService(GetTgContentServiceReq stReq, out GetTgContentServiceRsp stRsp);

        // 批量获取投顾内容标签
        int getTgContentServiceBatch(GetTgContentServiceBatchReq stReq, out GetTgContentServiceBatchRsp stRsp);

        // 获取所有的内容标签
        int getAllContentService(GetAllContentServiceReq stReq, out GetAllContentServiceRsp stRsp);

        // 批量获取权限用户头像
        int getRightUserAvatarBatch(GetRightUserAvatarBatchReq stReq, out GetRightUserAvatarBatchRsp stRsp);

        // 获取CRM的权限
        int getCrmModules(GetCrmModulesReq stReq, out GetCrmModulesRsp stRsp);

        // 设置标准订单信息
        int setCriterionOrderInfo(SetCriterionOrderInfoReq stReq, out SetCriterionOrderInfoRsp stRsp);

        // 获取标准订单信息
        int getCriterionOrderInfo(GetCriterionOrderInfoReq stReq, out GetCriterionOrderInfoRsp stRsp);

        // 获取热门页面推荐位
        int getHotRecommendTg(GetHotRecommendTgReq stReq, out GetHotRecommendTgRsp stRsp);

///////////////////////////////////// 专栏相关的接口 /////////////////////////////////
		//投顾后台或者用户点击列表--获取单个观点（草稿）的详细信息
        int getViewDetail(GetViewDetailReq stReq, out GetViewDetailRsp stRsp);

        //更新附加信息--点赞数、阅读数等额外信息|用户的行为，比如点赞
        int updateArticleExtra(UpdateArticleExtraReq stReq, out UpdateArticleExtraRsp stRsp);

        //按照时间的发布顺序，获取观点（审核通过）列表
        int getArticleListByTime(GetArticleListByTimeReq stReq, out GetArticleListByTimeRsp stRsp);

        //根据观点id获取列表
        int getArticleListById(GetArticleListByIdReq stReq, out GetArticleListByIdRsp stRsp);

        //根据观点标题模糊搜索观点列表
        int getViewsByKeyWord(GetViewsByKeyWordReq stReq, out GetViewsByKeyWordRsp stRsp);

        //获取推荐位的观点列表
        int getRecommendList(GetRecommendListReq stReq, out GetRecommendListRsp stRsp);

        //获取热门文章列表
        int getHotArticleList(GetHotArticleListReq stReq, out GetHotArticleListRsp stRsp);

        //获取已经购买的观点列表
        int getMyArticle(GetMyArticleReq stReq, out GetMyArticleRsp stRsp);

        //获取投顾最近一个月的的上线观点列表(供vip授权查询)
        int getTgRecentArticle(GetTgRecentArticleReq stReq, out GetTgRecentArticleRsp stRsp);

        //--------------------------------------------投顾后台-----------------------------------------
        //投顾后台管理-保存和更新观点或发布观点
        int saveArticle(SaveArticleReq stReq, out SaveArticleRsp stRsp);

         //获取投顾下面的观点列表----根据status，获取不同的观点列表
        int getTgArticleListByStatus(GetTgArticleListByStatusReq stReq, out GetTgArticleListByStatusRsp stRsp);

         //投顾后台观点类型数量统计(总数(除去草稿和删除的数量)，免费观点数量，收费观点数量,观点总收益)
         int getViewCountsAndEarnings(GetViewCountsReq stReq, out GetViewCountsRsp stRsp);

        // 查询上线观点列表
        int searchArticles(SearchArticlesReq stReq, out SearchArticlesRsp stRsp);

        //--------------------------------------------运营后台-----------------------------------------
        //运营后台-设置或者取消运营位
        int setArticleRecommend(SetArticleRecommendReq stReq, out SetArticleRecommendRsp stRsp);

        //运营后台管理-操作已发布观点
        int operateArticle(OperateArticleReq stReq, out OperateArticleRsp stRsp);

        //运营后台-获取全部（除草稿，已删除）观点列表
        int getOperateAllArticleList(GetOperateAllArticleListReq stReq, out GetOperateAllArticleListRsp stRsp);

        //运营后台-搜索观点列表,根据用户id搜索
        int searchOperateArticleList(SearchOperateArticleListReq stReq, out SearchOperateArticleListRsp stRsp);

        //--------------------------------------------管理后台-----------------------------------------
        //改变观点状态（审核）
        int verifyArticle(VerifyArticleReq stReq, out VerifyArticleRsp stRsp);

        //管理后台-获取全部（除草稿，已删除）观点列表
        int getManageArticleList(GetManageArticleListReq stReq, out GetManageArticleListRsp stRsp);

        //管理后台-搜索观点列表,根据用户id搜索
        int searchManageArticleList(SearchManageArticleListReq stReq, out SearchManageArticleListRsp stRsp);

        //批量获取投顾已经审核通过的观点数量
        int getTgArticleCountBatch(GetTgArticleCountBatchReq stReq,out GetTgArticleCountBatchRsp stRsp);

        //获取观点的打赏人数和打赏用户的头像
        int  getArticleReward(GetArticleRewardReq stReq,out GetArticleRewardRsp stRsp);

        //单独给观点分享用的获取观点详情的接口
        int getShareViewDetail(GetViewDetailReq stReq, out GetViewDetailRsp stRsp);

        int getTopNews(GetTopNewsReq stReq, out GetTopNewsRsp stRsp);

        // 搜索微博动态统计数据（运营后台接口)
        int queryArticleStatistic(QueryArticleStatisticReq stReq, out QueryArticleStatisticRsp stRsp);

        // 向企业微信推送测试消息
        int sendWorkWeChatMessageByArticle(SendWorkWeChatMessageByArticleReq stReq, out SendWorkWeChatMessageByArticleRsp stRsp);

///////////////////////////////////// 公共服务相关的接口 /////////////////////////////////
        //更新附加信息 如点赞数，评论数、阅读数等
        int updateExtra(UpdateExtraReq stReq, out UpdateExtraRsp stRsp);

        //批量获取附加信息
        int getExtraBatch(GetExtraBatchReq stReq, out GetExtraBatchRsp stRsp);

        // 设置热门页面推荐位
        int setHotRecommend(SetHotRecommendReq stReq, out SetHotRecommendRsp stRsp);

        // 获取热门页面推荐位
        int getHotRecommend(GetHotRecommendReq stReq, out GetHotRecommendRsp stRsp);

///////////////////////////////////// CRM终端配置相关的接口 /////////////////////////////////
        //按顺序下发APP首页的ICON 20个 新接口
        int getAppIconMore(getAppIconMoreReq req, out AppIndexIconRsp rsp);

///////////////////////////////////// 五星股票池相关的接口 /////////////////////////////////
        int getFiveStarMonitor(GetFiveStarMonitorReq stReq,out GetFiveStarMonitorRsp stRsp);

///////////////////////////////////// 涨停尖兵相关的接口 /////////////////////////////////
        int getLimitUpPioneer(GetLimitUpPioneerReq stReq,out GetLimitUpPioneerRsp stRsp);

///////////////////////////////////// 键盘精灵相关的接口 /////////////////////////////////
        int getSuggestion(GetSuggestionReq stReq,out GetSuggestionRsp stRsp);

///////////////////////////////////// 诊股记录相关的接口 /////////////////////////////////
        int getDiagnosisRecord(GetDiagnosisRecordReq stReq,out GetDiagnosisRecordRsp stRsp);

///////////////////////////////////// 自选股相关的接口 /////////////////////////////////
        //我的自选股
        int getMyStock(GetMyStockReq stReq,out GetMyStockRsp stRsp);

        //加入到我的自选
        int addMyStock(AddMyStockReq stReq,out AddMyStockRsp stRsp);

///////////////////////////////////// 微信push相关的接口 /////////////////////////////////
        //判断用户有没有关注微信服务号
        int isFollowWxService(IsFollowWxServiceReq stReq,out IsFollowWxServiceRsp stRsp);

///////////////////////////////////// 选股宝相关的接口 /////////////////////////////////
        int queryPickStock(QueryPickStockReq stReq,out QueryPickStockRsp stRsp);


///////////////////////////////////// 引用消息相关的接口 /////////////////////////////////
        // 发表引用消息
        int publishCite(PublishCiteReq stReq, out PublishCiteRsp stRsp);

        // 获取投顾线引用消息列表
        int getTgCites(GetTgCitesReq stReq, out GetTgCitesRsp stRsp);

        // 修改引用消息状态（引用消息删除、下架）
        int updateCiteStatus(UpdateCiteStatusReq stReq, out UpdateCiteStatusRsp stRsp);

        // 根据id获取上线引用消息列表
        int getCitesById(GetCitesByIdReq stReq, out GetCitesByIdRsp stRsp);

        // 更新引用消息点赞数等信息
        int updateCiteExtra(UpdateCiteExtraReq stReq, out UpdateCiteExtraRsp stRsp);

        // 搜索引用消息列表（运营后台接口)
        int searchCites(SearchCitesReq stReq, out SearchCitesRsp stRsp);

///////////////////////////////////// 打新、停复牌相关的接口 /////////////////////////////////
        int queryNewStock(QueryNewStockReq stReq,out QueryNewStockRsp stRsp);

        int queryStopAndResumeStock(QueryStopAndResumeStockReq stReq,out QueryStopAndResumeStockRsp stRsp);

///////////////////////////////////// 用户自选相关的接口 /////////////////////////////////
        // 用户自选股动态
        int getUserStockMsg(GetUserStockMsgReq stReq,out GetUserStockMsgRsp stRsp);

        // 自选股推荐
        int getPickSuggestion(GetPickSuggestionReq stReq,out GetPickSuggestionRsp stRsp);

////////////////////////////////// 金股池相关的接口 /////////////////////////////////
        // 调整个股
        int adjustStock(AdjustStockReq stReq, out AdjustStockRsp stRsp);

        // 金股池的个股
        int getGoldStock(GetGoldStockReq stReq, out GetGoldStockRsp stRsp);

        // 个股调整记录
        int getGoldStockRecord(GetGoldStockRecordReq stReq, out GetGoldStockRecordRsp stRsp);

        // 创建金股池
        int createGoldStock(CreateGoldStockReq stReq, out CreateGoldStockRsp stRsp);

        // 查询投顾是否创建过金股池
        int getGoldStockBusiness(GetGoldStockBusinessReq stReq, out GetGoldStockBusinessRsp stRsp);

////////////////////////////////// 课程相关的接口 /////////////////////////////////

        // 创建课程
        int createCourse(CreateCourseReq stReq,out CreateCourseRsp stRsp);

        // 获取投顾课程列表
        int getTgCourses(GetTgCoursesReq stReq,out GetTgCoursesRsp stRsp);

        // 创建课程内容
        int createCourseContent(CreateCourseContentReq stReq,out CreateCourseContentRsp stRsp);

        // 获取课程内容列表
        int getCourseContents(GetCourseContentsReq stReq,out GetCourseContentsRsp stRsp);

        // 更新课程状态
        int updateCourseStatus(UpdateCourseStatusReq stReq,out UpdateCourseStatusRsp stRsp);

        // 根据课程id获取课程信息
        int getCourseByIds(GetCourseByIdsReq stReq,out GetCourseByIdsRsp stRsp);

        // 根据课程内容id获取课程内容信息
        int getCourseContentByIds(GetCourseContentByIdsReq stReq,out GetCourseContentByIdsRsp stRsp);

        // 获取最近课程列表
        int getLatestCourse(GetLatestCourseReq stReq,out GetLatestCourseRsp stRsp);

        // 设置课程推荐
        int setRecommendCourse(SetRecommendCourseReq stReq,out SetRecommendCourseRsp stRsp);

        // 获取课程推荐
        int getRecommendCourse(GetRecommendCourseReq stReq,out GetRecommendCourseRsp stRsp);

        // 更新课程内容状态
        int updateCourseContentStatus(UpdateCourseContentStatusReq stReq,out UpdateCourseContentStatusRsp stRsp);

        // 更新课程标志
        int updateCourseFlag(UpdateCourseFlagReq stReq,out UpdateCourseFlagRsp stRsp);

        // 获取课程内容详情
        int getCourseContentDetail(GetCourseContentDetailReq stReq,out GetCourseContentDetailRsp stRsp);

        // 更新课程点赞数等信息
        int updateCourseExtra(UpdateCourseExtraReq stReq, out UpdateCourseExtraRsp stRsp);

        // 更新课程内容点赞数等信息
        int updateCourseContentExtra(UpdateCourseContentExtraReq stReq, out UpdateCourseContentExtraRsp stRsp);

        // 获取推荐课程列表
        int getRecommendCourseList(GetRecommendCourseListReq stReq, out GetRecommendCourseListRsp stRsp);

        // 获取用户的课程
        int getMyCourses(GetMyCoursesReq stReq, out GetMyCoursesRsp stRsp);

        // 根据付费类型获取课程
        int getCoursesByCostType(GetCoursesByCostTypeReq stReq, out GetCoursesByCostTypeRsp stRsp);

////////////////////////////////// 话题相关的接口 /////////////////////////////////
        //投顾后台或者用户点击列表--获取单个观点（草稿）的详细信息
        int getTopicDetail(GetTopicDetailReq stReq, out GetTopicDetailRsp stRsp);

        //更新附加信息--点赞数、阅读数等额外信息|用户的行为，比如点赞
        int updateTopicExtra(UpdateTopicExtraReq stReq, out UpdateTopicExtraRsp stRsp);

        //按照时间的发布顺序，获取观点（审核通过）列表
        int getTopicListByTime(GetTopicListByTimeReq stReq, out GetTopicListByTimeRsp stRsp);

        //根据观点id获取列表
        int getTopicListById(GetTopicListByIdReq stReq, out GetTopicListByIdRsp stRsp);

        //根据观点标题模糊搜索观点列表
        int getTopicsByKeyWord(GetTopicsByKeyWordReq stReq, out GetTopicsByKeyWordRsp stRsp);

        //获取已经购买的观点列表
        int getMyTopic(GetMyTopicReq stReq, out GetMyTopicRsp stRsp);

        //获取投顾最近一个月的的上线观点列表(供vip授权查询)
        int getTgRecentTopic(GetTgRecentTopicReq stReq, out GetTgRecentTopicRsp stRsp);

        //--------------------------------------------投顾后台-----------------------------------------
        //投顾后台管理-保存和更新观点或发布观点
        int saveTopic(SaveTopicReq stReq, out SaveTopicRsp stRsp);

         //获取投顾下面的观点列表----根据status，获取不同的观点列表
        int getTgTopicListByStatus(GetTgTopicListByStatusReq stReq, out GetTgTopicListByStatusRsp stRsp);

         //投顾后台观点类型数量统计(总数(除去草稿和删除的数量)，免费观点数量，收费观点数量,观点总收益)
         int getTopicCountsAndEarnings(GetTopicCountsReq stReq, out GetTopicCountsRsp stRsp);

        // 查询上线观点列表
        int searchTopics(SearchTopicsReq stReq, out SearchTopicsRsp stRsp);


        //--------------------------------------------运营后台-----------------------------------------
        //运营后台-设置或者取消运营位
        int setTopicRecommend(SetTopicRecommendReq stReq, out SetTopicRecommendRsp stRsp);

        //运营后台管理-操作已发布观点
        int operateTopic(OperateTopicReq stReq, out OperateTopicRsp stRsp);

        //--------------------------------------------管理后台-----------------------------------------
        //改变观点状态（审核）
        int verifyTopic(VerifyTopicReq stReq, out VerifyTopicRsp stRsp);

        //管理后台-获取全部（除草稿，已删除）观点列表
        int getManageTopicList(GetManageTopicListReq stReq, out GetManageTopicListRsp stRsp);

        //管理后台-搜索观点列表,根据用户id搜索
        int searchManageTopicList(SearchManageTopicListReq stReq, out SearchManageTopicListRsp stRsp);

        //批量获取投顾已经审核通过的观点数量
        int getTgTopicCountBatch(GetTgTopicCountBatchReq stReq,out GetTgTopicCountBatchRsp stRsp);

        //获取观点的打赏人数和打赏用户的头像
        int  getTopicReward(GetTopicRewardReq stReq,out GetTopicRewardRsp stRsp);

        //单独给观点分享用的获取观点详情的接口
        int getShareTopicDetail(GetTopicDetailReq stReq, out GetTopicDetailRsp stRsp);

        int getTgTopicExtra(GetTgTopicExtraReq stReq, out GetTgTopicExtraRsp stRsp);

        int getTgTopicExtraBatch(GetTgTopicExtraBatchReq stReq, out GetTgTopicExtraBatchRsp stRsp);

        // 搜索微博动态统计数据（运营后台接口)
        int queryTopicStatistic(QueryTopicStatisticReq stReq, out QueryTopicStatisticRsp stRsp);

        ////////////////////////////////// 直播服务相关的接口 /////////////////////////////////

        // 获取直播室信息
        int getLiveBasicInfo(GetLiveBasicInfoReq stReq, out GetLiveBasicInfoRsp stRsp);

        // 批量获取分期直播
        int getLatestStageBatchByUid(GetLatestStageBatchByUidReq stReq, out GetLatestStageBatchByUidRsp stRsp);

        // 获取投顾的分期直播信息
        int getStageLiveListByUid(GetStageLiveListByUidReq stReq, out GetStageLiveListByUidRsp stRsp);

        // ###创建直播室
        int createLive(CreateLiveReq stReq, out CreateLiveRsp stRsp);

        // ###创建分期直播
        int createLiveByStageSubmit(CreateLiveByStageSubmitReq stReq, out CreateLiveByStageSubmitRsp stRsp);

        // 最热的分期直播列表
        int getHottestStageList(GetHottestStageListReq stReq, out GetHottestStageListRsp stRsp);

        // 查看分期直播
        int viewStageLive(ViewStageLiveReq stReq, out ViewStageLiveRsp stRsp);

        // 加入分期直播
        int joinStageLive(JoinStageLiveReq stReq, out JoinStageLiveRsp stRsp);

        // 点赞分期直播
        int favoriteStageLive(FavoriteStageLiveReq stReq, out FavoriteStageLiveRsp stRsp);

        // 发布分期直播内容
        int pushStageContent(PushStageContentReq stReq, out PushStageContentRsp stRsp);

        // 删除直播内容
        int delLiveContent(DelLiveContentReq stReq, out DelLiveContentRsp stRsp);

        // ###拉取分期直播内容
        int pullStageLiveContent(PullStageLiveContentReq stReq, out PullStageLiveContentRsp stRsp);

        // web看直播-热门直播
        int queryHotLives(QueryHotLivesReq stReq, out QueryHotLivesRsp stRsp);

        // 设置/取消推荐位 web看直播-热门直播
        int setHotLive(SetHotLiveReq stReq, out SetHotLiveRsp stRsp);

        // 修改直播参与人数
        int editLive(EditLiveReq stReq, out EditLiveRsp stRsp);

        // 切换直播状态
        int switchLiveStatus(SwitchLiveStatusReq stReq, out SwitchLiveStatusRsp stRsp);

        // 最热的分期直播列表
        int queryLatestLives(QueryLatestLivesReq stReq, out QueryLatestLivesRsp stRsp);

        // 分期直播内容更新提醒
        int stageLiveNotice(StageLiveNoticeReq stReq, out StageLiveNoticeRsp stRsp);

        // 我的直播红点提示
        int getLiveStageRedDot(GetLiveStageRedDotReq stReq, out GetLiveStageRedDotRsp stRsp);

        // 获取直播室列表
        int getLiveList(GetLiveListReq stReq, out GetLiveListRsp stRsp);

        // 设置推荐直播
        int setRecommendLive(SetRecommendLiveReq stReq, out SetRecommendLiveRsp stRsp);

        // 获取推荐直播
        int queryRecommendLives(QueryRecommendLivesReq stReq, out QueryRecommendLivesRsp stRsp);

        // 获取直播室下的所有分期直播详情
        int getStageLiveDetailList(GetStageLiveDetailListReq stReq, out GetStageLiveDetailListRsp stRsp);

        // 更新直播室信息
        int updateLiveSubmit(UpdateLiveSubmitReq stReq, out UpdateLiveSubmitRsp stRsp);

        // 获取直播室基本信息
        int getLiveBasicInfoByUid(GetLiveBasicInfoByUidReq stReq, out GetLiveBasicInfoByUidRsp stRsp);

        // 修改分期直播信息
        int editStageLiveBasicInfoById(EditStageLiveReq stReq, out EditStageLiveRsp stRsp);

        // 获取直播里嵌入锦囊浮窗(可通用)
        int getRelationProduct(GetRelationProductReq stReq, out GetRelationProductRsp stRsp);

        // 设置直播里嵌入锦囊浮窗(可通用)
        int setRelationProduct(SetRelationProductReq stReq, out SetRelationProductRsp stRsp);

        // 设置直播内容置顶
        int setStageLiveContentTop(SetStageLiveContentTopReq stReq, out SetStageLiveContentTopRsp stRsp); 
        
        // 设置不同平台直播内容置顶
        int SetStagePlatformLiveContentTop(SetStagePlatformLiveContentTopReq stReq, out SetStagePlatformLiveContentTopRsp stRsp);

        // 拉取置顶的直播内容
        int getStageLiveContentTop(GetStageLiveContentTopReq stReq, out GetStageLiveContentTopRsp stRsp);

        // 批量获取分期直播互动数据
        int getStageLiveExtraBatch(GetStageLiveExtraBatchReq stReq, out GetStageLiveExtraBatchRsp stRsp);

        // 设置直播室的状态
        int setStageLiveStatus(SetStageLiveStatusReq stReq, out SetStageLiveStatusRsp stRsp);

///////////////////////////////////// 圈子相关的接口 /////////////////////////////////
        // 创建圈子
        int createGroup(CreateGroupReq stReq, out CreateGroupRsp stRsp);

        // 管理圈子
        int operationGroup(OperationGroupReq stReq, out OperationGroupRsp stRsp);

        // 加入圈子
        int joinGroup(JoinGroupReq stReq, out JoinGroupRsp stRsp);

        // 加入免费圈子
        int joinGroupFree(JoinGroupFreeReq stReq, out JoinGroupFreeRsp stRsp);

        // 退出圈子
        int quitGroup(QuitGroupReq stReq, out QuitGroupRsp stRsp);

        // 退出免费圈子
        int quitGroupFree(QuitGroupFreeReq stReq, out QuitGroupFreeRsp stRsp);

        // 进入圈子
        int enterGroup(EnterGroupReq stReq, out EnterGroupRsp stRsp);

        // 查看圈子简介
        int viewGroup(ViewGroupReq stReq, out ViewGroupRsp stRsp);

        // 根据投顾id获取圈子
        int getGroupByTgId(GetGroupByTgIdReq stReq, out GetGroupByTgIdRsp stRsp);

        // 获取用户/投顾的圈子
        int getMyGroup(GetMyGroupReq stReq, out GetMyGroupRsp stRsp);

        // 获取圈子消息
        int getGroupContent(GetGroupContentReq stReq, out GetGroupContentRsp stRsp);

        // 获取会话列表
        int pullGroupSession(PullGroupSessionReq stReq, out PullGroupSessionRsp stRsp);

        // 获取圈友列表
        int pullGroupFriend(PullGroupFriendReq stReq, out PullGroupFriendRsp stRsp);

        // 发送圈子消息
        int pushGroupContent(PushGroupContentReq stReq, out PushGroupContentRsp stRsp);

        // 发送群私聊消息
        int pushGroupPrivateContent(PushGroupPrivateContentReq stReq, out PushGroupPrivateContentRsp stRsp);


        // 设置投顾的圈子服务权限
        int setTgGroupRight(SetTgGroupRightReq stReq, out SetTgGroupRightRsp stRsp);

        // 获取投顾的圈子服务权限
        int getTgGroupRight(GetTgGroupRightReq stReq, out GetTgGroupRightRsp stRsp);

        // 查询圈子列表
        int queryGroupList(QueryGroupListReq stReq, out QueryGroupListRsp stRsp);

        // 根据id查询圈子列表
        int queryGroupListById(QueryGroupListByIdReq stReq, out QueryGroupListByIdRsp stRsp);

        // 查询投顾圈子列表
        int queryAdviserGroup(QueryAdviserGroupReq stReq, out QueryAdviserGroupRsp stRsp);

        // 查询圈子推荐列表
        int queryRecommendGroups(QueryRecommendGroupsReq stReq, out QueryRecommendGroupsRsp stRsp);


        // 获取圈子列表（含推荐位信息)
        int queryGroupsWithRecommend(QueryGroupsWithRecommendReq stReq, out QueryGroupsWithRecommendRsp stRsp);

        // 设置/取消圈子推荐
        int updateRecommendGroup(UpdateRecommendGroupReq stReq, out UpdateRecommendGroupRsp stRsp);

        // 查询全部圈子消息
        int queryAllMessage(QueryAllMessageReq stReq, out QueryAllMessageRsp stRsp);

        // 查询全部圈子用户
        int queryGroupUser(QueryGroupUserReq stReq, out QueryGroupUserRsp stRsp);

        // 设置圈子用户禁言/解除禁言
        int setGroupGag(SetGroupGagReq stReq, out SetGroupGagRsp stRsp);

        // 用户订阅成功圈子的回调
        int subscribeGroup(SubscribeGroupReq stReq, out SubscribeGroupRsp stRsp);

        // 圈子情况统计
        int queryGroupStatistic(QueryGroupStatisticReq stReq, out QueryGroupStatisticRsp stRsp);

        // 获取圈子分组列表
        int pullGroupTeam(PullGroupTeamReq stReq, out PullGroupTeamRsp stRsp);

        // 修改圈子分组
        int updateGroupTeam(UpdateGroupTeamReq stReq, out UpdateGroupTeamRsp stRsp);

        // 修改圈子分组用户
        int updateGroupTeamUser(UpdateGroupTeamUserReq stReq, out UpdateGroupTeamUserRsp stRsp);

        //获取融云token
        int getToken(GetTokenReq stReq, out GetTokenRsp stRsp);

        //推送融云消息
        int pushSystemMessage(PushSystemMessageReq stReq, out PushSystemMessageRsp stRsp);

        // 设置圈子模块
        int setGroupModule(SetGroupModuleReq stReq, out SetGroupModuleRsp stRsp);

        // 设置圈子模块
        int setGroupModuleBatch(SetGroupModuleBatchReq stReq, out SetGroupModuleBatchRsp stRsp);

        // 获取圈子模块
        int getGroupModule(GetGroupModuleReq stReq, out GetGroupModuleRsp stRsp);

        // app圈子权限
        int getGroupRightByApp(GetGroupRightByAppReq stReq, out GetGroupRightByAppRsp stRsp);

        // app进入圈子
        int enterGroupByApp(EnterGroupByAppReq stReq, out EnterGroupByAppRsp stRsp);

        // 设置圈子公告
        int setGroupNotice(SetGroupNoticeReq stReq, out SetGroupNoticeRsp stRsp);

        // 获取圈子公告
        int getGroupNotice(GetGroupNoticeReq stReq, out GetGroupNoticeRsp stRsp);

        // 获取圈友禁言列表
        int queryUserGag(QueryUserGagReq stReq, out QueryUserGagRsp stRsp);

///////////////////////////////////// 企业微信相关的接口 /////////////////////////////////
        // 获取企业微信应用列表
        int getAgentList(GetAgentListReq stReq, out GetAgentListRsp stRsp);

        // 获取部门列表
        int getDepartmentList(GetDepartmentListReq stReq, out GetDepartmentListRsp stRsp);

        // 获取标签列表
        int getTagList(GetTagListReq stReq, out GetTagListRsp stRsp);

///////////////////////////////////// 战绩榜相关的接口 /////////////////////////////////
        int getIndexByDateNew(GetIndexByDateNewReq stReq, out GetIndexByDateNewRsp stRsp);

    };


};